
lab_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000839c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800856c  0800856c  0001856c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d4  080086d4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080086d4  080086d4  000186d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086dc  080086dc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086dc  080086dc  000186dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086e0  080086e0  000186e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080086e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004798  20000074  08008758  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000480c  08008758  0002480c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6f4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003afa  00000000  00000000  0003b798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  0003f298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  00040838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025af7  00000000  00000000  00041c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017eec  00000000  00000000  00067767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7103  00000000  00000000  0007f653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00166756  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e1c  00000000  00000000  001667ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008554 	.word	0x08008554

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08008554 	.word	0x08008554

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005bc:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <HAL_Init+0x40>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <HAL_Init+0x40>)
 80005c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_Init+0x40>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <HAL_Init+0x40>)
 80005ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_Init+0x40>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <HAL_Init+0x40>)
 80005da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e0:	2003      	movs	r0, #3
 80005e2:	f000 fb4a 	bl	8000c7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f007 fa32 	bl	8007a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005ec:	f007 f8ca 	bl	8007784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023c00 	.word	0x40023c00

080005fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_IncTick+0x20>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_IncTick+0x24>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4413      	add	r3, r2
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <HAL_IncTick+0x24>)
 800060e:	6013      	str	r3, [r2, #0]
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000004 	.word	0x20000004
 8000620:	200045c4 	.word	0x200045c4

08000624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return uwTick;
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <HAL_GetTick+0x14>)
 800062a:	681b      	ldr	r3, [r3, #0]
}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	200045c4 	.word	0x200045c4

0800063c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000644:	2300      	movs	r3, #0
 8000646:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d101      	bne.n	8000652 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	e033      	b.n	80006ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	2b00      	cmp	r3, #0
 8000658:	d109      	bne.n	800066e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f007 f8be 	bl	80077dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2200      	movs	r2, #0
 800066a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	f003 0310 	and.w	r3, r3, #16
 8000676:	2b00      	cmp	r3, #0
 8000678:	d118      	bne.n	80006ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000682:	f023 0302 	bic.w	r3, r3, #2
 8000686:	f043 0202 	orr.w	r2, r3, #2
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f94a 	bl	8000928 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2200      	movs	r2, #0
 8000698:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069e:	f023 0303 	bic.w	r3, r3, #3
 80006a2:	f043 0201 	orr.w	r2, r3, #1
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	641a      	str	r2, [r3, #64]	; 0x40
 80006aa:	e001      	b.n	80006b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006ac:	2301      	movs	r3, #1
 80006ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d101      	bne.n	80006e0 <HAL_ADC_ConfigChannel+0x1c>
 80006dc:	2302      	movs	r3, #2
 80006de:	e113      	b.n	8000908 <HAL_ADC_ConfigChannel+0x244>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2201      	movs	r2, #1
 80006e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b09      	cmp	r3, #9
 80006ee:	d925      	bls.n	800073c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	68d9      	ldr	r1, [r3, #12]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	4613      	mov	r3, r2
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4413      	add	r3, r2
 8000704:	3b1e      	subs	r3, #30
 8000706:	2207      	movs	r2, #7
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	43da      	mvns	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	400a      	ands	r2, r1
 8000714:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	68d9      	ldr	r1, [r3, #12]
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	689a      	ldr	r2, [r3, #8]
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	b29b      	uxth	r3, r3
 8000726:	4618      	mov	r0, r3
 8000728:	4603      	mov	r3, r0
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	4403      	add	r3, r0
 800072e:	3b1e      	subs	r3, #30
 8000730:	409a      	lsls	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	430a      	orrs	r2, r1
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	e022      	b.n	8000782 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6919      	ldr	r1, [r3, #16]
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	b29b      	uxth	r3, r3
 8000748:	461a      	mov	r2, r3
 800074a:	4613      	mov	r3, r2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4413      	add	r3, r2
 8000750:	2207      	movs	r2, #7
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	43da      	mvns	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	400a      	ands	r2, r1
 800075e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	6919      	ldr	r1, [r3, #16]
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	689a      	ldr	r2, [r3, #8]
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	b29b      	uxth	r3, r3
 8000770:	4618      	mov	r0, r3
 8000772:	4603      	mov	r3, r0
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4403      	add	r3, r0
 8000778:	409a      	lsls	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	430a      	orrs	r2, r1
 8000780:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	2b06      	cmp	r3, #6
 8000788:	d824      	bhi.n	80007d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	685a      	ldr	r2, [r3, #4]
 8000794:	4613      	mov	r3, r2
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4413      	add	r3, r2
 800079a:	3b05      	subs	r3, #5
 800079c:	221f      	movs	r2, #31
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	43da      	mvns	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	400a      	ands	r2, r1
 80007aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	4618      	mov	r0, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	4613      	mov	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	3b05      	subs	r3, #5
 80007c6:	fa00 f203 	lsl.w	r2, r0, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	430a      	orrs	r2, r1
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
 80007d2:	e04c      	b.n	800086e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	2b0c      	cmp	r3, #12
 80007da:	d824      	bhi.n	8000826 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	4613      	mov	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	3b23      	subs	r3, #35	; 0x23
 80007ee:	221f      	movs	r2, #31
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	43da      	mvns	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	400a      	ands	r2, r1
 80007fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	b29b      	uxth	r3, r3
 800080a:	4618      	mov	r0, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685a      	ldr	r2, [r3, #4]
 8000810:	4613      	mov	r3, r2
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	3b23      	subs	r3, #35	; 0x23
 8000818:	fa00 f203 	lsl.w	r2, r0, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	430a      	orrs	r2, r1
 8000822:	631a      	str	r2, [r3, #48]	; 0x30
 8000824:	e023      	b.n	800086e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	4613      	mov	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	4413      	add	r3, r2
 8000836:	3b41      	subs	r3, #65	; 0x41
 8000838:	221f      	movs	r2, #31
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43da      	mvns	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	400a      	ands	r2, r1
 8000846:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	b29b      	uxth	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685a      	ldr	r2, [r3, #4]
 800085a:	4613      	mov	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4413      	add	r3, r2
 8000860:	3b41      	subs	r3, #65	; 0x41
 8000862:	fa00 f203 	lsl.w	r2, r0, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	430a      	orrs	r2, r1
 800086c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800086e:	4b29      	ldr	r3, [pc, #164]	; (8000914 <HAL_ADC_ConfigChannel+0x250>)
 8000870:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a28      	ldr	r2, [pc, #160]	; (8000918 <HAL_ADC_ConfigChannel+0x254>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d10f      	bne.n	800089c <HAL_ADC_ConfigChannel+0x1d8>
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b12      	cmp	r3, #18
 8000882:	d10b      	bne.n	800089c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a1d      	ldr	r2, [pc, #116]	; (8000918 <HAL_ADC_ConfigChannel+0x254>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d12b      	bne.n	80008fe <HAL_ADC_ConfigChannel+0x23a>
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a1c      	ldr	r2, [pc, #112]	; (800091c <HAL_ADC_ConfigChannel+0x258>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d003      	beq.n	80008b8 <HAL_ADC_ConfigChannel+0x1f4>
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b11      	cmp	r3, #17
 80008b6:	d122      	bne.n	80008fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a11      	ldr	r2, [pc, #68]	; (800091c <HAL_ADC_ConfigChannel+0x258>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d111      	bne.n	80008fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <HAL_ADC_ConfigChannel+0x25c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a11      	ldr	r2, [pc, #68]	; (8000924 <HAL_ADC_ConfigChannel+0x260>)
 80008e0:	fba2 2303 	umull	r2, r3, r2, r3
 80008e4:	0c9a      	lsrs	r2, r3, #18
 80008e6:	4613      	mov	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	4413      	add	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80008f0:	e002      	b.n	80008f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	3b01      	subs	r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1f9      	bne.n	80008f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	40012300 	.word	0x40012300
 8000918:	40012000 	.word	0x40012000
 800091c:	10000012 	.word	0x10000012
 8000920:	2000000c 	.word	0x2000000c
 8000924:	431bde83 	.word	0x431bde83

08000928 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000930:	4b79      	ldr	r3, [pc, #484]	; (8000b18 <ADC_Init+0x1f0>)
 8000932:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	431a      	orrs	r2, r3
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	685a      	ldr	r2, [r3, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800095c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	6859      	ldr	r1, [r3, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	691b      	ldr	r3, [r3, #16]
 8000968:	021a      	lsls	r2, r3, #8
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	430a      	orrs	r2, r1
 8000970:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000980:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6859      	ldr	r1, [r3, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689a      	ldr	r2, [r3, #8]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	430a      	orrs	r2, r1
 8000992:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	689a      	ldr	r2, [r3, #8]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	6899      	ldr	r1, [r3, #8]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	68da      	ldr	r2, [r3, #12]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	430a      	orrs	r2, r1
 80009b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ba:	4a58      	ldr	r2, [pc, #352]	; (8000b1c <ADC_Init+0x1f4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d022      	beq.n	8000a06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	689a      	ldr	r2, [r3, #8]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80009ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	6899      	ldr	r1, [r3, #8]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	430a      	orrs	r2, r1
 80009e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80009f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6899      	ldr	r1, [r3, #8]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	430a      	orrs	r2, r1
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	e00f      	b.n	8000a26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	689a      	ldr	r2, [r3, #8]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	689a      	ldr	r2, [r3, #8]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	689a      	ldr	r2, [r3, #8]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f022 0202 	bic.w	r2, r2, #2
 8000a34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6899      	ldr	r1, [r3, #8]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	7e1b      	ldrb	r3, [r3, #24]
 8000a40:	005a      	lsls	r2, r3, #1
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	430a      	orrs	r2, r1
 8000a48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d01b      	beq.n	8000a8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	685a      	ldr	r2, [r3, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	685a      	ldr	r2, [r3, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000a72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6859      	ldr	r1, [r3, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	035a      	lsls	r2, r3, #13
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	430a      	orrs	r2, r1
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	e007      	b.n	8000a9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	051a      	lsls	r2, r3, #20
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	689a      	ldr	r2, [r3, #8]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ad0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	6899      	ldr	r1, [r3, #8]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ade:	025a      	lsls	r2, r3, #9
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000af6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6899      	ldr	r1, [r3, #8]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	029a      	lsls	r2, r3, #10
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	609a      	str	r2, [r3, #8]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	40012300 	.word	0x40012300
 8000b1c:	0f000001 	.word	0x0f000001

08000b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b52:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	60d3      	str	r3, [r2, #12]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <__NVIC_GetPriorityGrouping+0x18>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	f003 0307 	and.w	r3, r3, #7
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db0b      	blt.n	8000bae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 021f 	and.w	r2, r3, #31
 8000b9c:	4907      	ldr	r1, [pc, #28]	; (8000bbc <__NVIC_EnableIRQ+0x38>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	095b      	lsrs	r3, r3, #5
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8000baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db0a      	blt.n	8000bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	490c      	ldr	r1, [pc, #48]	; (8000c0c <__NVIC_SetPriority+0x4c>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	440b      	add	r3, r1
 8000be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be8:	e00a      	b.n	8000c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4908      	ldr	r1, [pc, #32]	; (8000c10 <__NVIC_SetPriority+0x50>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	0112      	lsls	r2, r2, #4
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	761a      	strb	r2, [r3, #24]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f1c3 0307 	rsb	r3, r3, #7
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	bf28      	it	cs
 8000c32:	2304      	movcs	r3, #4
 8000c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d902      	bls.n	8000c44 <NVIC_EncodePriority+0x30>
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3b03      	subs	r3, #3
 8000c42:	e000      	b.n	8000c46 <NVIC_EncodePriority+0x32>
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43da      	mvns	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43d9      	mvns	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	4313      	orrs	r3, r2
         );
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3724      	adds	r7, #36	; 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ff4c 	bl	8000b20 <__NVIC_SetPriorityGrouping>
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca2:	f7ff ff61 	bl	8000b68 <__NVIC_GetPriorityGrouping>
 8000ca6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	68b9      	ldr	r1, [r7, #8]
 8000cac:	6978      	ldr	r0, [r7, #20]
 8000cae:	f7ff ffb1 	bl	8000c14 <NVIC_EncodePriority>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ff80 	bl	8000bc0 <__NVIC_SetPriority>
}
 8000cc0:	bf00      	nop
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff54 	bl	8000b84 <__NVIC_EnableIRQ>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000cf0:	f7ff fc98 	bl	8000624 <HAL_GetTick>
 8000cf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d101      	bne.n	8000d00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e099      	b.n	8000e34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f022 0201 	bic.w	r2, r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d20:	e00f      	b.n	8000d42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d22:	f7ff fc7f 	bl	8000624 <HAL_GetTick>
 8000d26:	4602      	mov	r2, r0
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	2b05      	cmp	r3, #5
 8000d2e:	d908      	bls.n	8000d42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2220      	movs	r2, #32
 8000d34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2203      	movs	r2, #3
 8000d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e078      	b.n	8000e34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1e8      	bne.n	8000d22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <HAL_DMA_Init+0x158>)
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a1b      	ldr	r3, [r3, #32]
 8000d8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d107      	bne.n	8000dac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4313      	orrs	r3, r2
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	f023 0307 	bic.w	r3, r3, #7
 8000dc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	d117      	bne.n	8000e06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d00e      	beq.n	8000e06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 fb01 	bl	80013f0 <DMA_CheckFifoParam>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d008      	beq.n	8000e06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2240      	movs	r2, #64	; 0x40
 8000df8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e02:	2301      	movs	r3, #1
 8000e04:	e016      	b.n	8000e34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 fab8 	bl	8001384 <DMA_CalcBaseAndBitshift>
 8000e14:	4603      	mov	r3, r0
 8000e16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e1c:	223f      	movs	r2, #63	; 0x3f
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	f010803f 	.word	0xf010803f

08000e40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d101      	bne.n	8000e66 <HAL_DMA_Start_IT+0x26>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e040      	b.n	8000ee8 <HAL_DMA_Start_IT+0xa8>
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d12f      	bne.n	8000eda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2200      	movs	r2, #0
 8000e86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	f000 fa4a 	bl	8001328 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e98:	223f      	movs	r2, #63	; 0x3f
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 0216 	orr.w	r2, r2, #22
 8000eae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d007      	beq.n	8000ec8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0208 	orr.w	r2, r2, #8
 8000ec6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f042 0201 	orr.w	r2, r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	e005      	b.n	8000ee6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000efe:	f7ff fb91 	bl	8000624 <HAL_GetTick>
 8000f02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d008      	beq.n	8000f22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e052      	b.n	8000fc8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 0216 	bic.w	r2, r2, #22
 8000f30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	695a      	ldr	r2, [r3, #20]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d103      	bne.n	8000f52 <HAL_DMA_Abort+0x62>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d007      	beq.n	8000f62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0208 	bic.w	r2, r2, #8
 8000f60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 0201 	bic.w	r2, r2, #1
 8000f70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f72:	e013      	b.n	8000f9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f74:	f7ff fb56 	bl	8000624 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b05      	cmp	r3, #5
 8000f80:	d90c      	bls.n	8000f9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2220      	movs	r2, #32
 8000f86:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2203      	movs	r2, #3
 8000f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e015      	b.n	8000fc8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1e4      	bne.n	8000f74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fae:	223f      	movs	r2, #63	; 0x3f
 8000fb0:	409a      	lsls	r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d004      	beq.n	8000fee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00c      	b.n	8001008 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2205      	movs	r2, #5
 8000ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0201 	bic.w	r2, r2, #1
 8001004:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001020:	4b92      	ldr	r3, [pc, #584]	; (800126c <HAL_DMA_IRQHandler+0x258>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a92      	ldr	r2, [pc, #584]	; (8001270 <HAL_DMA_IRQHandler+0x25c>)
 8001026:	fba2 2303 	umull	r2, r3, r2, r3
 800102a:	0a9b      	lsrs	r3, r3, #10
 800102c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800103e:	2208      	movs	r2, #8
 8001040:	409a      	lsls	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4013      	ands	r3, r2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d01a      	beq.n	8001080 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	2b00      	cmp	r3, #0
 8001056:	d013      	beq.n	8001080 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0204 	bic.w	r2, r2, #4
 8001066:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800106c:	2208      	movs	r2, #8
 800106e:	409a      	lsls	r2, r3
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001078:	f043 0201 	orr.w	r2, r3, #1
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001084:	2201      	movs	r2, #1
 8001086:	409a      	lsls	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4013      	ands	r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d012      	beq.n	80010b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00b      	beq.n	80010b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a2:	2201      	movs	r2, #1
 80010a4:	409a      	lsls	r2, r3
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ae:	f043 0202 	orr.w	r2, r3, #2
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ba:	2204      	movs	r2, #4
 80010bc:	409a      	lsls	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4013      	ands	r3, r2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d012      	beq.n	80010ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00b      	beq.n	80010ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d8:	2204      	movs	r2, #4
 80010da:	409a      	lsls	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e4:	f043 0204 	orr.w	r2, r3, #4
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f0:	2210      	movs	r2, #16
 80010f2:	409a      	lsls	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d043      	beq.n	8001184 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	2b00      	cmp	r3, #0
 8001108:	d03c      	beq.n	8001184 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800110e:	2210      	movs	r2, #16
 8001110:	409a      	lsls	r2, r3
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d018      	beq.n	8001156 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d108      	bne.n	8001144 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	2b00      	cmp	r3, #0
 8001138:	d024      	beq.n	8001184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	4798      	blx	r3
 8001142:	e01f      	b.n	8001184 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001148:	2b00      	cmp	r3, #0
 800114a:	d01b      	beq.n	8001184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	4798      	blx	r3
 8001154:	e016      	b.n	8001184 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001160:	2b00      	cmp	r3, #0
 8001162:	d107      	bne.n	8001174 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0208 	bic.w	r2, r2, #8
 8001172:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001188:	2220      	movs	r2, #32
 800118a:	409a      	lsls	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4013      	ands	r3, r2
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 808e 	beq.w	80012b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 8086 	beq.w	80012b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011aa:	2220      	movs	r2, #32
 80011ac:	409a      	lsls	r2, r3
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b05      	cmp	r3, #5
 80011bc:	d136      	bne.n	800122c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0216 	bic.w	r2, r2, #22
 80011cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	695a      	ldr	r2, [r3, #20]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d103      	bne.n	80011ee <HAL_DMA_IRQHandler+0x1da>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d007      	beq.n	80011fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0208 	bic.w	r2, r2, #8
 80011fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001202:	223f      	movs	r2, #63	; 0x3f
 8001204:	409a      	lsls	r2, r3
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800121e:	2b00      	cmp	r3, #0
 8001220:	d07d      	beq.n	800131e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	4798      	blx	r3
        }
        return;
 800122a:	e078      	b.n	800131e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d01c      	beq.n	8001274 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d108      	bne.n	800125a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124c:	2b00      	cmp	r3, #0
 800124e:	d030      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	4798      	blx	r3
 8001258:	e02b      	b.n	80012b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800125e:	2b00      	cmp	r3, #0
 8001260:	d027      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	4798      	blx	r3
 800126a:	e022      	b.n	80012b2 <HAL_DMA_IRQHandler+0x29e>
 800126c:	2000000c 	.word	0x2000000c
 8001270:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10f      	bne.n	80012a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0210 	bic.w	r2, r2, #16
 8001290:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d032      	beq.n	8001320 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d022      	beq.n	800130c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2205      	movs	r2, #5
 80012ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0201 	bic.w	r2, r2, #1
 80012dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	3301      	adds	r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d307      	bcc.n	80012fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f2      	bne.n	80012de <HAL_DMA_IRQHandler+0x2ca>
 80012f8:	e000      	b.n	80012fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80012fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	4798      	blx	r3
 800131c:	e000      	b.n	8001320 <HAL_DMA_IRQHandler+0x30c>
        return;
 800131e:	bf00      	nop
    }
  }
}
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop

08001328 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
 8001334:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001344:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2b40      	cmp	r3, #64	; 0x40
 8001354:	d108      	bne.n	8001368 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001366:	e007      	b.n	8001378 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	60da      	str	r2, [r3, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	3b10      	subs	r3, #16
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <DMA_CalcBaseAndBitshift+0x64>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	091b      	lsrs	r3, r3, #4
 800139c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800139e:	4a13      	ldr	r2, [pc, #76]	; (80013ec <DMA_CalcBaseAndBitshift+0x68>)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d909      	bls.n	80013c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013ba:	f023 0303 	bic.w	r3, r3, #3
 80013be:	1d1a      	adds	r2, r3, #4
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	659a      	str	r2, [r3, #88]	; 0x58
 80013c4:	e007      	b.n	80013d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013ce:	f023 0303 	bic.w	r3, r3, #3
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	aaaaaaab 	.word	0xaaaaaaab
 80013ec:	08008680 	.word	0x08008680

080013f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001400:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d11f      	bne.n	800144a <DMA_CheckFifoParam+0x5a>
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	2b03      	cmp	r3, #3
 800140e:	d856      	bhi.n	80014be <DMA_CheckFifoParam+0xce>
 8001410:	a201      	add	r2, pc, #4	; (adr r2, 8001418 <DMA_CheckFifoParam+0x28>)
 8001412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001416:	bf00      	nop
 8001418:	08001429 	.word	0x08001429
 800141c:	0800143b 	.word	0x0800143b
 8001420:	08001429 	.word	0x08001429
 8001424:	080014bf 	.word	0x080014bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d046      	beq.n	80014c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001438:	e043      	b.n	80014c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001442:	d140      	bne.n	80014c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001448:	e03d      	b.n	80014c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001452:	d121      	bne.n	8001498 <DMA_CheckFifoParam+0xa8>
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d837      	bhi.n	80014ca <DMA_CheckFifoParam+0xda>
 800145a:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <DMA_CheckFifoParam+0x70>)
 800145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001460:	08001471 	.word	0x08001471
 8001464:	08001477 	.word	0x08001477
 8001468:	08001471 	.word	0x08001471
 800146c:	08001489 	.word	0x08001489
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
      break;
 8001474:	e030      	b.n	80014d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d025      	beq.n	80014ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001486:	e022      	b.n	80014ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001490:	d11f      	bne.n	80014d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001496:	e01c      	b.n	80014d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d903      	bls.n	80014a6 <DMA_CheckFifoParam+0xb6>
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d003      	beq.n	80014ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014a4:	e018      	b.n	80014d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	73fb      	strb	r3, [r7, #15]
      break;
 80014aa:	e015      	b.n	80014d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00e      	beq.n	80014d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
      break;
 80014bc:	e00b      	b.n	80014d6 <DMA_CheckFifoParam+0xe6>
      break;
 80014be:	bf00      	nop
 80014c0:	e00a      	b.n	80014d8 <DMA_CheckFifoParam+0xe8>
      break;
 80014c2:	bf00      	nop
 80014c4:	e008      	b.n	80014d8 <DMA_CheckFifoParam+0xe8>
      break;
 80014c6:	bf00      	nop
 80014c8:	e006      	b.n	80014d8 <DMA_CheckFifoParam+0xe8>
      break;
 80014ca:	bf00      	nop
 80014cc:	e004      	b.n	80014d8 <DMA_CheckFifoParam+0xe8>
      break;
 80014ce:	bf00      	nop
 80014d0:	e002      	b.n	80014d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80014d2:	bf00      	nop
 80014d4:	e000      	b.n	80014d8 <DMA_CheckFifoParam+0xe8>
      break;
 80014d6:	bf00      	nop
    }
  } 
  
  return status; 
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop

080014e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	e165      	b.n	80017d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001504:	2201      	movs	r2, #1
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	429a      	cmp	r2, r3
 800151e:	f040 8154 	bne.w	80017ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b01      	cmp	r3, #1
 800152c:	d005      	beq.n	800153a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001536:	2b02      	cmp	r3, #2
 8001538:	d130      	bne.n	800159c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	2203      	movs	r2, #3
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001570:	2201      	movs	r2, #1
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	091b      	lsrs	r3, r3, #4
 8001586:	f003 0201 	and.w	r2, r3, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d017      	beq.n	80015d8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2203      	movs	r2, #3
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d123      	bne.n	800162c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	08da      	lsrs	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3208      	adds	r2, #8
 80015ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	220f      	movs	r2, #15
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	08da      	lsrs	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3208      	adds	r2, #8
 8001626:	69b9      	ldr	r1, [r7, #24]
 8001628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0203 	and.w	r2, r3, #3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80ae 	beq.w	80017ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b5d      	ldr	r3, [pc, #372]	; (80017e8 <HAL_GPIO_Init+0x300>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	4a5c      	ldr	r2, [pc, #368]	; (80017e8 <HAL_GPIO_Init+0x300>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167c:	6453      	str	r3, [r2, #68]	; 0x44
 800167e:	4b5a      	ldr	r3, [pc, #360]	; (80017e8 <HAL_GPIO_Init+0x300>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800168a:	4a58      	ldr	r2, [pc, #352]	; (80017ec <HAL_GPIO_Init+0x304>)
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3302      	adds	r3, #2
 8001692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	220f      	movs	r2, #15
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4f      	ldr	r2, [pc, #316]	; (80017f0 <HAL_GPIO_Init+0x308>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d025      	beq.n	8001702 <HAL_GPIO_Init+0x21a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4e      	ldr	r2, [pc, #312]	; (80017f4 <HAL_GPIO_Init+0x30c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01f      	beq.n	80016fe <HAL_GPIO_Init+0x216>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4d      	ldr	r2, [pc, #308]	; (80017f8 <HAL_GPIO_Init+0x310>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d019      	beq.n	80016fa <HAL_GPIO_Init+0x212>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4c      	ldr	r2, [pc, #304]	; (80017fc <HAL_GPIO_Init+0x314>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0x20e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4b      	ldr	r2, [pc, #300]	; (8001800 <HAL_GPIO_Init+0x318>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00d      	beq.n	80016f2 <HAL_GPIO_Init+0x20a>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4a      	ldr	r2, [pc, #296]	; (8001804 <HAL_GPIO_Init+0x31c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <HAL_GPIO_Init+0x206>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a49      	ldr	r2, [pc, #292]	; (8001808 <HAL_GPIO_Init+0x320>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_GPIO_Init+0x202>
 80016e6:	2306      	movs	r3, #6
 80016e8:	e00c      	b.n	8001704 <HAL_GPIO_Init+0x21c>
 80016ea:	2307      	movs	r3, #7
 80016ec:	e00a      	b.n	8001704 <HAL_GPIO_Init+0x21c>
 80016ee:	2305      	movs	r3, #5
 80016f0:	e008      	b.n	8001704 <HAL_GPIO_Init+0x21c>
 80016f2:	2304      	movs	r3, #4
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x21c>
 80016f6:	2303      	movs	r3, #3
 80016f8:	e004      	b.n	8001704 <HAL_GPIO_Init+0x21c>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e002      	b.n	8001704 <HAL_GPIO_Init+0x21c>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <HAL_GPIO_Init+0x21c>
 8001702:	2300      	movs	r3, #0
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	f002 0203 	and.w	r2, r2, #3
 800170a:	0092      	lsls	r2, r2, #2
 800170c:	4093      	lsls	r3, r2
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001714:	4935      	ldr	r1, [pc, #212]	; (80017ec <HAL_GPIO_Init+0x304>)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	3302      	adds	r3, #2
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001722:	4b3a      	ldr	r3, [pc, #232]	; (800180c <HAL_GPIO_Init+0x324>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001746:	4a31      	ldr	r2, [pc, #196]	; (800180c <HAL_GPIO_Init+0x324>)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800174c:	4b2f      	ldr	r3, [pc, #188]	; (800180c <HAL_GPIO_Init+0x324>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001770:	4a26      	ldr	r2, [pc, #152]	; (800180c <HAL_GPIO_Init+0x324>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001776:	4b25      	ldr	r3, [pc, #148]	; (800180c <HAL_GPIO_Init+0x324>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800179a:	4a1c      	ldr	r2, [pc, #112]	; (800180c <HAL_GPIO_Init+0x324>)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <HAL_GPIO_Init+0x324>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017c4:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_GPIO_Init+0x324>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3301      	adds	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	2b0f      	cmp	r3, #15
 80017d4:	f67f ae96 	bls.w	8001504 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40013800 	.word	0x40013800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	40020400 	.word	0x40020400
 80017f8:	40020800 	.word	0x40020800
 80017fc:	40020c00 	.word	0x40020c00
 8001800:	40021000 	.word	0x40021000
 8001804:	40021400 	.word	0x40021400
 8001808:	40021800 	.word	0x40021800
 800180c:	40013c00 	.word	0x40013c00

08001810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
 800181c:	4613      	mov	r3, r2
 800181e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001820:	787b      	ldrb	r3, [r7, #1]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800182c:	e003      	b.n	8001836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800182e:	887b      	ldrh	r3, [r7, #2]
 8001830:	041a      	lsls	r2, r3, #16
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	619a      	str	r2, [r3, #24]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001850:	695a      	ldr	r2, [r3, #20]
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	4013      	ands	r3, r2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d006      	beq.n	8001868 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800185c:	88fb      	ldrh	r3, [r7, #6]
 800185e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	4618      	mov	r0, r3
 8001864:	f005 fe9e 	bl	80075a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40013c00 	.word	0x40013c00

08001874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0cc      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001888:	4b68      	ldr	r3, [pc, #416]	; (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d90c      	bls.n	80018b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b65      	ldr	r3, [pc, #404]	; (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b63      	ldr	r3, [pc, #396]	; (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0b8      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d020      	beq.n	80018fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c8:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4a58      	ldr	r2, [pc, #352]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e0:	4b53      	ldr	r3, [pc, #332]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4a52      	ldr	r2, [pc, #328]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ec:	4b50      	ldr	r3, [pc, #320]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	494d      	ldr	r1, [pc, #308]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d044      	beq.n	8001994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	4b47      	ldr	r3, [pc, #284]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d119      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e07f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d003      	beq.n	8001932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800192e:	2b03      	cmp	r3, #3
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001932:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d109      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e06f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e067      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001952:	4b37      	ldr	r3, [pc, #220]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f023 0203 	bic.w	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4934      	ldr	r1, [pc, #208]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	4313      	orrs	r3, r2
 8001962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001964:	f7fe fe5e 	bl	8000624 <HAL_GetTick>
 8001968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196a:	e00a      	b.n	8001982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196c:	f7fe fe5a 	bl	8000624 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	f241 3288 	movw	r2, #5000	; 0x1388
 800197a:	4293      	cmp	r3, r2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e04f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 020c 	and.w	r2, r3, #12
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	429a      	cmp	r2, r3
 8001992:	d1eb      	bne.n	800196c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001994:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d20c      	bcs.n	80019bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e032      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c8:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4916      	ldr	r1, [pc, #88]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e6:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	490e      	ldr	r1, [pc, #56]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019fa:	f000 f887 	bl	8001b0c <HAL_RCC_GetSysClockFreq>
 80019fe:	4602      	mov	r2, r0
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	490a      	ldr	r1, [pc, #40]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	5ccb      	ldrb	r3, [r1, r3]
 8001a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a12:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_RCC_ClockConfig+0x1c8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f006 f818 	bl	8007a50 <HAL_InitTick>

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023c00 	.word	0x40023c00
 8001a30:	40023800 	.word	0x40023800
 8001a34:	08008688 	.word	0x08008688
 8001a38:	2000000c 	.word	0x2000000c
 8001a3c:	20000000 	.word	0x20000000

08001a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	2000000c 	.word	0x2000000c

08001a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a5c:	f7ff fff0 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a60:	4602      	mov	r2, r0
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	0a9b      	lsrs	r3, r3, #10
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	4903      	ldr	r1, [pc, #12]	; (8001a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a6e:	5ccb      	ldrb	r3, [r1, r3]
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	08008698 	.word	0x08008698

08001a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a84:	f7ff ffdc 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	0b5b      	lsrs	r3, r3, #13
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	4903      	ldr	r1, [pc, #12]	; (8001aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a96:	5ccb      	ldrb	r3, [r1, r3]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	08008698 	.word	0x08008698

08001aa8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_RCC_GetClockConfig+0x5c>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 0203 	and.w	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_RCC_GetClockConfig+0x5c>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_RCC_GetClockConfig+0x5c>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_GetClockConfig+0x5c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	08db      	lsrs	r3, r3, #3
 8001ae2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <HAL_RCC_GetClockConfig+0x60>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 020f 	and.w	r2, r3, #15
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	601a      	str	r2, [r3, #0]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40023c00 	.word	0x40023c00

08001b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b10:	b088      	sub	sp, #32
 8001b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b28:	4bce      	ldr	r3, [pc, #824]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	f200 818d 	bhi.w	8001e50 <HAL_RCC_GetSysClockFreq+0x344>
 8001b36:	a201      	add	r2, pc, #4	; (adr r2, 8001b3c <HAL_RCC_GetSysClockFreq+0x30>)
 8001b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3c:	08001b71 	.word	0x08001b71
 8001b40:	08001e51 	.word	0x08001e51
 8001b44:	08001e51 	.word	0x08001e51
 8001b48:	08001e51 	.word	0x08001e51
 8001b4c:	08001b77 	.word	0x08001b77
 8001b50:	08001e51 	.word	0x08001e51
 8001b54:	08001e51 	.word	0x08001e51
 8001b58:	08001e51 	.word	0x08001e51
 8001b5c:	08001b7d 	.word	0x08001b7d
 8001b60:	08001e51 	.word	0x08001e51
 8001b64:	08001e51 	.word	0x08001e51
 8001b68:	08001e51 	.word	0x08001e51
 8001b6c:	08001cf1 	.word	0x08001cf1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b70:	4bbd      	ldr	r3, [pc, #756]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b72:	61bb      	str	r3, [r7, #24]
       break;
 8001b74:	e16f      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b76:	4bbd      	ldr	r3, [pc, #756]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x360>)
 8001b78:	61bb      	str	r3, [r7, #24]
      break;
 8001b7a:	e16c      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b7c:	4bb9      	ldr	r3, [pc, #740]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b84:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b86:	4bb7      	ldr	r3, [pc, #732]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d053      	beq.n	8001c3a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b92:	4bb4      	ldr	r3, [pc, #720]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	099b      	lsrs	r3, r3, #6
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ba2:	f04f 0100 	mov.w	r1, #0
 8001ba6:	ea02 0400 	and.w	r4, r2, r0
 8001baa:	603c      	str	r4, [r7, #0]
 8001bac:	400b      	ands	r3, r1
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	014b      	lsls	r3, r1, #5
 8001bc2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bc6:	0142      	lsls	r2, r0, #5
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4623      	mov	r3, r4
 8001bce:	1ac0      	subs	r0, r0, r3
 8001bd0:	462b      	mov	r3, r5
 8001bd2:	eb61 0103 	sbc.w	r1, r1, r3
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	018b      	lsls	r3, r1, #6
 8001be0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001be4:	0182      	lsls	r2, r0, #6
 8001be6:	1a12      	subs	r2, r2, r0
 8001be8:	eb63 0301 	sbc.w	r3, r3, r1
 8001bec:	f04f 0000 	mov.w	r0, #0
 8001bf0:	f04f 0100 	mov.w	r1, #0
 8001bf4:	00d9      	lsls	r1, r3, #3
 8001bf6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bfa:	00d0      	lsls	r0, r2, #3
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4621      	mov	r1, r4
 8001c02:	1852      	adds	r2, r2, r1
 8001c04:	4629      	mov	r1, r5
 8001c06:	eb43 0101 	adc.w	r1, r3, r1
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	f04f 0000 	mov.w	r0, #0
 8001c10:	f04f 0100 	mov.w	r1, #0
 8001c14:	0259      	lsls	r1, r3, #9
 8001c16:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c1a:	0250      	lsls	r0, r2, #9
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	461a      	mov	r2, r3
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	f7fe fb48 	bl	80002c0 <__aeabi_uldivmod>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4613      	mov	r3, r2
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	e04c      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3a:	4b8a      	ldr	r3, [pc, #552]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	099b      	lsrs	r3, r3, #6
 8001c40:	461a      	mov	r2, r3
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c4a:	f04f 0100 	mov.w	r1, #0
 8001c4e:	ea02 0a00 	and.w	sl, r2, r0
 8001c52:	ea03 0b01 	and.w	fp, r3, r1
 8001c56:	4650      	mov	r0, sl
 8001c58:	4659      	mov	r1, fp
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	014b      	lsls	r3, r1, #5
 8001c64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c68:	0142      	lsls	r2, r0, #5
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	ebb0 000a 	subs.w	r0, r0, sl
 8001c72:	eb61 010b 	sbc.w	r1, r1, fp
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	018b      	lsls	r3, r1, #6
 8001c80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c84:	0182      	lsls	r2, r0, #6
 8001c86:	1a12      	subs	r2, r2, r0
 8001c88:	eb63 0301 	sbc.w	r3, r3, r1
 8001c8c:	f04f 0000 	mov.w	r0, #0
 8001c90:	f04f 0100 	mov.w	r1, #0
 8001c94:	00d9      	lsls	r1, r3, #3
 8001c96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c9a:	00d0      	lsls	r0, r2, #3
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	eb12 020a 	adds.w	r2, r2, sl
 8001ca4:	eb43 030b 	adc.w	r3, r3, fp
 8001ca8:	f04f 0000 	mov.w	r0, #0
 8001cac:	f04f 0100 	mov.w	r1, #0
 8001cb0:	0299      	lsls	r1, r3, #10
 8001cb2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001cb6:	0290      	lsls	r0, r2, #10
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	f7fe fafa 	bl	80002c0 <__aeabi_uldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cd4:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x358>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	61bb      	str	r3, [r7, #24]
      break;
 8001cee:	e0b2      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf0:	4b5c      	ldr	r3, [pc, #368]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x358>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cf8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cfa:	4b5a      	ldr	r3, [pc, #360]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x358>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d04d      	beq.n	8001da2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d06:	4b57      	ldr	r3, [pc, #348]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	099b      	lsrs	r3, r3, #6
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d16:	f04f 0100 	mov.w	r1, #0
 8001d1a:	ea02 0800 	and.w	r8, r2, r0
 8001d1e:	ea03 0901 	and.w	r9, r3, r1
 8001d22:	4640      	mov	r0, r8
 8001d24:	4649      	mov	r1, r9
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	014b      	lsls	r3, r1, #5
 8001d30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d34:	0142      	lsls	r2, r0, #5
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	ebb0 0008 	subs.w	r0, r0, r8
 8001d3e:	eb61 0109 	sbc.w	r1, r1, r9
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	018b      	lsls	r3, r1, #6
 8001d4c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d50:	0182      	lsls	r2, r0, #6
 8001d52:	1a12      	subs	r2, r2, r0
 8001d54:	eb63 0301 	sbc.w	r3, r3, r1
 8001d58:	f04f 0000 	mov.w	r0, #0
 8001d5c:	f04f 0100 	mov.w	r1, #0
 8001d60:	00d9      	lsls	r1, r3, #3
 8001d62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d66:	00d0      	lsls	r0, r2, #3
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	eb12 0208 	adds.w	r2, r2, r8
 8001d70:	eb43 0309 	adc.w	r3, r3, r9
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	0259      	lsls	r1, r3, #9
 8001d7e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d82:	0250      	lsls	r0, r2, #9
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	f7fe fa94 	bl	80002c0 <__aeabi_uldivmod>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	e04a      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da2:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x358>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	099b      	lsrs	r3, r3, #6
 8001da8:	461a      	mov	r2, r3
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001db2:	f04f 0100 	mov.w	r1, #0
 8001db6:	ea02 0400 	and.w	r4, r2, r0
 8001dba:	ea03 0501 	and.w	r5, r3, r1
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	4629      	mov	r1, r5
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	014b      	lsls	r3, r1, #5
 8001dcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dd0:	0142      	lsls	r2, r0, #5
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	1b00      	subs	r0, r0, r4
 8001dd8:	eb61 0105 	sbc.w	r1, r1, r5
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	018b      	lsls	r3, r1, #6
 8001de6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dea:	0182      	lsls	r2, r0, #6
 8001dec:	1a12      	subs	r2, r2, r0
 8001dee:	eb63 0301 	sbc.w	r3, r3, r1
 8001df2:	f04f 0000 	mov.w	r0, #0
 8001df6:	f04f 0100 	mov.w	r1, #0
 8001dfa:	00d9      	lsls	r1, r3, #3
 8001dfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e00:	00d0      	lsls	r0, r2, #3
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	1912      	adds	r2, r2, r4
 8001e08:	eb45 0303 	adc.w	r3, r5, r3
 8001e0c:	f04f 0000 	mov.w	r0, #0
 8001e10:	f04f 0100 	mov.w	r1, #0
 8001e14:	0299      	lsls	r1, r3, #10
 8001e16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e1a:	0290      	lsls	r0, r2, #10
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	461a      	mov	r2, r3
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	f7fe fa48 	bl	80002c0 <__aeabi_uldivmod>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4613      	mov	r3, r2
 8001e36:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	0f1b      	lsrs	r3, r3, #28
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001e44:	69fa      	ldr	r2, [r7, #28]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	61bb      	str	r3, [r7, #24]
      break;
 8001e4e:	e002      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e52:	61bb      	str	r3, [r7, #24]
      break;
 8001e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e56:	69bb      	ldr	r3, [r7, #24]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3720      	adds	r7, #32
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	00f42400 	.word	0x00f42400
 8001e6c:	007a1200 	.word	0x007a1200

08001e70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e28d      	b.n	800239e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8083 	beq.w	8001f96 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e90:	4b94      	ldr	r3, [pc, #592]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 030c 	and.w	r3, r3, #12
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d019      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e9c:	4b91      	ldr	r3, [pc, #580]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ea8:	4b8e      	ldr	r3, [pc, #568]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb4:	d00c      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb6:	4b8b      	ldr	r3, [pc, #556]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ebe:	2b0c      	cmp	r3, #12
 8001ec0:	d112      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec2:	4b88      	ldr	r3, [pc, #544]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ece:	d10b      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed0:	4b84      	ldr	r3, [pc, #528]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d05b      	beq.n	8001f94 <HAL_RCC_OscConfig+0x124>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d157      	bne.n	8001f94 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e25a      	b.n	800239e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef0:	d106      	bne.n	8001f00 <HAL_RCC_OscConfig+0x90>
 8001ef2:	4b7c      	ldr	r3, [pc, #496]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a7b      	ldr	r2, [pc, #492]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e01d      	b.n	8001f3c <HAL_RCC_OscConfig+0xcc>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0xb4>
 8001f0a:	4b76      	ldr	r3, [pc, #472]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a75      	ldr	r2, [pc, #468]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	4b73      	ldr	r3, [pc, #460]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a72      	ldr	r2, [pc, #456]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e00b      	b.n	8001f3c <HAL_RCC_OscConfig+0xcc>
 8001f24:	4b6f      	ldr	r3, [pc, #444]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a6e      	ldr	r2, [pc, #440]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	4b6c      	ldr	r3, [pc, #432]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a6b      	ldr	r2, [pc, #428]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d013      	beq.n	8001f6c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7fe fb6e 	bl	8000624 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7fe fb6a 	bl	8000624 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	; 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e21f      	b.n	800239e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	4b61      	ldr	r3, [pc, #388]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0xdc>
 8001f6a:	e014      	b.n	8001f96 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7fe fb5a 	bl	8000624 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f74:	f7fe fb56 	bl	8000624 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	; 0x64
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e20b      	b.n	800239e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f86:	4b57      	ldr	r3, [pc, #348]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x104>
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d06f      	beq.n	8002082 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fa2:	4b50      	ldr	r3, [pc, #320]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d017      	beq.n	8001fde <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fae:	4b4d      	ldr	r3, [pc, #308]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d105      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fba:	4b4a      	ldr	r3, [pc, #296]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc6:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d11c      	bne.n	800200c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd2:	4b44      	ldr	r3, [pc, #272]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d116      	bne.n	800200c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	4b41      	ldr	r3, [pc, #260]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x186>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e1d3      	b.n	800239e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff6:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4937      	ldr	r1, [pc, #220]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	e03a      	b.n	8002082 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d020      	beq.n	8002056 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002014:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <HAL_RCC_OscConfig+0x278>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7fe fb03 	bl	8000624 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002022:	f7fe faff 	bl	8000624 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e1b4      	b.n	800239e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4925      	ldr	r1, [pc, #148]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
 8002054:	e015      	b.n	8002082 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002056:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <HAL_RCC_OscConfig+0x278>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7fe fae2 	bl	8000624 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002064:	f7fe fade 	bl	8000624 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e193      	b.n	800239e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d036      	beq.n	80020fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d016      	beq.n	80020c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <HAL_RCC_OscConfig+0x27c>)
 8002098:	2201      	movs	r2, #1
 800209a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7fe fac2 	bl	8000624 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a4:	f7fe fabe 	bl	8000624 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e173      	b.n	800239e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 80020b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x234>
 80020c2:	e01b      	b.n	80020fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_RCC_OscConfig+0x27c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ca:	f7fe faab 	bl	8000624 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d0:	e00e      	b.n	80020f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d2:	f7fe faa7 	bl	8000624 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d907      	bls.n	80020f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e15c      	b.n	800239e <HAL_RCC_OscConfig+0x52e>
 80020e4:	40023800 	.word	0x40023800
 80020e8:	42470000 	.word	0x42470000
 80020ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f0:	4b8a      	ldr	r3, [pc, #552]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 80020f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1ea      	bne.n	80020d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 8097 	beq.w	8002238 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210e:	4b83      	ldr	r3, [pc, #524]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10f      	bne.n	800213a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	4b7f      	ldr	r3, [pc, #508]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a7e      	ldr	r2, [pc, #504]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b7c      	ldr	r3, [pc, #496]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002136:	2301      	movs	r3, #1
 8002138:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213a:	4b79      	ldr	r3, [pc, #484]	; (8002320 <HAL_RCC_OscConfig+0x4b0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d118      	bne.n	8002178 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002146:	4b76      	ldr	r3, [pc, #472]	; (8002320 <HAL_RCC_OscConfig+0x4b0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a75      	ldr	r2, [pc, #468]	; (8002320 <HAL_RCC_OscConfig+0x4b0>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002152:	f7fe fa67 	bl	8000624 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215a:	f7fe fa63 	bl	8000624 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e118      	b.n	800239e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216c:	4b6c      	ldr	r3, [pc, #432]	; (8002320 <HAL_RCC_OscConfig+0x4b0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x31e>
 8002180:	4b66      	ldr	r3, [pc, #408]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002184:	4a65      	ldr	r2, [pc, #404]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6713      	str	r3, [r2, #112]	; 0x70
 800218c:	e01c      	b.n	80021c8 <HAL_RCC_OscConfig+0x358>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b05      	cmp	r3, #5
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x340>
 8002196:	4b61      	ldr	r3, [pc, #388]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	4a60      	ldr	r2, [pc, #384]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	6713      	str	r3, [r2, #112]	; 0x70
 80021a2:	4b5e      	ldr	r3, [pc, #376]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	4a5d      	ldr	r2, [pc, #372]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6713      	str	r3, [r2, #112]	; 0x70
 80021ae:	e00b      	b.n	80021c8 <HAL_RCC_OscConfig+0x358>
 80021b0:	4b5a      	ldr	r3, [pc, #360]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b4:	4a59      	ldr	r2, [pc, #356]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 80021b6:	f023 0301 	bic.w	r3, r3, #1
 80021ba:	6713      	str	r3, [r2, #112]	; 0x70
 80021bc:	4b57      	ldr	r3, [pc, #348]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 80021be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c0:	4a56      	ldr	r2, [pc, #344]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 80021c2:	f023 0304 	bic.w	r3, r3, #4
 80021c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d015      	beq.n	80021fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d0:	f7fe fa28 	bl	8000624 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d8:	f7fe fa24 	bl	8000624 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e0d7      	b.n	800239e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ee:	4b4b      	ldr	r3, [pc, #300]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0ee      	beq.n	80021d8 <HAL_RCC_OscConfig+0x368>
 80021fa:	e014      	b.n	8002226 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fc:	f7fe fa12 	bl	8000624 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002202:	e00a      	b.n	800221a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002204:	f7fe fa0e 	bl	8000624 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e0c1      	b.n	800239e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221a:	4b40      	ldr	r3, [pc, #256]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1ee      	bne.n	8002204 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002226:	7dfb      	ldrb	r3, [r7, #23]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d105      	bne.n	8002238 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222c:	4b3b      	ldr	r3, [pc, #236]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	4a3a      	ldr	r2, [pc, #232]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 8002232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002236:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80ad 	beq.w	800239c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002242:	4b36      	ldr	r3, [pc, #216]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b08      	cmp	r3, #8
 800224c:	d060      	beq.n	8002310 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d145      	bne.n	80022e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002256:	4b33      	ldr	r3, [pc, #204]	; (8002324 <HAL_RCC_OscConfig+0x4b4>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7fe f9e2 	bl	8000624 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002264:	f7fe f9de 	bl	8000624 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e093      	b.n	800239e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002276:	4b29      	ldr	r3, [pc, #164]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69da      	ldr	r2, [r3, #28]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	019b      	lsls	r3, r3, #6
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	085b      	lsrs	r3, r3, #1
 800229a:	3b01      	subs	r3, #1
 800229c:	041b      	lsls	r3, r3, #16
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	061b      	lsls	r3, r3, #24
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	071b      	lsls	r3, r3, #28
 80022ae:	491b      	ldr	r1, [pc, #108]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <HAL_RCC_OscConfig+0x4b4>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ba:	f7fe f9b3 	bl	8000624 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c2:	f7fe f9af 	bl	8000624 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e064      	b.n	800239e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x452>
 80022e0:	e05c      	b.n	800239c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_RCC_OscConfig+0x4b4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe f99c 	bl	8000624 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe f998 	bl	8000624 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e04d      	b.n	800239e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_RCC_OscConfig+0x4ac>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x480>
 800230e:	e045      	b.n	800239c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d107      	bne.n	8002328 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e040      	b.n	800239e <HAL_RCC_OscConfig+0x52e>
 800231c:	40023800 	.word	0x40023800
 8002320:	40007000 	.word	0x40007000
 8002324:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002328:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <HAL_RCC_OscConfig+0x538>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d030      	beq.n	8002398 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002340:	429a      	cmp	r2, r3
 8002342:	d129      	bne.n	8002398 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234e:	429a      	cmp	r2, r3
 8002350:	d122      	bne.n	8002398 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002358:	4013      	ands	r3, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800235e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002360:	4293      	cmp	r3, r2
 8002362:	d119      	bne.n	8002398 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	085b      	lsrs	r3, r3, #1
 8002370:	3b01      	subs	r3, #1
 8002372:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d10f      	bne.n	8002398 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002384:	429a      	cmp	r2, r3
 8002386:	d107      	bne.n	8002398 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800

080023ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e041      	b.n	8002442 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f005 fa24 	bl	8007820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3304      	adds	r3, #4
 80023e8:	4619      	mov	r1, r3
 80023ea:	4610      	mov	r0, r2
 80023ec:	f000 fb44 	bl	8002a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d001      	beq.n	8002464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e04e      	b.n	8002502 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a23      	ldr	r2, [pc, #140]	; (8002510 <HAL_TIM_Base_Start_IT+0xc4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d022      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x80>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248e:	d01d      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x80>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a1f      	ldr	r2, [pc, #124]	; (8002514 <HAL_TIM_Base_Start_IT+0xc8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d018      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x80>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a1e      	ldr	r2, [pc, #120]	; (8002518 <HAL_TIM_Base_Start_IT+0xcc>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d013      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x80>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1c      	ldr	r2, [pc, #112]	; (800251c <HAL_TIM_Base_Start_IT+0xd0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00e      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x80>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1b      	ldr	r2, [pc, #108]	; (8002520 <HAL_TIM_Base_Start_IT+0xd4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d009      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x80>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a19      	ldr	r2, [pc, #100]	; (8002524 <HAL_TIM_Base_Start_IT+0xd8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d004      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x80>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a18      	ldr	r2, [pc, #96]	; (8002528 <HAL_TIM_Base_Start_IT+0xdc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d111      	bne.n	80024f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d010      	beq.n	8002500 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0201 	orr.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ee:	e007      	b.n	8002500 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40010000 	.word	0x40010000
 8002514:	40000400 	.word	0x40000400
 8002518:	40000800 	.word	0x40000800
 800251c:	40000c00 	.word	0x40000c00
 8002520:	40010400 	.word	0x40010400
 8002524:	40014000 	.word	0x40014000
 8002528:	40001800 	.word	0x40001800

0800252c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e041      	b.n	80025c2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f839 	bl	80025ca <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3304      	adds	r3, #4
 8002568:	4619      	mov	r1, r3
 800256a:	4610      	mov	r0, r2
 800256c:	f000 fa84 	bl	8002a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d122      	bne.n	800263a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d11b      	bne.n	800263a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f06f 0202 	mvn.w	r2, #2
 800260a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fa0b 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
 8002626:	e005      	b.n	8002634 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f9fd 	bl	8002a28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fa0e 	bl	8002a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b04      	cmp	r3, #4
 8002646:	d122      	bne.n	800268e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b04      	cmp	r3, #4
 8002654:	d11b      	bne.n	800268e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f06f 0204 	mvn.w	r2, #4
 800265e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f9e1 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
 800267a:	e005      	b.n	8002688 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f9d3 	bl	8002a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f9e4 	bl	8002a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b08      	cmp	r3, #8
 800269a:	d122      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d11b      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f06f 0208 	mvn.w	r2, #8
 80026b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2204      	movs	r2, #4
 80026b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f9b7 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
 80026ce:	e005      	b.n	80026dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f9a9 	bl	8002a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f9ba 	bl	8002a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d122      	bne.n	8002736 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d11b      	bne.n	8002736 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f06f 0210 	mvn.w	r2, #16
 8002706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2208      	movs	r2, #8
 800270c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f98d 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
 8002722:	e005      	b.n	8002730 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f97f 	bl	8002a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f990 	bl	8002a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d10e      	bne.n	8002762 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b01      	cmp	r3, #1
 8002750:	d107      	bne.n	8002762 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f06f 0201 	mvn.w	r2, #1
 800275a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f004 ffe3 	bl	8007728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276c:	2b80      	cmp	r3, #128	; 0x80
 800276e:	d10e      	bne.n	800278e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277a:	2b80      	cmp	r3, #128	; 0x80
 800277c:	d107      	bne.n	800278e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 fce5 	bl	8003158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002798:	2b40      	cmp	r3, #64	; 0x40
 800279a:	d10e      	bne.n	80027ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a6:	2b40      	cmp	r3, #64	; 0x40
 80027a8:	d107      	bne.n	80027ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f955 	bl	8002a64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d10e      	bne.n	80027e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	d107      	bne.n	80027e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f06f 0220 	mvn.w	r2, #32
 80027de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 fcaf 	bl	8003144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_TIM_OC_ConfigChannel+0x1a>
 8002806:	2302      	movs	r3, #2
 8002808:	e046      	b.n	8002898 <HAL_TIM_OC_ConfigChannel+0xa8>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b0c      	cmp	r3, #12
 8002816:	d839      	bhi.n	800288c <HAL_TIM_OC_ConfigChannel+0x9c>
 8002818:	a201      	add	r2, pc, #4	; (adr r2, 8002820 <HAL_TIM_OC_ConfigChannel+0x30>)
 800281a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281e:	bf00      	nop
 8002820:	08002855 	.word	0x08002855
 8002824:	0800288d 	.word	0x0800288d
 8002828:	0800288d 	.word	0x0800288d
 800282c:	0800288d 	.word	0x0800288d
 8002830:	08002863 	.word	0x08002863
 8002834:	0800288d 	.word	0x0800288d
 8002838:	0800288d 	.word	0x0800288d
 800283c:	0800288d 	.word	0x0800288d
 8002840:	08002871 	.word	0x08002871
 8002844:	0800288d 	.word	0x0800288d
 8002848:	0800288d 	.word	0x0800288d
 800284c:	0800288d 	.word	0x0800288d
 8002850:	0800287f 	.word	0x0800287f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f9ac 	bl	8002bb8 <TIM_OC1_SetConfig>
      break;
 8002860:	e015      	b.n	800288e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68b9      	ldr	r1, [r7, #8]
 8002868:	4618      	mov	r0, r3
 800286a:	f000 fa15 	bl	8002c98 <TIM_OC2_SetConfig>
      break;
 800286e:	e00e      	b.n	800288e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fa84 	bl	8002d84 <TIM_OC3_SetConfig>
      break;
 800287c:	e007      	b.n	800288e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	4618      	mov	r0, r3
 8002886:	f000 faf1 	bl	8002e6c <TIM_OC4_SetConfig>
      break;
 800288a:	e000      	b.n	800288e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800288c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_TIM_ConfigClockSource+0x18>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e0b3      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x180>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f0:	d03e      	beq.n	8002970 <HAL_TIM_ConfigClockSource+0xd0>
 80028f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f6:	f200 8087 	bhi.w	8002a08 <HAL_TIM_ConfigClockSource+0x168>
 80028fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fe:	f000 8085 	beq.w	8002a0c <HAL_TIM_ConfigClockSource+0x16c>
 8002902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002906:	d87f      	bhi.n	8002a08 <HAL_TIM_ConfigClockSource+0x168>
 8002908:	2b70      	cmp	r3, #112	; 0x70
 800290a:	d01a      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0xa2>
 800290c:	2b70      	cmp	r3, #112	; 0x70
 800290e:	d87b      	bhi.n	8002a08 <HAL_TIM_ConfigClockSource+0x168>
 8002910:	2b60      	cmp	r3, #96	; 0x60
 8002912:	d050      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0x116>
 8002914:	2b60      	cmp	r3, #96	; 0x60
 8002916:	d877      	bhi.n	8002a08 <HAL_TIM_ConfigClockSource+0x168>
 8002918:	2b50      	cmp	r3, #80	; 0x50
 800291a:	d03c      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0xf6>
 800291c:	2b50      	cmp	r3, #80	; 0x50
 800291e:	d873      	bhi.n	8002a08 <HAL_TIM_ConfigClockSource+0x168>
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d058      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x136>
 8002924:	2b40      	cmp	r3, #64	; 0x40
 8002926:	d86f      	bhi.n	8002a08 <HAL_TIM_ConfigClockSource+0x168>
 8002928:	2b30      	cmp	r3, #48	; 0x30
 800292a:	d064      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x156>
 800292c:	2b30      	cmp	r3, #48	; 0x30
 800292e:	d86b      	bhi.n	8002a08 <HAL_TIM_ConfigClockSource+0x168>
 8002930:	2b20      	cmp	r3, #32
 8002932:	d060      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x156>
 8002934:	2b20      	cmp	r3, #32
 8002936:	d867      	bhi.n	8002a08 <HAL_TIM_ConfigClockSource+0x168>
 8002938:	2b00      	cmp	r3, #0
 800293a:	d05c      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x156>
 800293c:	2b10      	cmp	r3, #16
 800293e:	d05a      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002940:	e062      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6899      	ldr	r1, [r3, #8]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f000 fb5b 	bl	800300c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002964:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	609a      	str	r2, [r3, #8]
      break;
 800296e:	e04e      	b.n	8002a0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6899      	ldr	r1, [r3, #8]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f000 fb44 	bl	800300c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002992:	609a      	str	r2, [r3, #8]
      break;
 8002994:	e03b      	b.n	8002a0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6859      	ldr	r1, [r3, #4]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f000 fab8 	bl	8002f18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2150      	movs	r1, #80	; 0x50
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fb11 	bl	8002fd6 <TIM_ITRx_SetConfig>
      break;
 80029b4:	e02b      	b.n	8002a0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6859      	ldr	r1, [r3, #4]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	461a      	mov	r2, r3
 80029c4:	f000 fad7 	bl	8002f76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2160      	movs	r1, #96	; 0x60
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fb01 	bl	8002fd6 <TIM_ITRx_SetConfig>
      break;
 80029d4:	e01b      	b.n	8002a0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f000 fa98 	bl	8002f18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2140      	movs	r1, #64	; 0x40
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 faf1 	bl	8002fd6 <TIM_ITRx_SetConfig>
      break;
 80029f4:	e00b      	b.n	8002a0e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4619      	mov	r1, r3
 8002a00:	4610      	mov	r0, r2
 8002a02:	f000 fae8 	bl	8002fd6 <TIM_ITRx_SetConfig>
        break;
 8002a06:	e002      	b.n	8002a0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a08:	bf00      	nop
 8002a0a:	e000      	b.n	8002a0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a0c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a40      	ldr	r2, [pc, #256]	; (8002b8c <TIM_Base_SetConfig+0x114>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d013      	beq.n	8002ab8 <TIM_Base_SetConfig+0x40>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a96:	d00f      	beq.n	8002ab8 <TIM_Base_SetConfig+0x40>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a3d      	ldr	r2, [pc, #244]	; (8002b90 <TIM_Base_SetConfig+0x118>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00b      	beq.n	8002ab8 <TIM_Base_SetConfig+0x40>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a3c      	ldr	r2, [pc, #240]	; (8002b94 <TIM_Base_SetConfig+0x11c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d007      	beq.n	8002ab8 <TIM_Base_SetConfig+0x40>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a3b      	ldr	r2, [pc, #236]	; (8002b98 <TIM_Base_SetConfig+0x120>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d003      	beq.n	8002ab8 <TIM_Base_SetConfig+0x40>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a3a      	ldr	r2, [pc, #232]	; (8002b9c <TIM_Base_SetConfig+0x124>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d108      	bne.n	8002aca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a2f      	ldr	r2, [pc, #188]	; (8002b8c <TIM_Base_SetConfig+0x114>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d02b      	beq.n	8002b2a <TIM_Base_SetConfig+0xb2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad8:	d027      	beq.n	8002b2a <TIM_Base_SetConfig+0xb2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a2c      	ldr	r2, [pc, #176]	; (8002b90 <TIM_Base_SetConfig+0x118>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d023      	beq.n	8002b2a <TIM_Base_SetConfig+0xb2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a2b      	ldr	r2, [pc, #172]	; (8002b94 <TIM_Base_SetConfig+0x11c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01f      	beq.n	8002b2a <TIM_Base_SetConfig+0xb2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a2a      	ldr	r2, [pc, #168]	; (8002b98 <TIM_Base_SetConfig+0x120>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01b      	beq.n	8002b2a <TIM_Base_SetConfig+0xb2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a29      	ldr	r2, [pc, #164]	; (8002b9c <TIM_Base_SetConfig+0x124>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d017      	beq.n	8002b2a <TIM_Base_SetConfig+0xb2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a28      	ldr	r2, [pc, #160]	; (8002ba0 <TIM_Base_SetConfig+0x128>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <TIM_Base_SetConfig+0xb2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a27      	ldr	r2, [pc, #156]	; (8002ba4 <TIM_Base_SetConfig+0x12c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00f      	beq.n	8002b2a <TIM_Base_SetConfig+0xb2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a26      	ldr	r2, [pc, #152]	; (8002ba8 <TIM_Base_SetConfig+0x130>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00b      	beq.n	8002b2a <TIM_Base_SetConfig+0xb2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a25      	ldr	r2, [pc, #148]	; (8002bac <TIM_Base_SetConfig+0x134>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <TIM_Base_SetConfig+0xb2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a24      	ldr	r2, [pc, #144]	; (8002bb0 <TIM_Base_SetConfig+0x138>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d003      	beq.n	8002b2a <TIM_Base_SetConfig+0xb2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a23      	ldr	r2, [pc, #140]	; (8002bb4 <TIM_Base_SetConfig+0x13c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d108      	bne.n	8002b3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <TIM_Base_SetConfig+0x114>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d003      	beq.n	8002b70 <TIM_Base_SetConfig+0xf8>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a0c      	ldr	r2, [pc, #48]	; (8002b9c <TIM_Base_SetConfig+0x124>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d103      	bne.n	8002b78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	615a      	str	r2, [r3, #20]
}
 8002b7e:	bf00      	nop
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40010000 	.word	0x40010000
 8002b90:	40000400 	.word	0x40000400
 8002b94:	40000800 	.word	0x40000800
 8002b98:	40000c00 	.word	0x40000c00
 8002b9c:	40010400 	.word	0x40010400
 8002ba0:	40014000 	.word	0x40014000
 8002ba4:	40014400 	.word	0x40014400
 8002ba8:	40014800 	.word	0x40014800
 8002bac:	40001800 	.word	0x40001800
 8002bb0:	40001c00 	.word	0x40001c00
 8002bb4:	40002000 	.word	0x40002000

08002bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	f023 0201 	bic.w	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f023 0302 	bic.w	r3, r3, #2
 8002c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a20      	ldr	r2, [pc, #128]	; (8002c90 <TIM_OC1_SetConfig+0xd8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d003      	beq.n	8002c1c <TIM_OC1_SetConfig+0x64>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a1f      	ldr	r2, [pc, #124]	; (8002c94 <TIM_OC1_SetConfig+0xdc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d10c      	bne.n	8002c36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f023 0308 	bic.w	r3, r3, #8
 8002c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f023 0304 	bic.w	r3, r3, #4
 8002c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a15      	ldr	r2, [pc, #84]	; (8002c90 <TIM_OC1_SetConfig+0xd8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d003      	beq.n	8002c46 <TIM_OC1_SetConfig+0x8e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <TIM_OC1_SetConfig+0xdc>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d111      	bne.n	8002c6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	621a      	str	r2, [r3, #32]
}
 8002c84:	bf00      	nop
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	40010000 	.word	0x40010000
 8002c94:	40010400 	.word	0x40010400

08002c98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f023 0210 	bic.w	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f023 0320 	bic.w	r3, r3, #32
 8002ce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a22      	ldr	r2, [pc, #136]	; (8002d7c <TIM_OC2_SetConfig+0xe4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d003      	beq.n	8002d00 <TIM_OC2_SetConfig+0x68>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a21      	ldr	r2, [pc, #132]	; (8002d80 <TIM_OC2_SetConfig+0xe8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d10d      	bne.n	8002d1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a17      	ldr	r2, [pc, #92]	; (8002d7c <TIM_OC2_SetConfig+0xe4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d003      	beq.n	8002d2c <TIM_OC2_SetConfig+0x94>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a16      	ldr	r2, [pc, #88]	; (8002d80 <TIM_OC2_SetConfig+0xe8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d113      	bne.n	8002d54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	621a      	str	r2, [r3, #32]
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40010000 	.word	0x40010000
 8002d80:	40010400 	.word	0x40010400

08002d84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 0303 	bic.w	r3, r3, #3
 8002dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	021b      	lsls	r3, r3, #8
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a21      	ldr	r2, [pc, #132]	; (8002e64 <TIM_OC3_SetConfig+0xe0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d003      	beq.n	8002dea <TIM_OC3_SetConfig+0x66>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a20      	ldr	r2, [pc, #128]	; (8002e68 <TIM_OC3_SetConfig+0xe4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d10d      	bne.n	8002e06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002df0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a16      	ldr	r2, [pc, #88]	; (8002e64 <TIM_OC3_SetConfig+0xe0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d003      	beq.n	8002e16 <TIM_OC3_SetConfig+0x92>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a15      	ldr	r2, [pc, #84]	; (8002e68 <TIM_OC3_SetConfig+0xe4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d113      	bne.n	8002e3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	621a      	str	r2, [r3, #32]
}
 8002e58:	bf00      	nop
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40010000 	.word	0x40010000
 8002e68:	40010400 	.word	0x40010400

08002e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	031b      	lsls	r3, r3, #12
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a12      	ldr	r2, [pc, #72]	; (8002f10 <TIM_OC4_SetConfig+0xa4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d003      	beq.n	8002ed4 <TIM_OC4_SetConfig+0x68>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a11      	ldr	r2, [pc, #68]	; (8002f14 <TIM_OC4_SetConfig+0xa8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d109      	bne.n	8002ee8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	019b      	lsls	r3, r3, #6
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	621a      	str	r2, [r3, #32]
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40010000 	.word	0x40010000
 8002f14:	40010400 	.word	0x40010400

08002f18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f023 0201 	bic.w	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f023 030a 	bic.w	r3, r3, #10
 8002f54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	621a      	str	r2, [r3, #32]
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b087      	sub	sp, #28
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	f023 0210 	bic.w	r2, r3, #16
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	031b      	lsls	r3, r3, #12
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	621a      	str	r2, [r3, #32]
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b085      	sub	sp, #20
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f043 0307 	orr.w	r3, r3, #7
 8002ff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	609a      	str	r2, [r3, #8]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003026:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	021a      	lsls	r2, r3, #8
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	431a      	orrs	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4313      	orrs	r3, r2
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	609a      	str	r2, [r3, #8]
}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003060:	2302      	movs	r3, #2
 8003062:	e05a      	b.n	800311a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a21      	ldr	r2, [pc, #132]	; (8003128 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d022      	beq.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b0:	d01d      	beq.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1d      	ldr	r2, [pc, #116]	; (800312c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d018      	beq.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1b      	ldr	r2, [pc, #108]	; (8003130 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d013      	beq.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1a      	ldr	r2, [pc, #104]	; (8003134 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00e      	beq.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a18      	ldr	r2, [pc, #96]	; (8003138 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d009      	beq.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a17      	ldr	r2, [pc, #92]	; (800313c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d004      	beq.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a15      	ldr	r2, [pc, #84]	; (8003140 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d10c      	bne.n	8003108 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40010000 	.word	0x40010000
 800312c:	40000400 	.word	0x40000400
 8003130:	40000800 	.word	0x40000800
 8003134:	40000c00 	.word	0x40000c00
 8003138:	40010400 	.word	0x40010400
 800313c:	40014000 	.word	0x40014000
 8003140:	40001800 	.word	0x40001800

08003144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e03f      	b.n	80031fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f004 fba6 	bl	80078e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2224      	movs	r2, #36	; 0x24
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fc43 	bl	8003a3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	4613      	mov	r3, r2
 8003214:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b20      	cmp	r3, #32
 8003220:	d153      	bne.n	80032ca <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HAL_UART_Transmit_DMA+0x26>
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e04c      	b.n	80032cc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_UART_Transmit_DMA+0x38>
 800323c:	2302      	movs	r3, #2
 800323e:	e045      	b.n	80032cc <HAL_UART_Transmit_DMA+0xc4>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	88fa      	ldrh	r2, [r7, #6]
 8003258:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2221      	movs	r2, #33	; 0x21
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326c:	4a19      	ldr	r2, [pc, #100]	; (80032d4 <HAL_UART_Transmit_DMA+0xcc>)
 800326e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003274:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <HAL_UART_Transmit_DMA+0xd0>)
 8003276:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327c:	4a17      	ldr	r2, [pc, #92]	; (80032dc <HAL_UART_Transmit_DMA+0xd4>)
 800327e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003284:	2200      	movs	r2, #0
 8003286:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003288:	f107 0308 	add.w	r3, r7, #8
 800328c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	6819      	ldr	r1, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3304      	adds	r3, #4
 800329c:	461a      	mov	r2, r3
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	f7fd fdce 	bl	8000e40 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032c4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e000      	b.n	80032cc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80032ca:	2302      	movs	r3, #2
  }
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	0800368d 	.word	0x0800368d
 80032d8:	080036df 	.word	0x080036df
 80032dc:	080036fb 	.word	0x080036fb

080032e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08a      	sub	sp, #40	; 0x28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003300:	2300      	movs	r3, #0
 8003302:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10d      	bne.n	8003332 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_UART_IRQHandler+0x52>
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 faee 	bl	800390c <UART_Receive_IT>
      return;
 8003330:	e17c      	b.n	800362c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80b1 	beq.w	800349c <HAL_UART_IRQHandler+0x1bc>
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d105      	bne.n	8003350 <HAL_UART_IRQHandler+0x70>
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 80a6 	beq.w	800349c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_UART_IRQHandler+0x90>
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f043 0201 	orr.w	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_UART_IRQHandler+0xb0>
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	f043 0202 	orr.w	r2, r3, #2
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_UART_IRQHandler+0xd0>
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	f043 0204 	orr.w	r2, r3, #4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00f      	beq.n	80033da <HAL_UART_IRQHandler+0xfa>
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d104      	bne.n	80033ce <HAL_UART_IRQHandler+0xee>
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f043 0208 	orr.w	r2, r3, #8
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 811f 	beq.w	8003622 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <HAL_UART_IRQHandler+0x11e>
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fa87 	bl	800390c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003408:	2b40      	cmp	r3, #64	; 0x40
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d102      	bne.n	8003426 <HAL_UART_IRQHandler+0x146>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d031      	beq.n	800348a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f9c7 	bl	80037ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b40      	cmp	r3, #64	; 0x40
 8003438:	d123      	bne.n	8003482 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003448:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	2b00      	cmp	r3, #0
 8003450:	d013      	beq.n	800347a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	4a77      	ldr	r2, [pc, #476]	; (8003634 <HAL_UART_IRQHandler+0x354>)
 8003458:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fdb6 	bl	8000fd0 <HAL_DMA_Abort_IT>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d016      	beq.n	8003498 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003474:	4610      	mov	r0, r2
 8003476:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003478:	e00e      	b.n	8003498 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f8f0 	bl	8003660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003480:	e00a      	b.n	8003498 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f8ec 	bl	8003660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003488:	e006      	b.n	8003498 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f8e8 	bl	8003660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003496:	e0c4      	b.n	8003622 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003498:	bf00      	nop
    return;
 800349a:	e0c2      	b.n	8003622 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	f040 80a2 	bne.w	80035ea <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 809c 	beq.w	80035ea <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8096 	beq.w	80035ea <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	d14f      	bne.n	8003582 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80034ec:	8a3b      	ldrh	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8099 	beq.w	8003626 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034f8:	8a3a      	ldrh	r2, [r7, #16]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	f080 8093 	bcs.w	8003626 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8a3a      	ldrh	r2, [r7, #16]
 8003504:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003510:	d02b      	beq.n	800356a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003520:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0201 	bic.w	r2, r2, #1
 8003530:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003540:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0210 	bic.w	r2, r2, #16
 800355e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	4618      	mov	r0, r3
 8003566:	f7fd fcc3 	bl	8000ef0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003572:	b29b      	uxth	r3, r3
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	b29b      	uxth	r3, r3
 8003578:	4619      	mov	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f87a 	bl	8003674 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003580:	e051      	b.n	8003626 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800358a:	b29b      	uxth	r3, r3
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d047      	beq.n	800362a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800359a:	8a7b      	ldrh	r3, [r7, #18]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d044      	beq.n	800362a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035ae:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0210 	bic.w	r2, r2, #16
 80035dc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035de:	8a7b      	ldrh	r3, [r7, #18]
 80035e0:	4619      	mov	r1, r3
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f846 	bl	8003674 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80035e8:	e01f      	b.n	800362a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_UART_IRQHandler+0x326>
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f91c 	bl	800383c <UART_Transmit_IT>
    return;
 8003604:	e012      	b.n	800362c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00d      	beq.n	800362c <HAL_UART_IRQHandler+0x34c>
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f95e 	bl	80038dc <UART_EndTransmit_IT>
    return;
 8003620:	e004      	b.n	800362c <HAL_UART_IRQHandler+0x34c>
    return;
 8003622:	bf00      	nop
 8003624:	e002      	b.n	800362c <HAL_UART_IRQHandler+0x34c>
      return;
 8003626:	bf00      	nop
 8003628:	e000      	b.n	800362c <HAL_UART_IRQHandler+0x34c>
      return;
 800362a:	bf00      	nop
  }
}
 800362c:	3728      	adds	r7, #40	; 0x28
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	08003815 	.word	0x08003815

08003638 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d113      	bne.n	80036d0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695a      	ldr	r2, [r3, #20]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036bc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036cc:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80036ce:	e002      	b.n	80036d6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f004 f843 	bl	800775c <HAL_UART_TxCpltCallback>
}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f7ff ffa3 	bl	8003638 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003716:	2b80      	cmp	r3, #128	; 0x80
 8003718:	bf0c      	ite	eq
 800371a:	2301      	moveq	r3, #1
 800371c:	2300      	movne	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b21      	cmp	r3, #33	; 0x21
 800372c:	d108      	bne.n	8003740 <UART_DMAError+0x46>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2200      	movs	r2, #0
 8003738:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800373a:	68b8      	ldr	r0, [r7, #8]
 800373c:	f000 f827 	bl	800378e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374a:	2b40      	cmp	r3, #64	; 0x40
 800374c:	bf0c      	ite	eq
 800374e:	2301      	moveq	r3, #1
 8003750:	2300      	movne	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b22      	cmp	r3, #34	; 0x22
 8003760:	d108      	bne.n	8003774 <UART_DMAError+0x7a>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2200      	movs	r2, #0
 800376c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800376e:	68b8      	ldr	r0, [r7, #8]
 8003770:	f000 f823 	bl	80037ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	f043 0210 	orr.w	r2, r3, #16
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003780:	68b8      	ldr	r0, [r7, #8]
 8003782:	f7ff ff6d 	bl	8003660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80037a4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037d0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d107      	bne.n	80037fa <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0210 	bic.w	r2, r2, #16
 80037f8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f7ff ff16 	bl	8003660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b21      	cmp	r3, #33	; 0x21
 800384e:	d13e      	bne.n	80038ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003858:	d114      	bne.n	8003884 <UART_Transmit_IT+0x48>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d110      	bne.n	8003884 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003876:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	1c9a      	adds	r2, r3, #2
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	621a      	str	r2, [r3, #32]
 8003882:	e008      	b.n	8003896 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	1c59      	adds	r1, r3, #1
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6211      	str	r1, [r2, #32]
 800388e:	781a      	ldrb	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29b      	uxth	r3, r3
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4619      	mov	r1, r3
 80038a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10f      	bne.n	80038ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e000      	b.n	80038d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038ce:	2302      	movs	r3, #2
  }
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f003 ff2d 	bl	800775c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b22      	cmp	r3, #34	; 0x22
 800391e:	f040 8087 	bne.w	8003a30 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392a:	d117      	bne.n	800395c <UART_Receive_IT+0x50>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d113      	bne.n	800395c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	b29b      	uxth	r3, r3
 8003946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394a:	b29a      	uxth	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	1c9a      	adds	r2, r3, #2
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	629a      	str	r2, [r3, #40]	; 0x28
 800395a:	e026      	b.n	80039aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003962:	2300      	movs	r3, #0
 8003964:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396e:	d007      	beq.n	8003980 <UART_Receive_IT+0x74>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <UART_Receive_IT+0x82>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d106      	bne.n	800398e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	b2da      	uxtb	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	701a      	strb	r2, [r3, #0]
 800398c:	e008      	b.n	80039a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800399a:	b2da      	uxtb	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	4619      	mov	r1, r3
 80039b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d136      	bne.n	8003a2c <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0220 	bic.w	r2, r2, #32
 80039cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0201 	bic.w	r2, r2, #1
 80039ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d10e      	bne.n	8003a1c <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0210 	bic.w	r2, r2, #16
 8003a0c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a12:	4619      	mov	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff fe2d 	bl	8003674 <HAL_UARTEx_RxEventCallback>
 8003a1a:	e002      	b.n	8003a22 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff fe15 	bl	800364c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e002      	b.n	8003a32 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e000      	b.n	8003a32 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
  }
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a40:	b09f      	sub	sp, #124	; 0x7c
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a52:	68d9      	ldr	r1, [r3, #12]
 8003a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	ea40 0301 	orr.w	r3, r0, r1
 8003a5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a80:	f021 010c 	bic.w	r1, r1, #12
 8003a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9a:	6999      	ldr	r1, [r3, #24]
 8003a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	ea40 0301 	orr.w	r3, r0, r1
 8003aa4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	4bc5      	ldr	r3, [pc, #788]	; (8003dc0 <UART_SetConfig+0x384>)
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d004      	beq.n	8003aba <UART_SetConfig+0x7e>
 8003ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4bc3      	ldr	r3, [pc, #780]	; (8003dc4 <UART_SetConfig+0x388>)
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d103      	bne.n	8003ac2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003aba:	f7fd ffe1 	bl	8001a80 <HAL_RCC_GetPCLK2Freq>
 8003abe:	6778      	str	r0, [r7, #116]	; 0x74
 8003ac0:	e002      	b.n	8003ac8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ac2:	f7fd ffc9 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8003ac6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad0:	f040 80b6 	bne.w	8003c40 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ad6:	461c      	mov	r4, r3
 8003ad8:	f04f 0500 	mov.w	r5, #0
 8003adc:	4622      	mov	r2, r4
 8003ade:	462b      	mov	r3, r5
 8003ae0:	1891      	adds	r1, r2, r2
 8003ae2:	6439      	str	r1, [r7, #64]	; 0x40
 8003ae4:	415b      	adcs	r3, r3
 8003ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003aec:	1912      	adds	r2, r2, r4
 8003aee:	eb45 0303 	adc.w	r3, r5, r3
 8003af2:	f04f 0000 	mov.w	r0, #0
 8003af6:	f04f 0100 	mov.w	r1, #0
 8003afa:	00d9      	lsls	r1, r3, #3
 8003afc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b00:	00d0      	lsls	r0, r2, #3
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	1911      	adds	r1, r2, r4
 8003b08:	6639      	str	r1, [r7, #96]	; 0x60
 8003b0a:	416b      	adcs	r3, r5
 8003b0c:	667b      	str	r3, [r7, #100]	; 0x64
 8003b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	1891      	adds	r1, r2, r2
 8003b1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b1c:	415b      	adcs	r3, r3
 8003b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b24:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b28:	f7fc fbca 	bl	80002c0 <__aeabi_uldivmod>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4ba5      	ldr	r3, [pc, #660]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003b32:	fba3 2302 	umull	r2, r3, r3, r2
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	011e      	lsls	r6, r3, #4
 8003b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b3c:	461c      	mov	r4, r3
 8003b3e:	f04f 0500 	mov.w	r5, #0
 8003b42:	4622      	mov	r2, r4
 8003b44:	462b      	mov	r3, r5
 8003b46:	1891      	adds	r1, r2, r2
 8003b48:	6339      	str	r1, [r7, #48]	; 0x30
 8003b4a:	415b      	adcs	r3, r3
 8003b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b52:	1912      	adds	r2, r2, r4
 8003b54:	eb45 0303 	adc.w	r3, r5, r3
 8003b58:	f04f 0000 	mov.w	r0, #0
 8003b5c:	f04f 0100 	mov.w	r1, #0
 8003b60:	00d9      	lsls	r1, r3, #3
 8003b62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b66:	00d0      	lsls	r0, r2, #3
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	1911      	adds	r1, r2, r4
 8003b6e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b70:	416b      	adcs	r3, r5
 8003b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	1891      	adds	r1, r2, r2
 8003b80:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b82:	415b      	adcs	r3, r3
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b8e:	f7fc fb97 	bl	80002c0 <__aeabi_uldivmod>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4b8c      	ldr	r3, [pc, #560]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003b98:	fba3 1302 	umull	r1, r3, r3, r2
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	2164      	movs	r1, #100	; 0x64
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	3332      	adds	r3, #50	; 0x32
 8003baa:	4a87      	ldr	r2, [pc, #540]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bb8:	441e      	add	r6, r3
 8003bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f04f 0100 	mov.w	r1, #0
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	1894      	adds	r4, r2, r2
 8003bc8:	623c      	str	r4, [r7, #32]
 8003bca:	415b      	adcs	r3, r3
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bd2:	1812      	adds	r2, r2, r0
 8003bd4:	eb41 0303 	adc.w	r3, r1, r3
 8003bd8:	f04f 0400 	mov.w	r4, #0
 8003bdc:	f04f 0500 	mov.w	r5, #0
 8003be0:	00dd      	lsls	r5, r3, #3
 8003be2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003be6:	00d4      	lsls	r4, r2, #3
 8003be8:	4622      	mov	r2, r4
 8003bea:	462b      	mov	r3, r5
 8003bec:	1814      	adds	r4, r2, r0
 8003bee:	653c      	str	r4, [r7, #80]	; 0x50
 8003bf0:	414b      	adcs	r3, r1
 8003bf2:	657b      	str	r3, [r7, #84]	; 0x54
 8003bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	1891      	adds	r1, r2, r2
 8003c00:	61b9      	str	r1, [r7, #24]
 8003c02:	415b      	adcs	r3, r3
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c0e:	f7fc fb57 	bl	80002c0 <__aeabi_uldivmod>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4b6c      	ldr	r3, [pc, #432]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003c18:	fba3 1302 	umull	r1, r3, r3, r2
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	2164      	movs	r1, #100	; 0x64
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	3332      	adds	r3, #50	; 0x32
 8003c2a:	4a67      	ldr	r2, [pc, #412]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	f003 0207 	and.w	r2, r3, #7
 8003c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4432      	add	r2, r6
 8003c3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c3e:	e0b9      	b.n	8003db4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c42:	461c      	mov	r4, r3
 8003c44:	f04f 0500 	mov.w	r5, #0
 8003c48:	4622      	mov	r2, r4
 8003c4a:	462b      	mov	r3, r5
 8003c4c:	1891      	adds	r1, r2, r2
 8003c4e:	6139      	str	r1, [r7, #16]
 8003c50:	415b      	adcs	r3, r3
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c58:	1912      	adds	r2, r2, r4
 8003c5a:	eb45 0303 	adc.w	r3, r5, r3
 8003c5e:	f04f 0000 	mov.w	r0, #0
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	00d9      	lsls	r1, r3, #3
 8003c68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c6c:	00d0      	lsls	r0, r2, #3
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	eb12 0804 	adds.w	r8, r2, r4
 8003c76:	eb43 0905 	adc.w	r9, r3, r5
 8003c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f04f 0100 	mov.w	r1, #0
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	008b      	lsls	r3, r1, #2
 8003c8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c92:	0082      	lsls	r2, r0, #2
 8003c94:	4640      	mov	r0, r8
 8003c96:	4649      	mov	r1, r9
 8003c98:	f7fc fb12 	bl	80002c0 <__aeabi_uldivmod>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4b49      	ldr	r3, [pc, #292]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	011e      	lsls	r6, r3, #4
 8003caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cac:	4618      	mov	r0, r3
 8003cae:	f04f 0100 	mov.w	r1, #0
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	1894      	adds	r4, r2, r2
 8003cb8:	60bc      	str	r4, [r7, #8]
 8003cba:	415b      	adcs	r3, r3
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cc2:	1812      	adds	r2, r2, r0
 8003cc4:	eb41 0303 	adc.w	r3, r1, r3
 8003cc8:	f04f 0400 	mov.w	r4, #0
 8003ccc:	f04f 0500 	mov.w	r5, #0
 8003cd0:	00dd      	lsls	r5, r3, #3
 8003cd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cd6:	00d4      	lsls	r4, r2, #3
 8003cd8:	4622      	mov	r2, r4
 8003cda:	462b      	mov	r3, r5
 8003cdc:	1814      	adds	r4, r2, r0
 8003cde:	64bc      	str	r4, [r7, #72]	; 0x48
 8003ce0:	414b      	adcs	r3, r1
 8003ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f04f 0100 	mov.w	r1, #0
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	008b      	lsls	r3, r1, #2
 8003cf8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cfc:	0082      	lsls	r2, r0, #2
 8003cfe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003d02:	f7fc fadd 	bl	80002c0 <__aeabi_uldivmod>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4b2f      	ldr	r3, [pc, #188]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	2164      	movs	r1, #100	; 0x64
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	3332      	adds	r3, #50	; 0x32
 8003d1e:	4a2a      	ldr	r2, [pc, #168]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d2a:	441e      	add	r6, r3
 8003d2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f04f 0100 	mov.w	r1, #0
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	1894      	adds	r4, r2, r2
 8003d3a:	603c      	str	r4, [r7, #0]
 8003d3c:	415b      	adcs	r3, r3
 8003d3e:	607b      	str	r3, [r7, #4]
 8003d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d44:	1812      	adds	r2, r2, r0
 8003d46:	eb41 0303 	adc.w	r3, r1, r3
 8003d4a:	f04f 0400 	mov.w	r4, #0
 8003d4e:	f04f 0500 	mov.w	r5, #0
 8003d52:	00dd      	lsls	r5, r3, #3
 8003d54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d58:	00d4      	lsls	r4, r2, #3
 8003d5a:	4622      	mov	r2, r4
 8003d5c:	462b      	mov	r3, r5
 8003d5e:	eb12 0a00 	adds.w	sl, r2, r0
 8003d62:	eb43 0b01 	adc.w	fp, r3, r1
 8003d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f04f 0100 	mov.w	r1, #0
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	008b      	lsls	r3, r1, #2
 8003d7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d7e:	0082      	lsls	r2, r0, #2
 8003d80:	4650      	mov	r0, sl
 8003d82:	4659      	mov	r1, fp
 8003d84:	f7fc fa9c 	bl	80002c0 <__aeabi_uldivmod>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	2164      	movs	r1, #100	; 0x64
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	3332      	adds	r3, #50	; 0x32
 8003da0:	4a09      	ldr	r2, [pc, #36]	; (8003dc8 <UART_SetConfig+0x38c>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	f003 020f 	and.w	r2, r3, #15
 8003dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4432      	add	r2, r6
 8003db2:	609a      	str	r2, [r3, #8]
}
 8003db4:	bf00      	nop
 8003db6:	377c      	adds	r7, #124	; 0x7c
 8003db8:	46bd      	mov	sp, r7
 8003dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40011000 	.word	0x40011000
 8003dc4:	40011400 	.word	0x40011400
 8003dc8:	51eb851f 	.word	0x51eb851f

08003dcc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dde:	2b84      	cmp	r3, #132	; 0x84
 8003de0:	d005      	beq.n	8003dee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003de2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4413      	add	r3, r2
 8003dea:	3303      	adds	r3, #3
 8003dec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003dee:	68fb      	ldr	r3, [r7, #12]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e00:	f001 f8a6 	bl	8004f50 <vTaskStartScheduler>
  
  return osOK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e0c:	b089      	sub	sp, #36	; 0x24
 8003e0e:	af04      	add	r7, sp, #16
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d020      	beq.n	8003e5e <osThreadCreate+0x54>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01c      	beq.n	8003e5e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685c      	ldr	r4, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681d      	ldr	r5, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691e      	ldr	r6, [r3, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff ffc8 	bl	8003dcc <makeFreeRtosPriority>
 8003e3c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e46:	9202      	str	r2, [sp, #8]
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	9100      	str	r1, [sp, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	4632      	mov	r2, r6
 8003e50:	4629      	mov	r1, r5
 8003e52:	4620      	mov	r0, r4
 8003e54:	f000 fe3c 	bl	8004ad0 <xTaskCreateStatic>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	e01c      	b.n	8003e98 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685c      	ldr	r4, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e6a:	b29e      	uxth	r6, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff ffaa 	bl	8003dcc <makeFreeRtosPriority>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	f107 030c 	add.w	r3, r7, #12
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	9200      	str	r2, [sp, #0]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	4632      	mov	r2, r6
 8003e86:	4629      	mov	r1, r5
 8003e88:	4620      	mov	r0, r4
 8003e8a:	f000 fe7e 	bl	8004b8a <xTaskCreate>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d001      	beq.n	8003e98 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	e000      	b.n	8003e9a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003e98:	68fb      	ldr	r3, [r7, #12]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ea2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b084      	sub	sp, #16
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <osDelay+0x16>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	e000      	b.n	8003eba <osDelay+0x18>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 ffae 	bl	8004e1c <vTaskDelay>
  
  return osOK;
 8003ec0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003eca:	b590      	push	{r4, r7, lr}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af02      	add	r7, sp, #8
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d011      	beq.n	8003f00 <osMessageCreate+0x36>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00d      	beq.n	8003f00 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	2400      	movs	r4, #0
 8003ef6:	9400      	str	r4, [sp, #0]
 8003ef8:	f000 f92c 	bl	8004154 <xQueueGenericCreateStatic>
 8003efc:	4603      	mov	r3, r0
 8003efe:	e008      	b.n	8003f12 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	f000 f99a 	bl	8004244 <xQueueGenericCreate>
 8003f10:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd90      	pop	{r4, r7, pc}

08003f1a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f103 0208 	add.w	r2, r3, #8
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f32:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f103 0208 	add.w	r2, r3, #8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f103 0208 	add.w	r2, r3, #8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	601a      	str	r2, [r3, #0]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d103      	bne.n	8003fdc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	e00c      	b.n	8003ff6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3308      	adds	r3, #8
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e002      	b.n	8003fea <vListInsert+0x2e>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d2f6      	bcs.n	8003fe4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	601a      	str	r2, [r3, #0]
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6892      	ldr	r2, [r2, #8]
 8004044:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6852      	ldr	r2, [r2, #4]
 800404e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	d103      	bne.n	8004062 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	1e5a      	subs	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040aa:	bf00      	nop
 80040ac:	e7fe      	b.n	80040ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80040ae:	f002 fc71 	bl	8006994 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ba:	68f9      	ldr	r1, [r7, #12]
 80040bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040be:	fb01 f303 	mul.w	r3, r1, r3
 80040c2:	441a      	add	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	3b01      	subs	r3, #1
 80040e0:	68f9      	ldr	r1, [r7, #12]
 80040e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	441a      	add	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	22ff      	movs	r2, #255	; 0xff
 80040f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	22ff      	movs	r2, #255	; 0xff
 80040fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d114      	bne.n	800412e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01a      	beq.n	8004142 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3310      	adds	r3, #16
 8004110:	4618      	mov	r0, r3
 8004112:	f001 fa4d 	bl	80055b0 <xTaskRemoveFromEventList>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d012      	beq.n	8004142 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800411c:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <xQueueGenericReset+0xcc>)
 800411e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	e009      	b.n	8004142 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3310      	adds	r3, #16
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff fef1 	bl	8003f1a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3324      	adds	r3, #36	; 0x24
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff feec 	bl	8003f1a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004142:	f002 fc57 	bl	80069f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004146:	2301      	movs	r3, #1
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	e000ed04 	.word	0xe000ed04

08004154 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08e      	sub	sp, #56	; 0x38
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10a      	bne.n	800417e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800417a:	bf00      	nop
 800417c:	e7fe      	b.n	800417c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004196:	bf00      	nop
 8004198:	e7fe      	b.n	8004198 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <xQueueGenericCreateStatic+0x52>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <xQueueGenericCreateStatic+0x56>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <xQueueGenericCreateStatic+0x58>
 80041aa:	2300      	movs	r3, #0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	623b      	str	r3, [r7, #32]
}
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d102      	bne.n	80041d2 <xQueueGenericCreateStatic+0x7e>
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <xQueueGenericCreateStatic+0x82>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <xQueueGenericCreateStatic+0x84>
 80041d6:	2300      	movs	r3, #0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	61fb      	str	r3, [r7, #28]
}
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041f2:	2350      	movs	r3, #80	; 0x50
 80041f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2b50      	cmp	r3, #80	; 0x50
 80041fa:	d00a      	beq.n	8004212 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	61bb      	str	r3, [r7, #24]
}
 800420e:	bf00      	nop
 8004210:	e7fe      	b.n	8004210 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004212:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00d      	beq.n	800423a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004226:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	4613      	mov	r3, r2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f83f 	bl	80042b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800423c:	4618      	mov	r0, r3
 800423e:	3730      	adds	r7, #48	; 0x30
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08a      	sub	sp, #40	; 0x28
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	4613      	mov	r3, r2
 8004250:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	613b      	str	r3, [r7, #16]
}
 800426a:	bf00      	nop
 800426c:	e7fe      	b.n	800426c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	3350      	adds	r3, #80	; 0x50
 800427c:	4618      	mov	r0, r3
 800427e:	f002 fcab 	bl	8006bd8 <pvPortMalloc>
 8004282:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d011      	beq.n	80042ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	3350      	adds	r3, #80	; 0x50
 8004292:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800429c:	79fa      	ldrb	r2, [r7, #7]
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	4613      	mov	r3, r2
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	68b9      	ldr	r1, [r7, #8]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 f805 	bl	80042b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042ae:	69bb      	ldr	r3, [r7, #24]
	}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3720      	adds	r7, #32
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d103      	bne.n	80042d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e002      	b.n	80042da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042e6:	2101      	movs	r1, #1
 80042e8:	69b8      	ldr	r0, [r7, #24]
 80042ea:	f7ff fecb 	bl	8004084 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	78fa      	ldrb	r2, [r7, #3]
 80042f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042f6:	bf00      	nop
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08e      	sub	sp, #56	; 0x38
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800430e:	2300      	movs	r3, #0
 8004310:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10a      	bne.n	8004332 <xQueueGenericSend+0x32>
	__asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800432e:	bf00      	nop
 8004330:	e7fe      	b.n	8004330 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d103      	bne.n	8004340 <xQueueGenericSend+0x40>
 8004338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <xQueueGenericSend+0x44>
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <xQueueGenericSend+0x46>
 8004344:	2300      	movs	r3, #0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10a      	bne.n	8004360 <xQueueGenericSend+0x60>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800435c:	bf00      	nop
 800435e:	e7fe      	b.n	800435e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d103      	bne.n	800436e <xQueueGenericSend+0x6e>
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <xQueueGenericSend+0x72>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <xQueueGenericSend+0x74>
 8004372:	2300      	movs	r3, #0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10a      	bne.n	800438e <xQueueGenericSend+0x8e>
	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	623b      	str	r3, [r7, #32]
}
 800438a:	bf00      	nop
 800438c:	e7fe      	b.n	800438c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800438e:	f001 fbcb 	bl	8005b28 <xTaskGetSchedulerState>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d102      	bne.n	800439e <xQueueGenericSend+0x9e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <xQueueGenericSend+0xa2>
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <xQueueGenericSend+0xa4>
 80043a2:	2300      	movs	r3, #0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <xQueueGenericSend+0xbe>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	61fb      	str	r3, [r7, #28]
}
 80043ba:	bf00      	nop
 80043bc:	e7fe      	b.n	80043bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043be:	f002 fae9 	bl	8006994 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d302      	bcc.n	80043d4 <xQueueGenericSend+0xd4>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d129      	bne.n	8004428 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043da:	f000 fa0b 	bl	80047f4 <prvCopyDataToQueue>
 80043de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d010      	beq.n	800440a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ea:	3324      	adds	r3, #36	; 0x24
 80043ec:	4618      	mov	r0, r3
 80043ee:	f001 f8df 	bl	80055b0 <xTaskRemoveFromEventList>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d013      	beq.n	8004420 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043f8:	4b3f      	ldr	r3, [pc, #252]	; (80044f8 <xQueueGenericSend+0x1f8>)
 80043fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	e00a      	b.n	8004420 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004410:	4b39      	ldr	r3, [pc, #228]	; (80044f8 <xQueueGenericSend+0x1f8>)
 8004412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004420:	f002 fae8 	bl	80069f4 <vPortExitCritical>
				return pdPASS;
 8004424:	2301      	movs	r3, #1
 8004426:	e063      	b.n	80044f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d103      	bne.n	8004436 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800442e:	f002 fae1 	bl	80069f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004432:	2300      	movs	r3, #0
 8004434:	e05c      	b.n	80044f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004438:	2b00      	cmp	r3, #0
 800443a:	d106      	bne.n	800444a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800443c:	f107 0314 	add.w	r3, r7, #20
 8004440:	4618      	mov	r0, r3
 8004442:	f001 f917 	bl	8005674 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004446:	2301      	movs	r3, #1
 8004448:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800444a:	f002 fad3 	bl	80069f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800444e:	f000 fde7 	bl	8005020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004452:	f002 fa9f 	bl	8006994 <vPortEnterCritical>
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800445c:	b25b      	sxtb	r3, r3
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004462:	d103      	bne.n	800446c <xQueueGenericSend+0x16c>
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004472:	b25b      	sxtb	r3, r3
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d103      	bne.n	8004482 <xQueueGenericSend+0x182>
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004482:	f002 fab7 	bl	80069f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004486:	1d3a      	adds	r2, r7, #4
 8004488:	f107 0314 	add.w	r3, r7, #20
 800448c:	4611      	mov	r1, r2
 800448e:	4618      	mov	r0, r3
 8004490:	f001 f906 	bl	80056a0 <xTaskCheckForTimeOut>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d124      	bne.n	80044e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800449a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800449c:	f000 faa2 	bl	80049e4 <prvIsQueueFull>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d018      	beq.n	80044d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	3310      	adds	r3, #16
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4611      	mov	r1, r2
 80044ae:	4618      	mov	r0, r3
 80044b0:	f001 f82e 	bl	8005510 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80044b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044b6:	f000 fa2d 	bl	8004914 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80044ba:	f000 fdbf 	bl	800503c <xTaskResumeAll>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f47f af7c 	bne.w	80043be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80044c6:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <xQueueGenericSend+0x1f8>)
 80044c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	e772      	b.n	80043be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044da:	f000 fa1b 	bl	8004914 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044de:	f000 fdad 	bl	800503c <xTaskResumeAll>
 80044e2:	e76c      	b.n	80043be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044e6:	f000 fa15 	bl	8004914 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044ea:	f000 fda7 	bl	800503c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3738      	adds	r7, #56	; 0x38
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b090      	sub	sp, #64	; 0x40
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800450e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d103      	bne.n	8004538 <xQueueGenericSendFromISR+0x3c>
 8004530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <xQueueGenericSendFromISR+0x40>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <xQueueGenericSendFromISR+0x42>
 800453c:	2300      	movs	r3, #0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10a      	bne.n	8004558 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d103      	bne.n	8004566 <xQueueGenericSendFromISR+0x6a>
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <xQueueGenericSendFromISR+0x6e>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <xQueueGenericSendFromISR+0x70>
 800456a:	2300      	movs	r3, #0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10a      	bne.n	8004586 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	623b      	str	r3, [r7, #32]
}
 8004582:	bf00      	nop
 8004584:	e7fe      	b.n	8004584 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004586:	f002 fae7 	bl	8006b58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800458a:	f3ef 8211 	mrs	r2, BASEPRI
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	61fa      	str	r2, [r7, #28]
 80045a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d302      	bcc.n	80045b8 <xQueueGenericSendFromISR+0xbc>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d12f      	bne.n	8004618 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80045ce:	f000 f911 	bl	80047f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045da:	d112      	bne.n	8004602 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d016      	beq.n	8004612 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e6:	3324      	adds	r3, #36	; 0x24
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 ffe1 	bl	80055b0 <xTaskRemoveFromEventList>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00e      	beq.n	8004612 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00b      	beq.n	8004612 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	e007      	b.n	8004612 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004602:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004606:	3301      	adds	r3, #1
 8004608:	b2db      	uxtb	r3, r3
 800460a:	b25a      	sxtb	r2, r3
 800460c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004612:	2301      	movs	r3, #1
 8004614:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004616:	e001      	b.n	800461c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004618:	2300      	movs	r3, #0
 800461a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800461c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004626:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800462a:	4618      	mov	r0, r3
 800462c:	3740      	adds	r7, #64	; 0x40
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08c      	sub	sp, #48	; 0x30
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004640:	2300      	movs	r3, #0
 8004642:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10a      	bne.n	8004664 <xQueueReceive+0x30>
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	623b      	str	r3, [r7, #32]
}
 8004660:	bf00      	nop
 8004662:	e7fe      	b.n	8004662 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d103      	bne.n	8004672 <xQueueReceive+0x3e>
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <xQueueReceive+0x42>
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <xQueueReceive+0x44>
 8004676:	2300      	movs	r3, #0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10a      	bne.n	8004692 <xQueueReceive+0x5e>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	61fb      	str	r3, [r7, #28]
}
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004692:	f001 fa49 	bl	8005b28 <xTaskGetSchedulerState>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d102      	bne.n	80046a2 <xQueueReceive+0x6e>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <xQueueReceive+0x72>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <xQueueReceive+0x74>
 80046a6:	2300      	movs	r3, #0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <xQueueReceive+0x8e>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	61bb      	str	r3, [r7, #24]
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046c2:	f002 f967 	bl	8006994 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01f      	beq.n	8004712 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046d2:	68b9      	ldr	r1, [r7, #8]
 80046d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046d6:	f000 f8f7 	bl	80048c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	1e5a      	subs	r2, r3, #1
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00f      	beq.n	800470a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	3310      	adds	r3, #16
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 ff5e 	bl	80055b0 <xTaskRemoveFromEventList>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046fa:	4b3d      	ldr	r3, [pc, #244]	; (80047f0 <xQueueReceive+0x1bc>)
 80046fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800470a:	f002 f973 	bl	80069f4 <vPortExitCritical>
				return pdPASS;
 800470e:	2301      	movs	r3, #1
 8004710:	e069      	b.n	80047e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d103      	bne.n	8004720 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004718:	f002 f96c 	bl	80069f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800471c:	2300      	movs	r3, #0
 800471e:	e062      	b.n	80047e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004726:	f107 0310 	add.w	r3, r7, #16
 800472a:	4618      	mov	r0, r3
 800472c:	f000 ffa2 	bl	8005674 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004730:	2301      	movs	r3, #1
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004734:	f002 f95e 	bl	80069f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004738:	f000 fc72 	bl	8005020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800473c:	f002 f92a 	bl	8006994 <vPortEnterCritical>
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004746:	b25b      	sxtb	r3, r3
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d103      	bne.n	8004756 <xQueueReceive+0x122>
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800475c:	b25b      	sxtb	r3, r3
 800475e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004762:	d103      	bne.n	800476c <xQueueReceive+0x138>
 8004764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800476c:	f002 f942 	bl	80069f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004770:	1d3a      	adds	r2, r7, #4
 8004772:	f107 0310 	add.w	r3, r7, #16
 8004776:	4611      	mov	r1, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f000 ff91 	bl	80056a0 <xTaskCheckForTimeOut>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d123      	bne.n	80047cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004786:	f000 f917 	bl	80049b8 <prvIsQueueEmpty>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d017      	beq.n	80047c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	3324      	adds	r3, #36	; 0x24
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	4611      	mov	r1, r2
 8004798:	4618      	mov	r0, r3
 800479a:	f000 feb9 	bl	8005510 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800479e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047a0:	f000 f8b8 	bl	8004914 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047a4:	f000 fc4a 	bl	800503c <xTaskResumeAll>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d189      	bne.n	80046c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80047ae:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <xQueueReceive+0x1bc>)
 80047b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	e780      	b.n	80046c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047c2:	f000 f8a7 	bl	8004914 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047c6:	f000 fc39 	bl	800503c <xTaskResumeAll>
 80047ca:	e77a      	b.n	80046c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ce:	f000 f8a1 	bl	8004914 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047d2:	f000 fc33 	bl	800503c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047d8:	f000 f8ee 	bl	80049b8 <prvIsQueueEmpty>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f43f af6f 	beq.w	80046c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3730      	adds	r7, #48	; 0x30
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	e000ed04 	.word	0xe000ed04

080047f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10d      	bne.n	800482e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d14d      	bne.n	80048b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	4618      	mov	r0, r3
 8004820:	f001 f9a0 	bl	8005b64 <xTaskPriorityDisinherit>
 8004824:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	e043      	b.n	80048b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d119      	bne.n	8004868 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6858      	ldr	r0, [r3, #4]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	461a      	mov	r2, r3
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	f003 fa4a 	bl	8007cd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	441a      	add	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	d32b      	bcc.n	80048b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	605a      	str	r2, [r3, #4]
 8004866:	e026      	b.n	80048b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	68d8      	ldr	r0, [r3, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	461a      	mov	r2, r3
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	f003 fa30 	bl	8007cd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	425b      	negs	r3, r3
 8004882:	441a      	add	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d207      	bcs.n	80048a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	425b      	negs	r3, r3
 800489e:	441a      	add	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d105      	bne.n	80048b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048be:	697b      	ldr	r3, [r7, #20]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d018      	beq.n	800490c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	441a      	add	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d303      	bcc.n	80048fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68d9      	ldr	r1, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	461a      	mov	r2, r3
 8004906:	6838      	ldr	r0, [r7, #0]
 8004908:	f003 f9e6 	bl	8007cd8 <memcpy>
	}
}
 800490c:	bf00      	nop
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800491c:	f002 f83a 	bl	8006994 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004926:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004928:	e011      	b.n	800494e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	2b00      	cmp	r3, #0
 8004930:	d012      	beq.n	8004958 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3324      	adds	r3, #36	; 0x24
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fe3a 	bl	80055b0 <xTaskRemoveFromEventList>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004942:	f000 ff1f 	bl	8005784 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	3b01      	subs	r3, #1
 800494a:	b2db      	uxtb	r3, r3
 800494c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800494e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004952:	2b00      	cmp	r3, #0
 8004954:	dce9      	bgt.n	800492a <prvUnlockQueue+0x16>
 8004956:	e000      	b.n	800495a <prvUnlockQueue+0x46>
					break;
 8004958:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	22ff      	movs	r2, #255	; 0xff
 800495e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004962:	f002 f847 	bl	80069f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004966:	f002 f815 	bl	8006994 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004970:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004972:	e011      	b.n	8004998 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d012      	beq.n	80049a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3310      	adds	r3, #16
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fe15 	bl	80055b0 <xTaskRemoveFromEventList>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800498c:	f000 fefa 	bl	8005784 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004990:	7bbb      	ldrb	r3, [r7, #14]
 8004992:	3b01      	subs	r3, #1
 8004994:	b2db      	uxtb	r3, r3
 8004996:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004998:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800499c:	2b00      	cmp	r3, #0
 800499e:	dce9      	bgt.n	8004974 <prvUnlockQueue+0x60>
 80049a0:	e000      	b.n	80049a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	22ff      	movs	r2, #255	; 0xff
 80049a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049ac:	f002 f822 	bl	80069f4 <vPortExitCritical>
}
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049c0:	f001 ffe8 	bl	8006994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d102      	bne.n	80049d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e001      	b.n	80049d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049d6:	f002 f80d 	bl	80069f4 <vPortExitCritical>

	return xReturn;
 80049da:	68fb      	ldr	r3, [r7, #12]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049ec:	f001 ffd2 	bl	8006994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d102      	bne.n	8004a02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049fc:	2301      	movs	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e001      	b.n	8004a06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a06:	f001 fff5 	bl	80069f4 <vPortExitCritical>

	return xReturn;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	e014      	b.n	8004a4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a24:	4a0f      	ldr	r2, [pc, #60]	; (8004a64 <vQueueAddToRegistry+0x50>)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10b      	bne.n	8004a48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a30:	490c      	ldr	r1, [pc, #48]	; (8004a64 <vQueueAddToRegistry+0x50>)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a3a:	4a0a      	ldr	r2, [pc, #40]	; (8004a64 <vQueueAddToRegistry+0x50>)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	4413      	add	r3, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a46:	e006      	b.n	8004a56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b07      	cmp	r3, #7
 8004a52:	d9e7      	bls.n	8004a24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	200045c8 	.word	0x200045c8

08004a68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a78:	f001 ff8c 	bl	8006994 <vPortEnterCritical>
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a82:	b25b      	sxtb	r3, r3
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a88:	d103      	bne.n	8004a92 <vQueueWaitForMessageRestricted+0x2a>
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a98:	b25b      	sxtb	r3, r3
 8004a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9e:	d103      	bne.n	8004aa8 <vQueueWaitForMessageRestricted+0x40>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aa8:	f001 ffa4 	bl	80069f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d106      	bne.n	8004ac2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	3324      	adds	r3, #36	; 0x24
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fd4b 	bl	8005558 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ac2:	6978      	ldr	r0, [r7, #20]
 8004ac4:	f7ff ff26 	bl	8004914 <prvUnlockQueue>
	}
 8004ac8:	bf00      	nop
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08e      	sub	sp, #56	; 0x38
 8004ad4:	af04      	add	r7, sp, #16
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <xTaskCreateStatic+0x2a>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	623b      	str	r3, [r7, #32]
}
 8004af6:	bf00      	nop
 8004af8:	e7fe      	b.n	8004af8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10a      	bne.n	8004b16 <xTaskCreateStatic+0x46>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	61fb      	str	r3, [r7, #28]
}
 8004b12:	bf00      	nop
 8004b14:	e7fe      	b.n	8004b14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b16:	2360      	movs	r3, #96	; 0x60
 8004b18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	2b60      	cmp	r3, #96	; 0x60
 8004b1e:	d00a      	beq.n	8004b36 <xTaskCreateStatic+0x66>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	61bb      	str	r3, [r7, #24]
}
 8004b32:	bf00      	nop
 8004b34:	e7fe      	b.n	8004b34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01e      	beq.n	8004b7c <xTaskCreateStatic+0xac>
 8004b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01b      	beq.n	8004b7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	2202      	movs	r2, #2
 8004b52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b56:	2300      	movs	r3, #0
 8004b58:	9303      	str	r3, [sp, #12]
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	9302      	str	r3, [sp, #8]
 8004b5e:	f107 0314 	add.w	r3, r7, #20
 8004b62:	9301      	str	r3, [sp, #4]
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f850 	bl	8004c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b76:	f000 f8e3 	bl	8004d40 <prvAddNewTaskToReadyList>
 8004b7a:	e001      	b.n	8004b80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b80:	697b      	ldr	r3, [r7, #20]
	}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3728      	adds	r7, #40	; 0x28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b08c      	sub	sp, #48	; 0x30
 8004b8e:	af04      	add	r7, sp, #16
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	4613      	mov	r3, r2
 8004b98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b9a:	88fb      	ldrh	r3, [r7, #6]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f002 f81a 	bl	8006bd8 <pvPortMalloc>
 8004ba4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00e      	beq.n	8004bca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004bac:	2060      	movs	r0, #96	; 0x60
 8004bae:	f002 f813 	bl	8006bd8 <pvPortMalloc>
 8004bb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8004bc0:	e005      	b.n	8004bce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004bc2:	6978      	ldr	r0, [r7, #20]
 8004bc4:	f002 f8d4 	bl	8006d70 <vPortFree>
 8004bc8:	e001      	b.n	8004bce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d017      	beq.n	8004c04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bdc:	88fa      	ldrh	r2, [r7, #6]
 8004bde:	2300      	movs	r3, #0
 8004be0:	9303      	str	r3, [sp, #12]
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	9302      	str	r3, [sp, #8]
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f80e 	bl	8004c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bf8:	69f8      	ldr	r0, [r7, #28]
 8004bfa:	f000 f8a1 	bl	8004d40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	e002      	b.n	8004c0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c04:	f04f 33ff 	mov.w	r3, #4294967295
 8004c08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
	}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3720      	adds	r7, #32
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	21a5      	movs	r1, #165	; 0xa5
 8004c2e:	f003 f861 	bl	8007cf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	f023 0307 	bic.w	r3, r3, #7
 8004c4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	617b      	str	r3, [r7, #20]
}
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d01f      	beq.n	8004cb2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
 8004c76:	e012      	b.n	8004c9e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	7819      	ldrb	r1, [r3, #0]
 8004c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	4413      	add	r3, r2
 8004c86:	3334      	adds	r3, #52	; 0x34
 8004c88:	460a      	mov	r2, r1
 8004c8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	4413      	add	r3, r2
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d006      	beq.n	8004ca6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	61fb      	str	r3, [r7, #28]
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	2b0f      	cmp	r3, #15
 8004ca2:	d9e9      	bls.n	8004c78 <prvInitialiseNewTask+0x64>
 8004ca4:	e000      	b.n	8004ca8 <prvInitialiseNewTask+0x94>
			{
				break;
 8004ca6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb0:	e003      	b.n	8004cba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbc:	2b06      	cmp	r3, #6
 8004cbe:	d901      	bls.n	8004cc4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004cc0:	2306      	movs	r3, #6
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	3304      	adds	r3, #4
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff f93d 	bl	8003f5a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	3318      	adds	r3, #24
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff f938 	bl	8003f5a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	f1c3 0207 	rsb	r2, r3, #7
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	2200      	movs	r2, #0
 8004d04:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	2200      	movs	r2, #0
 8004d0a:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8004d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	68f9      	ldr	r1, [r7, #12]
 8004d20:	69b8      	ldr	r0, [r7, #24]
 8004d22:	f001 fd0d 	bl	8006740 <pxPortInitialiseStack>
 8004d26:	4602      	mov	r2, r0
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d38:	bf00      	nop
 8004d3a:	3720      	adds	r7, #32
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d48:	f001 fe24 	bl	8006994 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d4c:	4b2c      	ldr	r3, [pc, #176]	; (8004e00 <prvAddNewTaskToReadyList+0xc0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3301      	adds	r3, #1
 8004d52:	4a2b      	ldr	r2, [pc, #172]	; (8004e00 <prvAddNewTaskToReadyList+0xc0>)
 8004d54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d56:	4b2b      	ldr	r3, [pc, #172]	; (8004e04 <prvAddNewTaskToReadyList+0xc4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d109      	bne.n	8004d72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d5e:	4a29      	ldr	r2, [pc, #164]	; (8004e04 <prvAddNewTaskToReadyList+0xc4>)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d64:	4b26      	ldr	r3, [pc, #152]	; (8004e00 <prvAddNewTaskToReadyList+0xc0>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d110      	bne.n	8004d8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d6c:	f000 fd2e 	bl	80057cc <prvInitialiseTaskLists>
 8004d70:	e00d      	b.n	8004d8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d72:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <prvAddNewTaskToReadyList+0xc8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d7a:	4b22      	ldr	r3, [pc, #136]	; (8004e04 <prvAddNewTaskToReadyList+0xc4>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d802      	bhi.n	8004d8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d88:	4a1e      	ldr	r2, [pc, #120]	; (8004e04 <prvAddNewTaskToReadyList+0xc4>)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d8e:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <prvAddNewTaskToReadyList+0xcc>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3301      	adds	r3, #1
 8004d94:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <prvAddNewTaskToReadyList+0xcc>)
 8004d96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d98:	4b1c      	ldr	r3, [pc, #112]	; (8004e0c <prvAddNewTaskToReadyList+0xcc>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	2201      	movs	r2, #1
 8004da6:	409a      	lsls	r2, r3
 8004da8:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <prvAddNewTaskToReadyList+0xd0>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	4a18      	ldr	r2, [pc, #96]	; (8004e10 <prvAddNewTaskToReadyList+0xd0>)
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4a15      	ldr	r2, [pc, #84]	; (8004e14 <prvAddNewTaskToReadyList+0xd4>)
 8004dc0:	441a      	add	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4610      	mov	r0, r2
 8004dca:	f7ff f8d3 	bl	8003f74 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004dce:	f001 fe11 	bl	80069f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <prvAddNewTaskToReadyList+0xc8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00e      	beq.n	8004df8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004dda:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <prvAddNewTaskToReadyList+0xc4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d207      	bcs.n	8004df8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004de8:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <prvAddNewTaskToReadyList+0xd8>)
 8004dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000190 	.word	0x20000190
 8004e04:	20000090 	.word	0x20000090
 8004e08:	2000019c 	.word	0x2000019c
 8004e0c:	200001ac 	.word	0x200001ac
 8004e10:	20000198 	.word	0x20000198
 8004e14:	20000094 	.word	0x20000094
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d017      	beq.n	8004e5e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e2e:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <vTaskDelay+0x60>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <vTaskDelay+0x30>
	__asm volatile
 8004e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	60bb      	str	r3, [r7, #8]
}
 8004e48:	bf00      	nop
 8004e4a:	e7fe      	b.n	8004e4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e4c:	f000 f8e8 	bl	8005020 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e50:	2100      	movs	r1, #0
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f001 f8d8 	bl	8006008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e58:	f000 f8f0 	bl	800503c <xTaskResumeAll>
 8004e5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d107      	bne.n	8004e74 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <vTaskDelay+0x64>)
 8004e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	200001b8 	.word	0x200001b8
 8004e80:	e000ed04 	.word	0xe000ed04

08004e84 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10a      	bne.n	8004eac <eTaskGetState+0x28>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	60bb      	str	r3, [r7, #8]
}
 8004ea8:	bf00      	nop
 8004eaa:	e7fe      	b.n	8004eaa <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8004eac:	4b23      	ldr	r3, [pc, #140]	; (8004f3c <eTaskGetState+0xb8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d102      	bne.n	8004ebc <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	77fb      	strb	r3, [r7, #31]
 8004eba:	e03a      	b.n	8004f32 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8004ebc:	f001 fd6a 	bl	8006994 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8004ec6:	4b1e      	ldr	r3, [pc, #120]	; (8004f40 <eTaskGetState+0xbc>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8004ecc:	4b1d      	ldr	r3, [pc, #116]	; (8004f44 <eTaskGetState+0xc0>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004ed2:	f001 fd8f 	bl	80069f4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d003      	beq.n	8004ee6 <eTaskGetState+0x62>
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d102      	bne.n	8004eec <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	e022      	b.n	8004f32 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	4a16      	ldr	r2, [pc, #88]	; (8004f48 <eTaskGetState+0xc4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d112      	bne.n	8004f1a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10b      	bne.n	8004f14 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d102      	bne.n	8004f0e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	77fb      	strb	r3, [r7, #31]
 8004f0c:	e011      	b.n	8004f32 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	77fb      	strb	r3, [r7, #31]
 8004f12:	e00e      	b.n	8004f32 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8004f14:	2302      	movs	r3, #2
 8004f16:	77fb      	strb	r3, [r7, #31]
 8004f18:	e00b      	b.n	8004f32 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	4a0b      	ldr	r2, [pc, #44]	; (8004f4c <eTaskGetState+0xc8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d002      	beq.n	8004f28 <eTaskGetState+0xa4>
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d102      	bne.n	8004f2e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8004f28:	2304      	movs	r3, #4
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e001      	b.n	8004f32 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8004f32:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004f34:	4618      	mov	r0, r3
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	20000090 	.word	0x20000090
 8004f40:	20000148 	.word	0x20000148
 8004f44:	2000014c 	.word	0x2000014c
 8004f48:	2000017c 	.word	0x2000017c
 8004f4c:	20000164 	.word	0x20000164

08004f50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08a      	sub	sp, #40	; 0x28
 8004f54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f5e:	463a      	mov	r2, r7
 8004f60:	1d39      	adds	r1, r7, #4
 8004f62:	f107 0308 	add.w	r3, r7, #8
 8004f66:	4618      	mov	r0, r3
 8004f68:	f002 f83a 	bl	8006fe0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f6c:	6839      	ldr	r1, [r7, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	9202      	str	r2, [sp, #8]
 8004f74:	9301      	str	r3, [sp, #4]
 8004f76:	2300      	movs	r3, #0
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	460a      	mov	r2, r1
 8004f7e:	4922      	ldr	r1, [pc, #136]	; (8005008 <vTaskStartScheduler+0xb8>)
 8004f80:	4822      	ldr	r0, [pc, #136]	; (800500c <vTaskStartScheduler+0xbc>)
 8004f82:	f7ff fda5 	bl	8004ad0 <xTaskCreateStatic>
 8004f86:	4603      	mov	r3, r0
 8004f88:	4a21      	ldr	r2, [pc, #132]	; (8005010 <vTaskStartScheduler+0xc0>)
 8004f8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f8c:	4b20      	ldr	r3, [pc, #128]	; (8005010 <vTaskStartScheduler+0xc0>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f94:	2301      	movs	r3, #1
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	e001      	b.n	8004f9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d102      	bne.n	8004faa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004fa4:	f001 f89a 	bl	80060dc <xTimerCreateTimerTask>
 8004fa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d118      	bne.n	8004fe2 <vTaskStartScheduler+0x92>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	613b      	str	r3, [r7, #16]
}
 8004fc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004fc4:	4b13      	ldr	r3, [pc, #76]	; (8005014 <vTaskStartScheduler+0xc4>)
 8004fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fcc:	4b12      	ldr	r3, [pc, #72]	; (8005018 <vTaskStartScheduler+0xc8>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004fd2:	4b12      	ldr	r3, [pc, #72]	; (800501c <vTaskStartScheduler+0xcc>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8004fd8:	f001 ffe8 	bl	8006fac <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004fdc:	f001 fc38 	bl	8006850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004fe0:	e00e      	b.n	8005000 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d10a      	bne.n	8005000 <vTaskStartScheduler+0xb0>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	60fb      	str	r3, [r7, #12]
}
 8004ffc:	bf00      	nop
 8004ffe:	e7fe      	b.n	8004ffe <vTaskStartScheduler+0xae>
}
 8005000:	bf00      	nop
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	0800856c 	.word	0x0800856c
 800500c:	0800579d 	.word	0x0800579d
 8005010:	200001b4 	.word	0x200001b4
 8005014:	200001b0 	.word	0x200001b0
 8005018:	2000019c 	.word	0x2000019c
 800501c:	20000194 	.word	0x20000194

08005020 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005024:	4b04      	ldr	r3, [pc, #16]	; (8005038 <vTaskSuspendAll+0x18>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3301      	adds	r3, #1
 800502a:	4a03      	ldr	r2, [pc, #12]	; (8005038 <vTaskSuspendAll+0x18>)
 800502c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800502e:	bf00      	nop
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	200001b8 	.word	0x200001b8

0800503c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005046:	2300      	movs	r3, #0
 8005048:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800504a:	4b41      	ldr	r3, [pc, #260]	; (8005150 <xTaskResumeAll+0x114>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10a      	bne.n	8005068 <xTaskResumeAll+0x2c>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	603b      	str	r3, [r7, #0]
}
 8005064:	bf00      	nop
 8005066:	e7fe      	b.n	8005066 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005068:	f001 fc94 	bl	8006994 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800506c:	4b38      	ldr	r3, [pc, #224]	; (8005150 <xTaskResumeAll+0x114>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3b01      	subs	r3, #1
 8005072:	4a37      	ldr	r2, [pc, #220]	; (8005150 <xTaskResumeAll+0x114>)
 8005074:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005076:	4b36      	ldr	r3, [pc, #216]	; (8005150 <xTaskResumeAll+0x114>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d161      	bne.n	8005142 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800507e:	4b35      	ldr	r3, [pc, #212]	; (8005154 <xTaskResumeAll+0x118>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d05d      	beq.n	8005142 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005086:	e02e      	b.n	80050e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005088:	4b33      	ldr	r3, [pc, #204]	; (8005158 <xTaskResumeAll+0x11c>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3318      	adds	r3, #24
 8005094:	4618      	mov	r0, r3
 8005096:	f7fe ffca 	bl	800402e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3304      	adds	r3, #4
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fe ffc5 	bl	800402e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	2201      	movs	r2, #1
 80050aa:	409a      	lsls	r2, r3
 80050ac:	4b2b      	ldr	r3, [pc, #172]	; (800515c <xTaskResumeAll+0x120>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	4a2a      	ldr	r2, [pc, #168]	; (800515c <xTaskResumeAll+0x120>)
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4a27      	ldr	r2, [pc, #156]	; (8005160 <xTaskResumeAll+0x124>)
 80050c4:	441a      	add	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3304      	adds	r3, #4
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f7fe ff51 	bl	8003f74 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d6:	4b23      	ldr	r3, [pc, #140]	; (8005164 <xTaskResumeAll+0x128>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	429a      	cmp	r2, r3
 80050de:	d302      	bcc.n	80050e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80050e0:	4b21      	ldr	r3, [pc, #132]	; (8005168 <xTaskResumeAll+0x12c>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050e6:	4b1c      	ldr	r3, [pc, #112]	; (8005158 <xTaskResumeAll+0x11c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1cc      	bne.n	8005088 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050f4:	f000 fcf8 	bl	8005ae8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80050f8:	4b1c      	ldr	r3, [pc, #112]	; (800516c <xTaskResumeAll+0x130>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d010      	beq.n	8005126 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005104:	f000 f8d6 	bl	80052b4 <xTaskIncrementTick>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800510e:	4b16      	ldr	r3, [pc, #88]	; (8005168 <xTaskResumeAll+0x12c>)
 8005110:	2201      	movs	r2, #1
 8005112:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3b01      	subs	r3, #1
 8005118:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1f1      	bne.n	8005104 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005120:	4b12      	ldr	r3, [pc, #72]	; (800516c <xTaskResumeAll+0x130>)
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005126:	4b10      	ldr	r3, [pc, #64]	; (8005168 <xTaskResumeAll+0x12c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d009      	beq.n	8005142 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800512e:	2301      	movs	r3, #1
 8005130:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005132:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <xTaskResumeAll+0x134>)
 8005134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005142:	f001 fc57 	bl	80069f4 <vPortExitCritical>

	return xAlreadyYielded;
 8005146:	68bb      	ldr	r3, [r7, #8]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	200001b8 	.word	0x200001b8
 8005154:	20000190 	.word	0x20000190
 8005158:	20000150 	.word	0x20000150
 800515c:	20000198 	.word	0x20000198
 8005160:	20000094 	.word	0x20000094
 8005164:	20000090 	.word	0x20000090
 8005168:	200001a4 	.word	0x200001a4
 800516c:	200001a0 	.word	0x200001a0
 8005170:	e000ed04 	.word	0xe000ed04

08005174 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800517a:	4b05      	ldr	r3, [pc, #20]	; (8005190 <xTaskGetTickCount+0x1c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005180:	687b      	ldr	r3, [r7, #4]
}
 8005182:	4618      	mov	r0, r3
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	20000194 	.word	0x20000194

08005194 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	2307      	movs	r3, #7
 80051a6:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80051a8:	f7ff ff3a 	bl	8005020 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80051ac:	4b3b      	ldr	r3, [pc, #236]	; (800529c <uxTaskGetSystemState+0x108>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d36a      	bcc.n	800528c <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4613      	mov	r3, r2
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	461a      	mov	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	1898      	adds	r0, r3, r2
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4613      	mov	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4a32      	ldr	r2, [pc, #200]	; (80052a0 <uxTaskGetSystemState+0x10c>)
 80051d8:	4413      	add	r3, r2
 80051da:	2201      	movs	r2, #1
 80051dc:	4619      	mov	r1, r3
 80051de:	f000 fbc9 	bl	8005974 <prvListTasksWithinSingleList>
 80051e2:	4602      	mov	r2, r0
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	4413      	add	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e2      	bne.n	80051b6 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4613      	mov	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	461a      	mov	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	4a28      	ldr	r2, [pc, #160]	; (80052a4 <uxTaskGetSystemState+0x110>)
 8005202:	6811      	ldr	r1, [r2, #0]
 8005204:	2202      	movs	r2, #2
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fbb4 	bl	8005974 <prvListTasksWithinSingleList>
 800520c:	4602      	mov	r2, r0
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	4413      	add	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4613      	mov	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	461a      	mov	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	4a20      	ldr	r2, [pc, #128]	; (80052a8 <uxTaskGetSystemState+0x114>)
 8005226:	6811      	ldr	r1, [r2, #0]
 8005228:	2202      	movs	r2, #2
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fba2 	bl	8005974 <prvListTasksWithinSingleList>
 8005230:	4602      	mov	r2, r0
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	4413      	add	r3, r2
 8005236:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4613      	mov	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	461a      	mov	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	2204      	movs	r2, #4
 800524a:	4918      	ldr	r1, [pc, #96]	; (80052ac <uxTaskGetSystemState+0x118>)
 800524c:	4618      	mov	r0, r3
 800524e:	f000 fb91 	bl	8005974 <prvListTasksWithinSingleList>
 8005252:	4602      	mov	r2, r0
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	4413      	add	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4613      	mov	r3, r2
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	4413      	add	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	461a      	mov	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4413      	add	r3, r2
 800526a:	2203      	movs	r2, #3
 800526c:	4910      	ldr	r1, [pc, #64]	; (80052b0 <uxTaskGetSystemState+0x11c>)
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fb80 	bl	8005974 <prvListTasksWithinSingleList>
 8005274:	4602      	mov	r2, r0
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	4413      	add	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d004      	beq.n	800528c <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005282:	f001 fe9b 	bl	8006fbc <getRunTimeCounterValue>
 8005286:	4602      	mov	r2, r0
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800528c:	f7ff fed6 	bl	800503c <xTaskResumeAll>

		return uxTask;
 8005290:	697b      	ldr	r3, [r7, #20]
	}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000190 	.word	0x20000190
 80052a0:	20000094 	.word	0x20000094
 80052a4:	20000148 	.word	0x20000148
 80052a8:	2000014c 	.word	0x2000014c
 80052ac:	20000164 	.word	0x20000164
 80052b0:	2000017c 	.word	0x2000017c

080052b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052be:	4b4e      	ldr	r3, [pc, #312]	; (80053f8 <xTaskIncrementTick+0x144>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f040 808e 	bne.w	80053e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052c8:	4b4c      	ldr	r3, [pc, #304]	; (80053fc <xTaskIncrementTick+0x148>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3301      	adds	r3, #1
 80052ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052d0:	4a4a      	ldr	r2, [pc, #296]	; (80053fc <xTaskIncrementTick+0x148>)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d120      	bne.n	800531e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80052dc:	4b48      	ldr	r3, [pc, #288]	; (8005400 <xTaskIncrementTick+0x14c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <xTaskIncrementTick+0x48>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	603b      	str	r3, [r7, #0]
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <xTaskIncrementTick+0x46>
 80052fc:	4b40      	ldr	r3, [pc, #256]	; (8005400 <xTaskIncrementTick+0x14c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	4b40      	ldr	r3, [pc, #256]	; (8005404 <xTaskIncrementTick+0x150>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a3e      	ldr	r2, [pc, #248]	; (8005400 <xTaskIncrementTick+0x14c>)
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	4a3e      	ldr	r2, [pc, #248]	; (8005404 <xTaskIncrementTick+0x150>)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	4b3d      	ldr	r3, [pc, #244]	; (8005408 <xTaskIncrementTick+0x154>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3301      	adds	r3, #1
 8005316:	4a3c      	ldr	r2, [pc, #240]	; (8005408 <xTaskIncrementTick+0x154>)
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	f000 fbe5 	bl	8005ae8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800531e:	4b3b      	ldr	r3, [pc, #236]	; (800540c <xTaskIncrementTick+0x158>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	429a      	cmp	r2, r3
 8005326:	d348      	bcc.n	80053ba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005328:	4b35      	ldr	r3, [pc, #212]	; (8005400 <xTaskIncrementTick+0x14c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005332:	4b36      	ldr	r3, [pc, #216]	; (800540c <xTaskIncrementTick+0x158>)
 8005334:	f04f 32ff 	mov.w	r2, #4294967295
 8005338:	601a      	str	r2, [r3, #0]
					break;
 800533a:	e03e      	b.n	80053ba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800533c:	4b30      	ldr	r3, [pc, #192]	; (8005400 <xTaskIncrementTick+0x14c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	429a      	cmp	r2, r3
 8005352:	d203      	bcs.n	800535c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005354:	4a2d      	ldr	r2, [pc, #180]	; (800540c <xTaskIncrementTick+0x158>)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800535a:	e02e      	b.n	80053ba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	3304      	adds	r3, #4
 8005360:	4618      	mov	r0, r3
 8005362:	f7fe fe64 	bl	800402e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536a:	2b00      	cmp	r3, #0
 800536c:	d004      	beq.n	8005378 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	3318      	adds	r3, #24
 8005372:	4618      	mov	r0, r3
 8005374:	f7fe fe5b 	bl	800402e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	2201      	movs	r2, #1
 800537e:	409a      	lsls	r2, r3
 8005380:	4b23      	ldr	r3, [pc, #140]	; (8005410 <xTaskIncrementTick+0x15c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4313      	orrs	r3, r2
 8005386:	4a22      	ldr	r2, [pc, #136]	; (8005410 <xTaskIncrementTick+0x15c>)
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538e:	4613      	mov	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4a1f      	ldr	r2, [pc, #124]	; (8005414 <xTaskIncrementTick+0x160>)
 8005398:	441a      	add	r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	3304      	adds	r3, #4
 800539e:	4619      	mov	r1, r3
 80053a0:	4610      	mov	r0, r2
 80053a2:	f7fe fde7 	bl	8003f74 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053aa:	4b1b      	ldr	r3, [pc, #108]	; (8005418 <xTaskIncrementTick+0x164>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d3b9      	bcc.n	8005328 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80053b4:	2301      	movs	r3, #1
 80053b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053b8:	e7b6      	b.n	8005328 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053ba:	4b17      	ldr	r3, [pc, #92]	; (8005418 <xTaskIncrementTick+0x164>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c0:	4914      	ldr	r1, [pc, #80]	; (8005414 <xTaskIncrementTick+0x160>)
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	440b      	add	r3, r1
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d901      	bls.n	80053d6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80053d2:	2301      	movs	r3, #1
 80053d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80053d6:	4b11      	ldr	r3, [pc, #68]	; (800541c <xTaskIncrementTick+0x168>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80053de:	2301      	movs	r3, #1
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	e004      	b.n	80053ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80053e4:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <xTaskIncrementTick+0x16c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3301      	adds	r3, #1
 80053ea:	4a0d      	ldr	r2, [pc, #52]	; (8005420 <xTaskIncrementTick+0x16c>)
 80053ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80053ee:	697b      	ldr	r3, [r7, #20]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	200001b8 	.word	0x200001b8
 80053fc:	20000194 	.word	0x20000194
 8005400:	20000148 	.word	0x20000148
 8005404:	2000014c 	.word	0x2000014c
 8005408:	200001a8 	.word	0x200001a8
 800540c:	200001b0 	.word	0x200001b0
 8005410:	20000198 	.word	0x20000198
 8005414:	20000094 	.word	0x20000094
 8005418:	20000090 	.word	0x20000090
 800541c:	200001a4 	.word	0x200001a4
 8005420:	200001a0 	.word	0x200001a0

08005424 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800542a:	4b32      	ldr	r3, [pc, #200]	; (80054f4 <vTaskSwitchContext+0xd0>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005432:	4b31      	ldr	r3, [pc, #196]	; (80054f8 <vTaskSwitchContext+0xd4>)
 8005434:	2201      	movs	r2, #1
 8005436:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005438:	e058      	b.n	80054ec <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800543a:	4b2f      	ldr	r3, [pc, #188]	; (80054f8 <vTaskSwitchContext+0xd4>)
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005440:	f001 fdbc 	bl	8006fbc <getRunTimeCounterValue>
 8005444:	4603      	mov	r3, r0
 8005446:	4a2d      	ldr	r2, [pc, #180]	; (80054fc <vTaskSwitchContext+0xd8>)
 8005448:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800544a:	4b2c      	ldr	r3, [pc, #176]	; (80054fc <vTaskSwitchContext+0xd8>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4b2c      	ldr	r3, [pc, #176]	; (8005500 <vTaskSwitchContext+0xdc>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d909      	bls.n	800546a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005456:	4b2b      	ldr	r3, [pc, #172]	; (8005504 <vTaskSwitchContext+0xe0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800545c:	4a27      	ldr	r2, [pc, #156]	; (80054fc <vTaskSwitchContext+0xd8>)
 800545e:	6810      	ldr	r0, [r2, #0]
 8005460:	4a27      	ldr	r2, [pc, #156]	; (8005500 <vTaskSwitchContext+0xdc>)
 8005462:	6812      	ldr	r2, [r2, #0]
 8005464:	1a82      	subs	r2, r0, r2
 8005466:	440a      	add	r2, r1
 8005468:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800546a:	4b24      	ldr	r3, [pc, #144]	; (80054fc <vTaskSwitchContext+0xd8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a24      	ldr	r2, [pc, #144]	; (8005500 <vTaskSwitchContext+0xdc>)
 8005470:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005472:	4b25      	ldr	r3, [pc, #148]	; (8005508 <vTaskSwitchContext+0xe4>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	fab3 f383 	clz	r3, r3
 800547e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005480:	7afb      	ldrb	r3, [r7, #11]
 8005482:	f1c3 031f 	rsb	r3, r3, #31
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	4920      	ldr	r1, [pc, #128]	; (800550c <vTaskSwitchContext+0xe8>)
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10a      	bne.n	80054b2 <vTaskSwitchContext+0x8e>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	607b      	str	r3, [r7, #4]
}
 80054ae:	bf00      	nop
 80054b0:	e7fe      	b.n	80054b0 <vTaskSwitchContext+0x8c>
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4a13      	ldr	r2, [pc, #76]	; (800550c <vTaskSwitchContext+0xe8>)
 80054be:	4413      	add	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	605a      	str	r2, [r3, #4]
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	3308      	adds	r3, #8
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d104      	bne.n	80054e2 <vTaskSwitchContext+0xbe>
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	605a      	str	r2, [r3, #4]
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4a06      	ldr	r2, [pc, #24]	; (8005504 <vTaskSwitchContext+0xe0>)
 80054ea:	6013      	str	r3, [r2, #0]
}
 80054ec:	bf00      	nop
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	200001b8 	.word	0x200001b8
 80054f8:	200001a4 	.word	0x200001a4
 80054fc:	200001c0 	.word	0x200001c0
 8005500:	200001bc 	.word	0x200001bc
 8005504:	20000090 	.word	0x20000090
 8005508:	20000198 	.word	0x20000198
 800550c:	20000094 	.word	0x20000094

08005510 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10a      	bne.n	8005536 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	60fb      	str	r3, [r7, #12]
}
 8005532:	bf00      	nop
 8005534:	e7fe      	b.n	8005534 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005536:	4b07      	ldr	r3, [pc, #28]	; (8005554 <vTaskPlaceOnEventList+0x44>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3318      	adds	r3, #24
 800553c:	4619      	mov	r1, r3
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fe fd3c 	bl	8003fbc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005544:	2101      	movs	r1, #1
 8005546:	6838      	ldr	r0, [r7, #0]
 8005548:	f000 fd5e 	bl	8006008 <prvAddCurrentTaskToDelayedList>
}
 800554c:	bf00      	nop
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	20000090 	.word	0x20000090

08005558 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	617b      	str	r3, [r7, #20]
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005580:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <vTaskPlaceOnEventListRestricted+0x54>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3318      	adds	r3, #24
 8005586:	4619      	mov	r1, r3
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7fe fcf3 	bl	8003f74 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005594:	f04f 33ff 	mov.w	r3, #4294967295
 8005598:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	68b8      	ldr	r0, [r7, #8]
 800559e:	f000 fd33 	bl	8006008 <prvAddCurrentTaskToDelayedList>
	}
 80055a2:	bf00      	nop
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	20000090 	.word	0x20000090

080055b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10a      	bne.n	80055dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80055c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	60fb      	str	r3, [r7, #12]
}
 80055d8:	bf00      	nop
 80055da:	e7fe      	b.n	80055da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	3318      	adds	r3, #24
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fe fd24 	bl	800402e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055e6:	4b1d      	ldr	r3, [pc, #116]	; (800565c <xTaskRemoveFromEventList+0xac>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d11c      	bne.n	8005628 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	3304      	adds	r3, #4
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fe fd1b 	bl	800402e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	2201      	movs	r2, #1
 80055fe:	409a      	lsls	r2, r3
 8005600:	4b17      	ldr	r3, [pc, #92]	; (8005660 <xTaskRemoveFromEventList+0xb0>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4313      	orrs	r3, r2
 8005606:	4a16      	ldr	r2, [pc, #88]	; (8005660 <xTaskRemoveFromEventList+0xb0>)
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4a13      	ldr	r2, [pc, #76]	; (8005664 <xTaskRemoveFromEventList+0xb4>)
 8005618:	441a      	add	r2, r3
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	3304      	adds	r3, #4
 800561e:	4619      	mov	r1, r3
 8005620:	4610      	mov	r0, r2
 8005622:	f7fe fca7 	bl	8003f74 <vListInsertEnd>
 8005626:	e005      	b.n	8005634 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	3318      	adds	r3, #24
 800562c:	4619      	mov	r1, r3
 800562e:	480e      	ldr	r0, [pc, #56]	; (8005668 <xTaskRemoveFromEventList+0xb8>)
 8005630:	f7fe fca0 	bl	8003f74 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005638:	4b0c      	ldr	r3, [pc, #48]	; (800566c <xTaskRemoveFromEventList+0xbc>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	429a      	cmp	r2, r3
 8005640:	d905      	bls.n	800564e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005642:	2301      	movs	r3, #1
 8005644:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005646:	4b0a      	ldr	r3, [pc, #40]	; (8005670 <xTaskRemoveFromEventList+0xc0>)
 8005648:	2201      	movs	r2, #1
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	e001      	b.n	8005652 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005652:	697b      	ldr	r3, [r7, #20]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	200001b8 	.word	0x200001b8
 8005660:	20000198 	.word	0x20000198
 8005664:	20000094 	.word	0x20000094
 8005668:	20000150 	.word	0x20000150
 800566c:	20000090 	.word	0x20000090
 8005670:	200001a4 	.word	0x200001a4

08005674 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800567c:	4b06      	ldr	r3, [pc, #24]	; (8005698 <vTaskInternalSetTimeOutState+0x24>)
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <vTaskInternalSetTimeOutState+0x28>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	605a      	str	r2, [r3, #4]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	200001a8 	.word	0x200001a8
 800569c:	20000194 	.word	0x20000194

080056a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10a      	bne.n	80056c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	613b      	str	r3, [r7, #16]
}
 80056c2:	bf00      	nop
 80056c4:	e7fe      	b.n	80056c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	60fb      	str	r3, [r7, #12]
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80056e2:	f001 f957 	bl	8006994 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056e6:	4b24      	ldr	r3, [pc, #144]	; (8005778 <xTaskCheckForTimeOut+0xd8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80056f6:	4b21      	ldr	r3, [pc, #132]	; (800577c <xTaskCheckForTimeOut+0xdc>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d007      	beq.n	8005712 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8005702:	4b1e      	ldr	r3, [pc, #120]	; (800577c <xTaskCheckForTimeOut+0xdc>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
				xReturn = pdTRUE;
 800570c:	2301      	movs	r3, #1
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	e02b      	b.n	800576a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571a:	d102      	bne.n	8005722 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800571c:	2300      	movs	r3, #0
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	e023      	b.n	800576a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	4b16      	ldr	r3, [pc, #88]	; (8005780 <xTaskCheckForTimeOut+0xe0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d007      	beq.n	800573e <xTaskCheckForTimeOut+0x9e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	429a      	cmp	r2, r3
 8005736:	d302      	bcc.n	800573e <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005738:	2301      	movs	r3, #1
 800573a:	61fb      	str	r3, [r7, #28]
 800573c:	e015      	b.n	800576a <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	429a      	cmp	r2, r3
 8005746:	d20b      	bcs.n	8005760 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	1ad2      	subs	r2, r2, r3
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff ff8d 	bl	8005674 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800575a:	2300      	movs	r3, #0
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	e004      	b.n	800576a <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005766:	2301      	movs	r3, #1
 8005768:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800576a:	f001 f943 	bl	80069f4 <vPortExitCritical>

	return xReturn;
 800576e:	69fb      	ldr	r3, [r7, #28]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3720      	adds	r7, #32
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	20000194 	.word	0x20000194
 800577c:	20000090 	.word	0x20000090
 8005780:	200001a8 	.word	0x200001a8

08005784 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005788:	4b03      	ldr	r3, [pc, #12]	; (8005798 <vTaskMissedYield+0x14>)
 800578a:	2201      	movs	r2, #1
 800578c:	601a      	str	r2, [r3, #0]
}
 800578e:	bf00      	nop
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	200001a4 	.word	0x200001a4

0800579c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057a4:	f000 f852 	bl	800584c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057a8:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <prvIdleTask+0x28>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d9f9      	bls.n	80057a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057b0:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <prvIdleTask+0x2c>)
 80057b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057c0:	e7f0      	b.n	80057a4 <prvIdleTask+0x8>
 80057c2:	bf00      	nop
 80057c4:	20000094 	.word	0x20000094
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057d2:	2300      	movs	r3, #0
 80057d4:	607b      	str	r3, [r7, #4]
 80057d6:	e00c      	b.n	80057f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4a12      	ldr	r2, [pc, #72]	; (800582c <prvInitialiseTaskLists+0x60>)
 80057e4:	4413      	add	r3, r2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe fb97 	bl	8003f1a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3301      	adds	r3, #1
 80057f0:	607b      	str	r3, [r7, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b06      	cmp	r3, #6
 80057f6:	d9ef      	bls.n	80057d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057f8:	480d      	ldr	r0, [pc, #52]	; (8005830 <prvInitialiseTaskLists+0x64>)
 80057fa:	f7fe fb8e 	bl	8003f1a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057fe:	480d      	ldr	r0, [pc, #52]	; (8005834 <prvInitialiseTaskLists+0x68>)
 8005800:	f7fe fb8b 	bl	8003f1a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005804:	480c      	ldr	r0, [pc, #48]	; (8005838 <prvInitialiseTaskLists+0x6c>)
 8005806:	f7fe fb88 	bl	8003f1a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800580a:	480c      	ldr	r0, [pc, #48]	; (800583c <prvInitialiseTaskLists+0x70>)
 800580c:	f7fe fb85 	bl	8003f1a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005810:	480b      	ldr	r0, [pc, #44]	; (8005840 <prvInitialiseTaskLists+0x74>)
 8005812:	f7fe fb82 	bl	8003f1a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005816:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <prvInitialiseTaskLists+0x78>)
 8005818:	4a05      	ldr	r2, [pc, #20]	; (8005830 <prvInitialiseTaskLists+0x64>)
 800581a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800581c:	4b0a      	ldr	r3, [pc, #40]	; (8005848 <prvInitialiseTaskLists+0x7c>)
 800581e:	4a05      	ldr	r2, [pc, #20]	; (8005834 <prvInitialiseTaskLists+0x68>)
 8005820:	601a      	str	r2, [r3, #0]
}
 8005822:	bf00      	nop
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20000094 	.word	0x20000094
 8005830:	20000120 	.word	0x20000120
 8005834:	20000134 	.word	0x20000134
 8005838:	20000150 	.word	0x20000150
 800583c:	20000164 	.word	0x20000164
 8005840:	2000017c 	.word	0x2000017c
 8005844:	20000148 	.word	0x20000148
 8005848:	2000014c 	.word	0x2000014c

0800584c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005852:	e019      	b.n	8005888 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005854:	f001 f89e 	bl	8006994 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005858:	4b10      	ldr	r3, [pc, #64]	; (800589c <prvCheckTasksWaitingTermination+0x50>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3304      	adds	r3, #4
 8005864:	4618      	mov	r0, r3
 8005866:	f7fe fbe2 	bl	800402e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800586a:	4b0d      	ldr	r3, [pc, #52]	; (80058a0 <prvCheckTasksWaitingTermination+0x54>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3b01      	subs	r3, #1
 8005870:	4a0b      	ldr	r2, [pc, #44]	; (80058a0 <prvCheckTasksWaitingTermination+0x54>)
 8005872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005874:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <prvCheckTasksWaitingTermination+0x58>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3b01      	subs	r3, #1
 800587a:	4a0a      	ldr	r2, [pc, #40]	; (80058a4 <prvCheckTasksWaitingTermination+0x58>)
 800587c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800587e:	f001 f8b9 	bl	80069f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f900 	bl	8005a88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005888:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <prvCheckTasksWaitingTermination+0x58>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e1      	bne.n	8005854 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005890:	bf00      	nop
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20000164 	.word	0x20000164
 80058a0:	20000190 	.word	0x20000190
 80058a4:	20000178 	.word	0x20000178

080058a8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d102      	bne.n	80058c2 <vTaskGetInfo+0x1a>
 80058bc:	4b2c      	ldr	r3, [pc, #176]	; (8005970 <vTaskGetInfo+0xc8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	e000      	b.n	80058c4 <vTaskGetInfo+0x1c>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 80058fe:	78fb      	ldrb	r3, [r7, #3]
 8005900:	2b05      	cmp	r3, #5
 8005902:	d01a      	beq.n	800593a <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8005904:	4b1a      	ldr	r3, [pc, #104]	; (8005970 <vTaskGetInfo+0xc8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	429a      	cmp	r2, r3
 800590c:	d103      	bne.n	8005916 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2200      	movs	r2, #0
 8005912:	731a      	strb	r2, [r3, #12]
 8005914:	e018      	b.n	8005948 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	78fa      	ldrb	r2, [r7, #3]
 800591a:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	2b03      	cmp	r3, #3
 8005920:	d112      	bne.n	8005948 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8005922:	f7ff fb7d 	bl	8005020 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2202      	movs	r2, #2
 8005932:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8005934:	f7ff fb82 	bl	800503c <xTaskResumeAll>
 8005938:	e006      	b.n	8005948 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800593a:	6978      	ldr	r0, [r7, #20]
 800593c:	f7ff faa2 	bl	8004e84 <eTaskGetState>
 8005940:	4603      	mov	r3, r0
 8005942:	461a      	mov	r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005952:	4618      	mov	r0, r3
 8005954:	f000 f860 	bl	8005a18 <prvTaskCheckFreeStackSpace>
 8005958:	4603      	mov	r3, r0
 800595a:	461a      	mov	r2, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8005960:	e002      	b.n	8005968 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2200      	movs	r2, #0
 8005966:	841a      	strh	r2, [r3, #32]
	}
 8005968:	bf00      	nop
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20000090 	.word	0x20000090

08005974 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08a      	sub	sp, #40	; 0x28
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	4613      	mov	r3, r2
 8005980:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8005982:	2300      	movs	r3, #0
 8005984:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d03f      	beq.n	8005a0e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	623b      	str	r3, [r7, #32]
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	605a      	str	r2, [r3, #4]
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	3308      	adds	r3, #8
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d104      	bne.n	80059b2 <prvListTasksWithinSingleList+0x3e>
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	605a      	str	r2, [r3, #4]
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	61bb      	str	r3, [r7, #24]
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	605a      	str	r2, [r3, #4]
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	3308      	adds	r3, #8
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d104      	bne.n	80059de <prvListTasksWithinSingleList+0x6a>
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	605a      	str	r2, [r3, #4]
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80059e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e8:	4613      	mov	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	461a      	mov	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	1899      	adds	r1, r3, r2
 80059f6:	79fb      	ldrb	r3, [r7, #7]
 80059f8:	2201      	movs	r2, #1
 80059fa:	6978      	ldr	r0, [r7, #20]
 80059fc:	f7ff ff54 	bl	80058a8 <vTaskGetInfo>
				uxTask++;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	3301      	adds	r3, #1
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d1d5      	bne.n	80059ba <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3728      	adds	r7, #40	; 0x28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005a24:	e005      	b.n	8005a32 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2ba5      	cmp	r3, #165	; 0xa5
 8005a38:	d0f5      	beq.n	8005a26 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	089b      	lsrs	r3, r3, #2
 8005a3e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	b29b      	uxth	r3, r3
	}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d102      	bne.n	8005a64 <uxTaskGetStackHighWaterMark+0x14>
 8005a5e:	4b09      	ldr	r3, [pc, #36]	; (8005a84 <uxTaskGetStackHighWaterMark+0x34>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	e000      	b.n	8005a66 <uxTaskGetStackHighWaterMark+0x16>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8005a6e:	6938      	ldr	r0, [r7, #16]
 8005a70:	f7ff ffd2 	bl	8005a18 <prvTaskCheckFreeStackSpace>
 8005a74:	4603      	mov	r3, r0
 8005a76:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8005a78:	68fb      	ldr	r3, [r7, #12]
	}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20000090 	.word	0x20000090

08005a88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d108      	bne.n	8005aac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f001 f966 	bl	8006d70 <vPortFree>
				vPortFree( pxTCB );
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f001 f963 	bl	8006d70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005aaa:	e018      	b.n	8005ade <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d103      	bne.n	8005abe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 f95a 	bl	8006d70 <vPortFree>
	}
 8005abc:	e00f      	b.n	8005ade <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d00a      	beq.n	8005ade <prvDeleteTCB+0x56>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	60fb      	str	r3, [r7, #12]
}
 8005ada:	bf00      	nop
 8005adc:	e7fe      	b.n	8005adc <prvDeleteTCB+0x54>
	}
 8005ade:	bf00      	nop
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aee:	4b0c      	ldr	r3, [pc, #48]	; (8005b20 <prvResetNextTaskUnblockTime+0x38>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d104      	bne.n	8005b02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005af8:	4b0a      	ldr	r3, [pc, #40]	; (8005b24 <prvResetNextTaskUnblockTime+0x3c>)
 8005afa:	f04f 32ff 	mov.w	r2, #4294967295
 8005afe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b00:	e008      	b.n	8005b14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b02:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <prvResetNextTaskUnblockTime+0x38>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	4a04      	ldr	r2, [pc, #16]	; (8005b24 <prvResetNextTaskUnblockTime+0x3c>)
 8005b12:	6013      	str	r3, [r2, #0]
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	20000148 	.word	0x20000148
 8005b24:	200001b0 	.word	0x200001b0

08005b28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b2e:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <xTaskGetSchedulerState+0x34>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d102      	bne.n	8005b3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b36:	2301      	movs	r3, #1
 8005b38:	607b      	str	r3, [r7, #4]
 8005b3a:	e008      	b.n	8005b4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b3c:	4b08      	ldr	r3, [pc, #32]	; (8005b60 <xTaskGetSchedulerState+0x38>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d102      	bne.n	8005b4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b44:	2302      	movs	r3, #2
 8005b46:	607b      	str	r3, [r7, #4]
 8005b48:	e001      	b.n	8005b4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b4e:	687b      	ldr	r3, [r7, #4]
	}
 8005b50:	4618      	mov	r0, r3
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	2000019c 	.word	0x2000019c
 8005b60:	200001b8 	.word	0x200001b8

08005b64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d06e      	beq.n	8005c58 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b7a:	4b3a      	ldr	r3, [pc, #232]	; (8005c64 <xTaskPriorityDisinherit+0x100>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d00a      	beq.n	8005b9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	60fb      	str	r3, [r7, #12]
}
 8005b96:	bf00      	nop
 8005b98:	e7fe      	b.n	8005b98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10a      	bne.n	8005bb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	60bb      	str	r3, [r7, #8]
}
 8005bb4:	bf00      	nop
 8005bb6:	e7fe      	b.n	8005bb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bbc:	1e5a      	subs	r2, r3, #1
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d044      	beq.n	8005c58 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d140      	bne.n	8005c58 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe fa27 	bl	800402e <uxListRemove>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d115      	bne.n	8005c12 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bea:	491f      	ldr	r1, [pc, #124]	; (8005c68 <xTaskPriorityDisinherit+0x104>)
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <xTaskPriorityDisinherit+0xae>
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	2201      	movs	r2, #1
 8005c02:	fa02 f303 	lsl.w	r3, r2, r3
 8005c06:	43da      	mvns	r2, r3
 8005c08:	4b18      	ldr	r3, [pc, #96]	; (8005c6c <xTaskPriorityDisinherit+0x108>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	4a17      	ldr	r2, [pc, #92]	; (8005c6c <xTaskPriorityDisinherit+0x108>)
 8005c10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	f1c3 0207 	rsb	r2, r3, #7
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	409a      	lsls	r2, r3
 8005c2e:	4b0f      	ldr	r3, [pc, #60]	; (8005c6c <xTaskPriorityDisinherit+0x108>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	4a0d      	ldr	r2, [pc, #52]	; (8005c6c <xTaskPriorityDisinherit+0x108>)
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4a08      	ldr	r2, [pc, #32]	; (8005c68 <xTaskPriorityDisinherit+0x104>)
 8005c46:	441a      	add	r2, r3
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f7fe f990 	bl	8003f74 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c54:	2301      	movs	r3, #1
 8005c56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c58:	697b      	ldr	r3, [r7, #20]
	}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20000090 	.word	0x20000090
 8005c68:	20000094 	.word	0x20000094
 8005c6c:	20000198 	.word	0x20000198

08005c70 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8005c7a:	6839      	ldr	r1, [r7, #0]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f002 f861 	bl	8007d44 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fa fac4 	bl	8000210 <strlen>
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	e007      	b.n	8005c9c <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4413      	add	r3, r2
 8005c92:	2220      	movs	r2, #32
 8005c94:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b0e      	cmp	r3, #14
 8005ca0:	d9f4      	bls.n	8005c8c <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	2200      	movs	r2, #0
 8005caa:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4413      	add	r3, r2
	}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8005cca:	4b3a      	ldr	r3, [pc, #232]	; (8005db4 <vTaskGetRunTimeStats+0xf8>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8005cd0:	4b38      	ldr	r3, [pc, #224]	; (8005db4 <vTaskGetRunTimeStats+0xf8>)
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	4413      	add	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f000 ff7b 	bl	8006bd8 <pvPortMalloc>
 8005ce2:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d05f      	beq.n	8005daa <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8005cea:	f107 030c 	add.w	r3, r7, #12
 8005cee:	461a      	mov	r2, r3
 8005cf0:	69b9      	ldr	r1, [r7, #24]
 8005cf2:	6978      	ldr	r0, [r7, #20]
 8005cf4:	f7ff fa4e 	bl	8005194 <uxTaskGetSystemState>
 8005cf8:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4a2e      	ldr	r2, [pc, #184]	; (8005db8 <vTaskGetRunTimeStats+0xfc>)
 8005cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d04b      	beq.n	8005da4 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61fb      	str	r3, [r7, #28]
 8005d10:	e044      	b.n	8005d9c <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	4613      	mov	r3, r2
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	4413      	add	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	4413      	add	r3, r2
 8005d22:	699a      	ldr	r2, [r3, #24]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2a:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8005d2c:	69fa      	ldr	r2, [r7, #28]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	461a      	mov	r2, r3
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff ff95 	bl	8005c70 <prvWriteNameToBuffer>
 8005d46:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00e      	beq.n	8005d6c <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8005d4e:	69fa      	ldr	r2, [r7, #28]
 8005d50:	4613      	mov	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	461a      	mov	r2, r3
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	699a      	ldr	r2, [r3, #24]
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	4916      	ldr	r1, [pc, #88]	; (8005dbc <vTaskGetRunTimeStats+0x100>)
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f001 ffcd 	bl	8007d04 <siprintf>
 8005d6a:	e00d      	b.n	8005d88 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	461a      	mov	r2, r3
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	490f      	ldr	r1, [pc, #60]	; (8005dc0 <vTaskGetRunTimeStats+0x104>)
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f001 ffbe 	bl	8007d04 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7fa fa41 	bl	8000210 <strlen>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4413      	add	r3, r2
 8005d94:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	61fb      	str	r3, [r7, #28]
 8005d9c:	69fa      	ldr	r2, [r7, #28]
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d3b6      	bcc.n	8005d12 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8005da4:	6978      	ldr	r0, [r7, #20]
 8005da6:	f000 ffe3 	bl	8006d70 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005daa:	bf00      	nop
 8005dac:	3720      	adds	r7, #32
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20000190 	.word	0x20000190
 8005db8:	51eb851f 	.word	0x51eb851f
 8005dbc:	08008584 	.word	0x08008584
 8005dc0:	08008590 	.word	0x08008590

08005dc4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8005dce:	f000 fde1 	bl	8006994 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8005dd2:	4b1e      	ldr	r3, [pc, #120]	; (8005e4c <ulTaskNotifyTake+0x88>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d113      	bne.n	8005e04 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005ddc:	4b1b      	ldr	r3, [pc, #108]	; (8005e4c <ulTaskNotifyTake+0x88>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				if( xTicksToWait > ( TickType_t ) 0 )
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005dec:	2101      	movs	r1, #1
 8005dee:	6838      	ldr	r0, [r7, #0]
 8005df0:	f000 f90a 	bl	8006008 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005df4:	4b16      	ldr	r3, [pc, #88]	; (8005e50 <ulTaskNotifyTake+0x8c>)
 8005df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005e04:	f000 fdf6 	bl	80069f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005e08:	f000 fdc4 	bl	8006994 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005e0c:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <ulTaskNotifyTake+0x88>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e12:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00c      	beq.n	8005e34 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d004      	beq.n	8005e2a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8005e20:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <ulTaskNotifyTake+0x88>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2200      	movs	r2, #0
 8005e26:	659a      	str	r2, [r3, #88]	; 0x58
 8005e28:	e004      	b.n	8005e34 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005e2a:	4b08      	ldr	r3, [pc, #32]	; (8005e4c <ulTaskNotifyTake+0x88>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	3a01      	subs	r2, #1
 8005e32:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e34:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <ulTaskNotifyTake+0x88>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		}
		taskEXIT_CRITICAL();
 8005e3e:	f000 fdd9 	bl	80069f4 <vPortExitCritical>

		return ulReturn;
 8005e42:	68fb      	ldr	r3, [r7, #12]
	}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20000090 	.word	0x20000090
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08e      	sub	sp, #56	; 0x38
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	603b      	str	r3, [r7, #0]
 8005e60:	4613      	mov	r3, r2
 8005e62:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005e64:	2301      	movs	r3, #1
 8005e66:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10a      	bne.n	8005e84 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e84:	f000 fe68 	bl	8006b58 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005e8c:	f3ef 8211 	mrs	r2, BASEPRI
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	623a      	str	r2, [r7, #32]
 8005ea2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005ea4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

			switch( eAction )
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d828      	bhi.n	8005f20 <xTaskGenericNotifyFromISR+0xcc>
 8005ece:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <xTaskGenericNotifyFromISR+0x80>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005f41 	.word	0x08005f41
 8005ed8:	08005ee9 	.word	0x08005ee9
 8005edc:	08005ef7 	.word	0x08005ef7
 8005ee0:	08005f03 	.word	0x08005f03
 8005ee4:	08005f0b 	.word	0x08005f0b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef2:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8005ef4:	e027      	b.n	8005f46 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8005f00:	e021      	b.n	8005f46 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8005f08:	e01d      	b.n	8005f46 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005f0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d003      	beq.n	8005f1a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	659a      	str	r2, [r3, #88]	; 0x58
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005f18:	e015      	b.n	8005f46 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005f1e:	e012      	b.n	8005f46 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d00c      	beq.n	8005f44 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	61bb      	str	r3, [r7, #24]
}
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <xTaskGenericNotifyFromISR+0xea>
					break;
 8005f40:	bf00      	nop
 8005f42:	e000      	b.n	8005f46 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8005f44:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005f46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d145      	bne.n	8005fda <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	617b      	str	r3, [r7, #20]
}
 8005f68:	bf00      	nop
 8005f6a:	e7fe      	b.n	8005f6a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f6c:	4b20      	ldr	r3, [pc, #128]	; (8005ff0 <xTaskGenericNotifyFromISR+0x19c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d11c      	bne.n	8005fae <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	3304      	adds	r3, #4
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fe f858 	bl	800402e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f82:	2201      	movs	r2, #1
 8005f84:	409a      	lsls	r2, r3
 8005f86:	4b1b      	ldr	r3, [pc, #108]	; (8005ff4 <xTaskGenericNotifyFromISR+0x1a0>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	4a19      	ldr	r2, [pc, #100]	; (8005ff4 <xTaskGenericNotifyFromISR+0x1a0>)
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4a16      	ldr	r2, [pc, #88]	; (8005ff8 <xTaskGenericNotifyFromISR+0x1a4>)
 8005f9e:	441a      	add	r2, r3
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	f7fd ffe4 	bl	8003f74 <vListInsertEnd>
 8005fac:	e005      	b.n	8005fba <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	3318      	adds	r3, #24
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4811      	ldr	r0, [pc, #68]	; (8005ffc <xTaskGenericNotifyFromISR+0x1a8>)
 8005fb6:	f7fd ffdd 	bl	8003f74 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbe:	4b10      	ldr	r3, [pc, #64]	; (8006000 <xTaskGenericNotifyFromISR+0x1ac>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d908      	bls.n	8005fda <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005fd4:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <xTaskGenericNotifyFromISR+0x1b0>)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fdc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f383 8811 	msr	BASEPRI, r3
}
 8005fe4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3738      	adds	r7, #56	; 0x38
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	200001b8 	.word	0x200001b8
 8005ff4:	20000198 	.word	0x20000198
 8005ff8:	20000094 	.word	0x20000094
 8005ffc:	20000150 	.word	0x20000150
 8006000:	20000090 	.word	0x20000090
 8006004:	200001a4 	.word	0x200001a4

08006008 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006012:	4b2b      	ldr	r3, [pc, #172]	; (80060c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8006018:	4b2a      	ldr	r3, [pc, #168]	; (80060c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006022:	4b28      	ldr	r3, [pc, #160]	; (80060c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3304      	adds	r3, #4
 8006028:	4618      	mov	r0, r3
 800602a:	f7fe f800 	bl	800402e <uxListRemove>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10b      	bne.n	800604c <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006034:	4b23      	ldr	r3, [pc, #140]	; (80060c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	2201      	movs	r2, #1
 800603c:	fa02 f303 	lsl.w	r3, r2, r3
 8006040:	43da      	mvns	r2, r3
 8006042:	4b21      	ldr	r3, [pc, #132]	; (80060c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4013      	ands	r3, r2
 8006048:	4a1f      	ldr	r2, [pc, #124]	; (80060c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800604a:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006052:	d10a      	bne.n	800606a <prvAddCurrentTaskToDelayedList+0x62>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d007      	beq.n	800606a <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800605a:	4b1a      	ldr	r3, [pc, #104]	; (80060c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3304      	adds	r3, #4
 8006060:	4619      	mov	r1, r3
 8006062:	481a      	ldr	r0, [pc, #104]	; (80060cc <prvAddCurrentTaskToDelayedList+0xc4>)
 8006064:	f7fd ff86 	bl	8003f74 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006068:	e026      	b.n	80060b8 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4413      	add	r3, r2
 8006070:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006072:	4b14      	ldr	r3, [pc, #80]	; (80060c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	429a      	cmp	r2, r3
 8006080:	d209      	bcs.n	8006096 <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006082:	4b13      	ldr	r3, [pc, #76]	; (80060d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3304      	adds	r3, #4
 800608c:	4619      	mov	r1, r3
 800608e:	4610      	mov	r0, r2
 8006090:	f7fd ff94 	bl	8003fbc <vListInsert>
}
 8006094:	e010      	b.n	80060b8 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006096:	4b0f      	ldr	r3, [pc, #60]	; (80060d4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3304      	adds	r3, #4
 80060a0:	4619      	mov	r1, r3
 80060a2:	4610      	mov	r0, r2
 80060a4:	f7fd ff8a 	bl	8003fbc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060a8:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <prvAddCurrentTaskToDelayedList+0xd0>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d202      	bcs.n	80060b8 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 80060b2:	4a09      	ldr	r2, [pc, #36]	; (80060d8 <prvAddCurrentTaskToDelayedList+0xd0>)
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	6013      	str	r3, [r2, #0]
}
 80060b8:	bf00      	nop
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20000194 	.word	0x20000194
 80060c4:	20000090 	.word	0x20000090
 80060c8:	20000198 	.word	0x20000198
 80060cc:	2000017c 	.word	0x2000017c
 80060d0:	2000014c 	.word	0x2000014c
 80060d4:	20000148 	.word	0x20000148
 80060d8:	200001b0 	.word	0x200001b0

080060dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08a      	sub	sp, #40	; 0x28
 80060e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060e6:	f000 faeb 	bl	80066c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060ea:	4b1c      	ldr	r3, [pc, #112]	; (800615c <xTimerCreateTimerTask+0x80>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d021      	beq.n	8006136 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060fa:	1d3a      	adds	r2, r7, #4
 80060fc:	f107 0108 	add.w	r1, r7, #8
 8006100:	f107 030c 	add.w	r3, r7, #12
 8006104:	4618      	mov	r0, r3
 8006106:	f000 ff85 	bl	8007014 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	9202      	str	r2, [sp, #8]
 8006112:	9301      	str	r3, [sp, #4]
 8006114:	2302      	movs	r3, #2
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	2300      	movs	r3, #0
 800611a:	460a      	mov	r2, r1
 800611c:	4910      	ldr	r1, [pc, #64]	; (8006160 <xTimerCreateTimerTask+0x84>)
 800611e:	4811      	ldr	r0, [pc, #68]	; (8006164 <xTimerCreateTimerTask+0x88>)
 8006120:	f7fe fcd6 	bl	8004ad0 <xTaskCreateStatic>
 8006124:	4603      	mov	r3, r0
 8006126:	4a10      	ldr	r2, [pc, #64]	; (8006168 <xTimerCreateTimerTask+0x8c>)
 8006128:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800612a:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <xTimerCreateTimerTask+0x8c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006132:	2301      	movs	r3, #1
 8006134:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10a      	bne.n	8006152 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	613b      	str	r3, [r7, #16]
}
 800614e:	bf00      	nop
 8006150:	e7fe      	b.n	8006150 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006152:	697b      	ldr	r3, [r7, #20]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	200001f4 	.word	0x200001f4
 8006160:	0800859c 	.word	0x0800859c
 8006164:	080062a1 	.word	0x080062a1
 8006168:	200001f8 	.word	0x200001f8

0800616c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08a      	sub	sp, #40	; 0x28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800617a:	2300      	movs	r3, #0
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	623b      	str	r3, [r7, #32]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800619a:	4b1a      	ldr	r3, [pc, #104]	; (8006204 <xTimerGenericCommand+0x98>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d02a      	beq.n	80061f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b05      	cmp	r3, #5
 80061b2:	dc18      	bgt.n	80061e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061b4:	f7ff fcb8 	bl	8005b28 <xTaskGetSchedulerState>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d109      	bne.n	80061d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061be:	4b11      	ldr	r3, [pc, #68]	; (8006204 <xTimerGenericCommand+0x98>)
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	f107 0114 	add.w	r1, r7, #20
 80061c6:	2300      	movs	r3, #0
 80061c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ca:	f7fe f899 	bl	8004300 <xQueueGenericSend>
 80061ce:	6278      	str	r0, [r7, #36]	; 0x24
 80061d0:	e012      	b.n	80061f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061d2:	4b0c      	ldr	r3, [pc, #48]	; (8006204 <xTimerGenericCommand+0x98>)
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	f107 0114 	add.w	r1, r7, #20
 80061da:	2300      	movs	r3, #0
 80061dc:	2200      	movs	r2, #0
 80061de:	f7fe f88f 	bl	8004300 <xQueueGenericSend>
 80061e2:	6278      	str	r0, [r7, #36]	; 0x24
 80061e4:	e008      	b.n	80061f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061e6:	4b07      	ldr	r3, [pc, #28]	; (8006204 <xTimerGenericCommand+0x98>)
 80061e8:	6818      	ldr	r0, [r3, #0]
 80061ea:	f107 0114 	add.w	r1, r7, #20
 80061ee:	2300      	movs	r3, #0
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	f7fe f983 	bl	80044fc <xQueueGenericSendFromISR>
 80061f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3728      	adds	r7, #40	; 0x28
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	200001f4 	.word	0x200001f4

08006208 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af02      	add	r7, sp, #8
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006212:	4b22      	ldr	r3, [pc, #136]	; (800629c <prvProcessExpiredTimer+0x94>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	3304      	adds	r3, #4
 8006220:	4618      	mov	r0, r3
 8006222:	f7fd ff04 	bl	800402e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b00      	cmp	r3, #0
 8006232:	d022      	beq.n	800627a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	699a      	ldr	r2, [r3, #24]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	18d1      	adds	r1, r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	6978      	ldr	r0, [r7, #20]
 8006242:	f000 f8d1 	bl	80063e8 <prvInsertTimerInActiveList>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01f      	beq.n	800628c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800624c:	2300      	movs	r3, #0
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	2300      	movs	r3, #0
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	2100      	movs	r1, #0
 8006256:	6978      	ldr	r0, [r7, #20]
 8006258:	f7ff ff88 	bl	800616c <xTimerGenericCommand>
 800625c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d113      	bne.n	800628c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	60fb      	str	r3, [r7, #12]
}
 8006276:	bf00      	nop
 8006278:	e7fe      	b.n	8006278 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006280:	f023 0301 	bic.w	r3, r3, #1
 8006284:	b2da      	uxtb	r2, r3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	6978      	ldr	r0, [r7, #20]
 8006292:	4798      	blx	r3
}
 8006294:	bf00      	nop
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	200001ec 	.word	0x200001ec

080062a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062a8:	f107 0308 	add.w	r3, r7, #8
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 f857 	bl	8006360 <prvGetNextExpireTime>
 80062b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4619      	mov	r1, r3
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f803 	bl	80062c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062be:	f000 f8d5 	bl	800646c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062c2:	e7f1      	b.n	80062a8 <prvTimerTask+0x8>

080062c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062ce:	f7fe fea7 	bl	8005020 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062d2:	f107 0308 	add.w	r3, r7, #8
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 f866 	bl	80063a8 <prvSampleTimeNow>
 80062dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d130      	bne.n	8006346 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10a      	bne.n	8006300 <prvProcessTimerOrBlockTask+0x3c>
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d806      	bhi.n	8006300 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062f2:	f7fe fea3 	bl	800503c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062f6:	68f9      	ldr	r1, [r7, #12]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff ff85 	bl	8006208 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062fe:	e024      	b.n	800634a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d008      	beq.n	8006318 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006306:	4b13      	ldr	r3, [pc, #76]	; (8006354 <prvProcessTimerOrBlockTask+0x90>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <prvProcessTimerOrBlockTask+0x50>
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <prvProcessTimerOrBlockTask+0x52>
 8006314:	2300      	movs	r3, #0
 8006316:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006318:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <prvProcessTimerOrBlockTask+0x94>)
 800631a:	6818      	ldr	r0, [r3, #0]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	4619      	mov	r1, r3
 8006326:	f7fe fb9f 	bl	8004a68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800632a:	f7fe fe87 	bl	800503c <xTaskResumeAll>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006334:	4b09      	ldr	r3, [pc, #36]	; (800635c <prvProcessTimerOrBlockTask+0x98>)
 8006336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	f3bf 8f6f 	isb	sy
}
 8006344:	e001      	b.n	800634a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006346:	f7fe fe79 	bl	800503c <xTaskResumeAll>
}
 800634a:	bf00      	nop
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	200001f0 	.word	0x200001f0
 8006358:	200001f4 	.word	0x200001f4
 800635c:	e000ed04 	.word	0xe000ed04

08006360 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006368:	4b0e      	ldr	r3, [pc, #56]	; (80063a4 <prvGetNextExpireTime+0x44>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <prvGetNextExpireTime+0x16>
 8006372:	2201      	movs	r2, #1
 8006374:	e000      	b.n	8006378 <prvGetNextExpireTime+0x18>
 8006376:	2200      	movs	r2, #0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d105      	bne.n	8006390 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006384:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <prvGetNextExpireTime+0x44>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	e001      	b.n	8006394 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006394:	68fb      	ldr	r3, [r7, #12]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	200001ec 	.word	0x200001ec

080063a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063b0:	f7fe fee0 	bl	8005174 <xTaskGetTickCount>
 80063b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063b6:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <prvSampleTimeNow+0x3c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d205      	bcs.n	80063cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063c0:	f000 f91a 	bl	80065f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	e002      	b.n	80063d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063d2:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <prvSampleTimeNow+0x3c>)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063d8:	68fb      	ldr	r3, [r7, #12]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	200001fc 	.word	0x200001fc

080063e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063f6:	2300      	movs	r3, #0
 80063f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	429a      	cmp	r2, r3
 800640c:	d812      	bhi.n	8006434 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	1ad2      	subs	r2, r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	429a      	cmp	r2, r3
 800641a:	d302      	bcc.n	8006422 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800641c:	2301      	movs	r3, #1
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	e01b      	b.n	800645a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006422:	4b10      	ldr	r3, [pc, #64]	; (8006464 <prvInsertTimerInActiveList+0x7c>)
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	3304      	adds	r3, #4
 800642a:	4619      	mov	r1, r3
 800642c:	4610      	mov	r0, r2
 800642e:	f7fd fdc5 	bl	8003fbc <vListInsert>
 8006432:	e012      	b.n	800645a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d206      	bcs.n	800644a <prvInsertTimerInActiveList+0x62>
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	429a      	cmp	r2, r3
 8006442:	d302      	bcc.n	800644a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006444:	2301      	movs	r3, #1
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	e007      	b.n	800645a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800644a:	4b07      	ldr	r3, [pc, #28]	; (8006468 <prvInsertTimerInActiveList+0x80>)
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3304      	adds	r3, #4
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f7fd fdb1 	bl	8003fbc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800645a:	697b      	ldr	r3, [r7, #20]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	200001f0 	.word	0x200001f0
 8006468:	200001ec 	.word	0x200001ec

0800646c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08c      	sub	sp, #48	; 0x30
 8006470:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006472:	e0ae      	b.n	80065d2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	f2c0 80aa 	blt.w	80065d0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d004      	beq.n	8006492 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	3304      	adds	r3, #4
 800648c:	4618      	mov	r0, r3
 800648e:	f7fd fdce 	bl	800402e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006492:	1d3b      	adds	r3, r7, #4
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff ff87 	bl	80063a8 <prvSampleTimeNow>
 800649a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b09      	cmp	r3, #9
 80064a0:	f200 8097 	bhi.w	80065d2 <prvProcessReceivedCommands+0x166>
 80064a4:	a201      	add	r2, pc, #4	; (adr r2, 80064ac <prvProcessReceivedCommands+0x40>)
 80064a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064aa:	bf00      	nop
 80064ac:	080064d5 	.word	0x080064d5
 80064b0:	080064d5 	.word	0x080064d5
 80064b4:	080064d5 	.word	0x080064d5
 80064b8:	08006549 	.word	0x08006549
 80064bc:	0800655d 	.word	0x0800655d
 80064c0:	080065a7 	.word	0x080065a7
 80064c4:	080064d5 	.word	0x080064d5
 80064c8:	080064d5 	.word	0x080064d5
 80064cc:	08006549 	.word	0x08006549
 80064d0:	0800655d 	.word	0x0800655d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064da:	f043 0301 	orr.w	r3, r3, #1
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	18d1      	adds	r1, r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a3a      	ldr	r2, [r7, #32]
 80064f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064f4:	f7ff ff78 	bl	80063e8 <prvInsertTimerInActiveList>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d069      	beq.n	80065d2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006504:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	d05e      	beq.n	80065d2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	441a      	add	r2, r3
 800651c:	2300      	movs	r3, #0
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	2300      	movs	r3, #0
 8006522:	2100      	movs	r1, #0
 8006524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006526:	f7ff fe21 	bl	800616c <xTimerGenericCommand>
 800652a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d14f      	bne.n	80065d2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	61bb      	str	r3, [r7, #24]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800654e:	f023 0301 	bic.w	r3, r3, #1
 8006552:	b2da      	uxtb	r2, r3
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800655a:	e03a      	b.n	80065d2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006562:	f043 0301 	orr.w	r3, r3, #1
 8006566:	b2da      	uxtb	r2, r3
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10a      	bne.n	8006592 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	617b      	str	r3, [r7, #20]
}
 800658e:	bf00      	nop
 8006590:	e7fe      	b.n	8006590 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	699a      	ldr	r2, [r3, #24]
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	18d1      	adds	r1, r2, r3
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	6a3a      	ldr	r2, [r7, #32]
 800659e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065a0:	f7ff ff22 	bl	80063e8 <prvInsertTimerInActiveList>
					break;
 80065a4:	e015      	b.n	80065d2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d103      	bne.n	80065bc <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80065b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065b6:	f000 fbdb 	bl	8006d70 <vPortFree>
 80065ba:	e00a      	b.n	80065d2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065c2:	f023 0301 	bic.w	r3, r3, #1
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065ce:	e000      	b.n	80065d2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80065d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065d2:	4b08      	ldr	r3, [pc, #32]	; (80065f4 <prvProcessReceivedCommands+0x188>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f107 0108 	add.w	r1, r7, #8
 80065da:	2200      	movs	r2, #0
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fe f829 	bl	8004634 <xQueueReceive>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f47f af45 	bne.w	8006474 <prvProcessReceivedCommands+0x8>
	}
}
 80065ea:	bf00      	nop
 80065ec:	bf00      	nop
 80065ee:	3728      	adds	r7, #40	; 0x28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	200001f4 	.word	0x200001f4

080065f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065fe:	e048      	b.n	8006692 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006600:	4b2d      	ldr	r3, [pc, #180]	; (80066b8 <prvSwitchTimerLists+0xc0>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800660a:	4b2b      	ldr	r3, [pc, #172]	; (80066b8 <prvSwitchTimerLists+0xc0>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	3304      	adds	r3, #4
 8006618:	4618      	mov	r0, r3
 800661a:	f7fd fd08 	bl	800402e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b00      	cmp	r3, #0
 8006632:	d02e      	beq.n	8006692 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4413      	add	r3, r2
 800663c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	429a      	cmp	r2, r3
 8006644:	d90e      	bls.n	8006664 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006652:	4b19      	ldr	r3, [pc, #100]	; (80066b8 <prvSwitchTimerLists+0xc0>)
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3304      	adds	r3, #4
 800665a:	4619      	mov	r1, r3
 800665c:	4610      	mov	r0, r2
 800665e:	f7fd fcad 	bl	8003fbc <vListInsert>
 8006662:	e016      	b.n	8006692 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006664:	2300      	movs	r3, #0
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	2300      	movs	r3, #0
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	2100      	movs	r1, #0
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f7ff fd7c 	bl	800616c <xTimerGenericCommand>
 8006674:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	603b      	str	r3, [r7, #0]
}
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006692:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <prvSwitchTimerLists+0xc0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1b1      	bne.n	8006600 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800669c:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <prvSwitchTimerLists+0xc0>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066a2:	4b06      	ldr	r3, [pc, #24]	; (80066bc <prvSwitchTimerLists+0xc4>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a04      	ldr	r2, [pc, #16]	; (80066b8 <prvSwitchTimerLists+0xc0>)
 80066a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066aa:	4a04      	ldr	r2, [pc, #16]	; (80066bc <prvSwitchTimerLists+0xc4>)
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	6013      	str	r3, [r2, #0]
}
 80066b0:	bf00      	nop
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	200001ec 	.word	0x200001ec
 80066bc:	200001f0 	.word	0x200001f0

080066c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066c6:	f000 f965 	bl	8006994 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066ca:	4b15      	ldr	r3, [pc, #84]	; (8006720 <prvCheckForValidListAndQueue+0x60>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d120      	bne.n	8006714 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066d2:	4814      	ldr	r0, [pc, #80]	; (8006724 <prvCheckForValidListAndQueue+0x64>)
 80066d4:	f7fd fc21 	bl	8003f1a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066d8:	4813      	ldr	r0, [pc, #76]	; (8006728 <prvCheckForValidListAndQueue+0x68>)
 80066da:	f7fd fc1e 	bl	8003f1a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066de:	4b13      	ldr	r3, [pc, #76]	; (800672c <prvCheckForValidListAndQueue+0x6c>)
 80066e0:	4a10      	ldr	r2, [pc, #64]	; (8006724 <prvCheckForValidListAndQueue+0x64>)
 80066e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066e4:	4b12      	ldr	r3, [pc, #72]	; (8006730 <prvCheckForValidListAndQueue+0x70>)
 80066e6:	4a10      	ldr	r2, [pc, #64]	; (8006728 <prvCheckForValidListAndQueue+0x68>)
 80066e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066ea:	2300      	movs	r3, #0
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	4b11      	ldr	r3, [pc, #68]	; (8006734 <prvCheckForValidListAndQueue+0x74>)
 80066f0:	4a11      	ldr	r2, [pc, #68]	; (8006738 <prvCheckForValidListAndQueue+0x78>)
 80066f2:	210c      	movs	r1, #12
 80066f4:	200a      	movs	r0, #10
 80066f6:	f7fd fd2d 	bl	8004154 <xQueueGenericCreateStatic>
 80066fa:	4603      	mov	r3, r0
 80066fc:	4a08      	ldr	r2, [pc, #32]	; (8006720 <prvCheckForValidListAndQueue+0x60>)
 80066fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006700:	4b07      	ldr	r3, [pc, #28]	; (8006720 <prvCheckForValidListAndQueue+0x60>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006708:	4b05      	ldr	r3, [pc, #20]	; (8006720 <prvCheckForValidListAndQueue+0x60>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	490b      	ldr	r1, [pc, #44]	; (800673c <prvCheckForValidListAndQueue+0x7c>)
 800670e:	4618      	mov	r0, r3
 8006710:	f7fe f980 	bl	8004a14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006714:	f000 f96e 	bl	80069f4 <vPortExitCritical>
}
 8006718:	bf00      	nop
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	200001f4 	.word	0x200001f4
 8006724:	200001c4 	.word	0x200001c4
 8006728:	200001d8 	.word	0x200001d8
 800672c:	200001ec 	.word	0x200001ec
 8006730:	200001f0 	.word	0x200001f0
 8006734:	20000278 	.word	0x20000278
 8006738:	20000200 	.word	0x20000200
 800673c:	080085a4 	.word	0x080085a4

08006740 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3b04      	subs	r3, #4
 8006750:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3b04      	subs	r3, #4
 800675e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f023 0201 	bic.w	r2, r3, #1
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3b04      	subs	r3, #4
 800676e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006770:	4a0c      	ldr	r2, [pc, #48]	; (80067a4 <pxPortInitialiseStack+0x64>)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3b14      	subs	r3, #20
 800677a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3b04      	subs	r3, #4
 8006786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f06f 0202 	mvn.w	r2, #2
 800678e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3b20      	subs	r3, #32
 8006794:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006796:	68fb      	ldr	r3, [r7, #12]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	080067a9 	.word	0x080067a9

080067a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067b2:	4b12      	ldr	r3, [pc, #72]	; (80067fc <prvTaskExitError+0x54>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ba:	d00a      	beq.n	80067d2 <prvTaskExitError+0x2a>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	60fb      	str	r3, [r7, #12]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <prvTaskExitError+0x28>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	60bb      	str	r3, [r7, #8]
}
 80067e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067e6:	bf00      	nop
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0fc      	beq.n	80067e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067ee:	bf00      	nop
 80067f0:	bf00      	nop
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	20000008 	.word	0x20000008

08006800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006800:	4b07      	ldr	r3, [pc, #28]	; (8006820 <pxCurrentTCBConst2>)
 8006802:	6819      	ldr	r1, [r3, #0]
 8006804:	6808      	ldr	r0, [r1, #0]
 8006806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680a:	f380 8809 	msr	PSP, r0
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f04f 0000 	mov.w	r0, #0
 8006816:	f380 8811 	msr	BASEPRI, r0
 800681a:	4770      	bx	lr
 800681c:	f3af 8000 	nop.w

08006820 <pxCurrentTCBConst2>:
 8006820:	20000090 	.word	0x20000090
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop

08006828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006828:	4808      	ldr	r0, [pc, #32]	; (800684c <prvPortStartFirstTask+0x24>)
 800682a:	6800      	ldr	r0, [r0, #0]
 800682c:	6800      	ldr	r0, [r0, #0]
 800682e:	f380 8808 	msr	MSP, r0
 8006832:	f04f 0000 	mov.w	r0, #0
 8006836:	f380 8814 	msr	CONTROL, r0
 800683a:	b662      	cpsie	i
 800683c:	b661      	cpsie	f
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	df00      	svc	0
 8006848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800684a:	bf00      	nop
 800684c:	e000ed08 	.word	0xe000ed08

08006850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006856:	4b46      	ldr	r3, [pc, #280]	; (8006970 <xPortStartScheduler+0x120>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a46      	ldr	r2, [pc, #280]	; (8006974 <xPortStartScheduler+0x124>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d10a      	bne.n	8006876 <xPortStartScheduler+0x26>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	613b      	str	r3, [r7, #16]
}
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006876:	4b3e      	ldr	r3, [pc, #248]	; (8006970 <xPortStartScheduler+0x120>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a3f      	ldr	r2, [pc, #252]	; (8006978 <xPortStartScheduler+0x128>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d10a      	bne.n	8006896 <xPortStartScheduler+0x46>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	60fb      	str	r3, [r7, #12]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006896:	4b39      	ldr	r3, [pc, #228]	; (800697c <xPortStartScheduler+0x12c>)
 8006898:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	22ff      	movs	r2, #255	; 0xff
 80068a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	4b31      	ldr	r3, [pc, #196]	; (8006980 <xPortStartScheduler+0x130>)
 80068bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068be:	4b31      	ldr	r3, [pc, #196]	; (8006984 <xPortStartScheduler+0x134>)
 80068c0:	2207      	movs	r2, #7
 80068c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068c4:	e009      	b.n	80068da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80068c6:	4b2f      	ldr	r3, [pc, #188]	; (8006984 <xPortStartScheduler+0x134>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	4a2d      	ldr	r2, [pc, #180]	; (8006984 <xPortStartScheduler+0x134>)
 80068ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068d0:	78fb      	ldrb	r3, [r7, #3]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e2:	2b80      	cmp	r3, #128	; 0x80
 80068e4:	d0ef      	beq.n	80068c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068e6:	4b27      	ldr	r3, [pc, #156]	; (8006984 <xPortStartScheduler+0x134>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f1c3 0307 	rsb	r3, r3, #7
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d00a      	beq.n	8006908 <xPortStartScheduler+0xb8>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	60bb      	str	r3, [r7, #8]
}
 8006904:	bf00      	nop
 8006906:	e7fe      	b.n	8006906 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006908:	4b1e      	ldr	r3, [pc, #120]	; (8006984 <xPortStartScheduler+0x134>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	4a1d      	ldr	r2, [pc, #116]	; (8006984 <xPortStartScheduler+0x134>)
 8006910:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006912:	4b1c      	ldr	r3, [pc, #112]	; (8006984 <xPortStartScheduler+0x134>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800691a:	4a1a      	ldr	r2, [pc, #104]	; (8006984 <xPortStartScheduler+0x134>)
 800691c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	b2da      	uxtb	r2, r3
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006926:	4b18      	ldr	r3, [pc, #96]	; (8006988 <xPortStartScheduler+0x138>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a17      	ldr	r2, [pc, #92]	; (8006988 <xPortStartScheduler+0x138>)
 800692c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006930:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006932:	4b15      	ldr	r3, [pc, #84]	; (8006988 <xPortStartScheduler+0x138>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a14      	ldr	r2, [pc, #80]	; (8006988 <xPortStartScheduler+0x138>)
 8006938:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800693c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800693e:	f000 f8dd 	bl	8006afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006942:	4b12      	ldr	r3, [pc, #72]	; (800698c <xPortStartScheduler+0x13c>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006948:	f000 f8fc 	bl	8006b44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800694c:	4b10      	ldr	r3, [pc, #64]	; (8006990 <xPortStartScheduler+0x140>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a0f      	ldr	r2, [pc, #60]	; (8006990 <xPortStartScheduler+0x140>)
 8006952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006956:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006958:	f7ff ff66 	bl	8006828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800695c:	f7fe fd62 	bl	8005424 <vTaskSwitchContext>
	prvTaskExitError();
 8006960:	f7ff ff22 	bl	80067a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	e000ed00 	.word	0xe000ed00
 8006974:	410fc271 	.word	0x410fc271
 8006978:	410fc270 	.word	0x410fc270
 800697c:	e000e400 	.word	0xe000e400
 8006980:	200002c8 	.word	0x200002c8
 8006984:	200002cc 	.word	0x200002cc
 8006988:	e000ed20 	.word	0xe000ed20
 800698c:	20000008 	.word	0x20000008
 8006990:	e000ef34 	.word	0xe000ef34

08006994 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	607b      	str	r3, [r7, #4]
}
 80069ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069ae:	4b0f      	ldr	r3, [pc, #60]	; (80069ec <vPortEnterCritical+0x58>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	4a0d      	ldr	r2, [pc, #52]	; (80069ec <vPortEnterCritical+0x58>)
 80069b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069b8:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <vPortEnterCritical+0x58>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d10f      	bne.n	80069e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069c0:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <vPortEnterCritical+0x5c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	603b      	str	r3, [r7, #0]
}
 80069dc:	bf00      	nop
 80069de:	e7fe      	b.n	80069de <vPortEnterCritical+0x4a>
	}
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	20000008 	.word	0x20000008
 80069f0:	e000ed04 	.word	0xe000ed04

080069f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069fa:	4b12      	ldr	r3, [pc, #72]	; (8006a44 <vPortExitCritical+0x50>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <vPortExitCritical+0x24>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	607b      	str	r3, [r7, #4]
}
 8006a14:	bf00      	nop
 8006a16:	e7fe      	b.n	8006a16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a18:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <vPortExitCritical+0x50>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	4a09      	ldr	r2, [pc, #36]	; (8006a44 <vPortExitCritical+0x50>)
 8006a20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a22:	4b08      	ldr	r3, [pc, #32]	; (8006a44 <vPortExitCritical+0x50>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d105      	bne.n	8006a36 <vPortExitCritical+0x42>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	f383 8811 	msr	BASEPRI, r3
}
 8006a34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	20000008 	.word	0x20000008
	...

08006a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a50:	f3ef 8009 	mrs	r0, PSP
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	4b15      	ldr	r3, [pc, #84]	; (8006ab0 <pxCurrentTCBConst>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	f01e 0f10 	tst.w	lr, #16
 8006a60:	bf08      	it	eq
 8006a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6a:	6010      	str	r0, [r2, #0]
 8006a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a74:	f380 8811 	msr	BASEPRI, r0
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f7fe fcd0 	bl	8005424 <vTaskSwitchContext>
 8006a84:	f04f 0000 	mov.w	r0, #0
 8006a88:	f380 8811 	msr	BASEPRI, r0
 8006a8c:	bc09      	pop	{r0, r3}
 8006a8e:	6819      	ldr	r1, [r3, #0]
 8006a90:	6808      	ldr	r0, [r1, #0]
 8006a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a96:	f01e 0f10 	tst.w	lr, #16
 8006a9a:	bf08      	it	eq
 8006a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006aa0:	f380 8809 	msr	PSP, r0
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	f3af 8000 	nop.w

08006ab0 <pxCurrentTCBConst>:
 8006ab0:	20000090 	.word	0x20000090
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop

08006ab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	607b      	str	r3, [r7, #4]
}
 8006ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ad2:	f7fe fbef 	bl	80052b4 <xTaskIncrementTick>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <SysTick_Handler+0x40>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	f383 8811 	msr	BASEPRI, r3
}
 8006aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006af0:	bf00      	nop
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	e000ed04 	.word	0xe000ed04

08006afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b00:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <vPortSetupTimerInterrupt+0x34>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b06:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <vPortSetupTimerInterrupt+0x38>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <vPortSetupTimerInterrupt+0x3c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <vPortSetupTimerInterrupt+0x40>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	099b      	lsrs	r3, r3, #6
 8006b18:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <vPortSetupTimerInterrupt+0x44>)
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b1e:	4b04      	ldr	r3, [pc, #16]	; (8006b30 <vPortSetupTimerInterrupt+0x34>)
 8006b20:	2207      	movs	r2, #7
 8006b22:	601a      	str	r2, [r3, #0]
}
 8006b24:	bf00      	nop
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	e000e010 	.word	0xe000e010
 8006b34:	e000e018 	.word	0xe000e018
 8006b38:	2000000c 	.word	0x2000000c
 8006b3c:	10624dd3 	.word	0x10624dd3
 8006b40:	e000e014 	.word	0xe000e014

08006b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b54 <vPortEnableVFP+0x10>
 8006b48:	6801      	ldr	r1, [r0, #0]
 8006b4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b4e:	6001      	str	r1, [r0, #0]
 8006b50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b52:	bf00      	nop
 8006b54:	e000ed88 	.word	0xe000ed88

08006b58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b5e:	f3ef 8305 	mrs	r3, IPSR
 8006b62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b0f      	cmp	r3, #15
 8006b68:	d914      	bls.n	8006b94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b6a:	4a17      	ldr	r2, [pc, #92]	; (8006bc8 <vPortValidateInterruptPriority+0x70>)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b74:	4b15      	ldr	r3, [pc, #84]	; (8006bcc <vPortValidateInterruptPriority+0x74>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	7afa      	ldrb	r2, [r7, #11]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d20a      	bcs.n	8006b94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	607b      	str	r3, [r7, #4]
}
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b94:	4b0e      	ldr	r3, [pc, #56]	; (8006bd0 <vPortValidateInterruptPriority+0x78>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b9c:	4b0d      	ldr	r3, [pc, #52]	; (8006bd4 <vPortValidateInterruptPriority+0x7c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d90a      	bls.n	8006bba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	603b      	str	r3, [r7, #0]
}
 8006bb6:	bf00      	nop
 8006bb8:	e7fe      	b.n	8006bb8 <vPortValidateInterruptPriority+0x60>
	}
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	e000e3f0 	.word	0xe000e3f0
 8006bcc:	200002c8 	.word	0x200002c8
 8006bd0:	e000ed0c 	.word	0xe000ed0c
 8006bd4:	200002cc 	.word	0x200002cc

08006bd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08a      	sub	sp, #40	; 0x28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006be4:	f7fe fa1c 	bl	8005020 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006be8:	4b5b      	ldr	r3, [pc, #364]	; (8006d58 <pvPortMalloc+0x180>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bf0:	f000 f920 	bl	8006e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bf4:	4b59      	ldr	r3, [pc, #356]	; (8006d5c <pvPortMalloc+0x184>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f040 8093 	bne.w	8006d28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01d      	beq.n	8006c44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c08:	2208      	movs	r2, #8
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d014      	beq.n	8006c44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f023 0307 	bic.w	r3, r3, #7
 8006c20:	3308      	adds	r3, #8
 8006c22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <pvPortMalloc+0x6c>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	617b      	str	r3, [r7, #20]
}
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d06e      	beq.n	8006d28 <pvPortMalloc+0x150>
 8006c4a:	4b45      	ldr	r3, [pc, #276]	; (8006d60 <pvPortMalloc+0x188>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d869      	bhi.n	8006d28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c54:	4b43      	ldr	r3, [pc, #268]	; (8006d64 <pvPortMalloc+0x18c>)
 8006c56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c58:	4b42      	ldr	r3, [pc, #264]	; (8006d64 <pvPortMalloc+0x18c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c5e:	e004      	b.n	8006c6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d903      	bls.n	8006c7c <pvPortMalloc+0xa4>
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1f1      	bne.n	8006c60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c7c:	4b36      	ldr	r3, [pc, #216]	; (8006d58 <pvPortMalloc+0x180>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d050      	beq.n	8006d28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2208      	movs	r2, #8
 8006c8c:	4413      	add	r3, r2
 8006c8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	1ad2      	subs	r2, r2, r3
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d91f      	bls.n	8006ce8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4413      	add	r3, r2
 8006cae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <pvPortMalloc+0xf8>
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	613b      	str	r3, [r7, #16]
}
 8006ccc:	bf00      	nop
 8006cce:	e7fe      	b.n	8006cce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	1ad2      	subs	r2, r2, r3
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ce2:	69b8      	ldr	r0, [r7, #24]
 8006ce4:	f000 f908 	bl	8006ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ce8:	4b1d      	ldr	r3, [pc, #116]	; (8006d60 <pvPortMalloc+0x188>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	4a1b      	ldr	r2, [pc, #108]	; (8006d60 <pvPortMalloc+0x188>)
 8006cf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cf6:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <pvPortMalloc+0x188>)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4b1b      	ldr	r3, [pc, #108]	; (8006d68 <pvPortMalloc+0x190>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d203      	bcs.n	8006d0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d02:	4b17      	ldr	r3, [pc, #92]	; (8006d60 <pvPortMalloc+0x188>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <pvPortMalloc+0x190>)
 8006d08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	4b13      	ldr	r3, [pc, #76]	; (8006d5c <pvPortMalloc+0x184>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	431a      	orrs	r2, r3
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d1e:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <pvPortMalloc+0x194>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3301      	adds	r3, #1
 8006d24:	4a11      	ldr	r2, [pc, #68]	; (8006d6c <pvPortMalloc+0x194>)
 8006d26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d28:	f7fe f988 	bl	800503c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <pvPortMalloc+0x174>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	60fb      	str	r3, [r7, #12]
}
 8006d48:	bf00      	nop
 8006d4a:	e7fe      	b.n	8006d4a <pvPortMalloc+0x172>
	return pvReturn;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3728      	adds	r7, #40	; 0x28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20003ed8 	.word	0x20003ed8
 8006d5c:	20003eec 	.word	0x20003eec
 8006d60:	20003edc 	.word	0x20003edc
 8006d64:	20003ed0 	.word	0x20003ed0
 8006d68:	20003ee0 	.word	0x20003ee0
 8006d6c:	20003ee4 	.word	0x20003ee4

08006d70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d04d      	beq.n	8006e1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d82:	2308      	movs	r3, #8
 8006d84:	425b      	negs	r3, r3
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4413      	add	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	4b24      	ldr	r3, [pc, #144]	; (8006e28 <vPortFree+0xb8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10a      	bne.n	8006db4 <vPortFree+0x44>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	60fb      	str	r3, [r7, #12]
}
 8006db0:	bf00      	nop
 8006db2:	e7fe      	b.n	8006db2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <vPortFree+0x62>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	60bb      	str	r3, [r7, #8]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <vPortFree+0xb8>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01e      	beq.n	8006e1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d11a      	bne.n	8006e1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	4b0e      	ldr	r3, [pc, #56]	; (8006e28 <vPortFree+0xb8>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	43db      	mvns	r3, r3
 8006df2:	401a      	ands	r2, r3
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006df8:	f7fe f912 	bl	8005020 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	4b0a      	ldr	r3, [pc, #40]	; (8006e2c <vPortFree+0xbc>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4413      	add	r3, r2
 8006e06:	4a09      	ldr	r2, [pc, #36]	; (8006e2c <vPortFree+0xbc>)
 8006e08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e0a:	6938      	ldr	r0, [r7, #16]
 8006e0c:	f000 f874 	bl	8006ef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e10:	4b07      	ldr	r3, [pc, #28]	; (8006e30 <vPortFree+0xc0>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3301      	adds	r3, #1
 8006e16:	4a06      	ldr	r2, [pc, #24]	; (8006e30 <vPortFree+0xc0>)
 8006e18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e1a:	f7fe f90f 	bl	800503c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e1e:	bf00      	nop
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20003eec 	.word	0x20003eec
 8006e2c:	20003edc 	.word	0x20003edc
 8006e30:	20003ee8 	.word	0x20003ee8

08006e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e40:	4b27      	ldr	r3, [pc, #156]	; (8006ee0 <prvHeapInit+0xac>)
 8006e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00c      	beq.n	8006e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3307      	adds	r3, #7
 8006e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 0307 	bic.w	r3, r3, #7
 8006e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	4a1f      	ldr	r2, [pc, #124]	; (8006ee0 <prvHeapInit+0xac>)
 8006e64:	4413      	add	r3, r2
 8006e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e6c:	4a1d      	ldr	r2, [pc, #116]	; (8006ee4 <prvHeapInit+0xb0>)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e72:	4b1c      	ldr	r3, [pc, #112]	; (8006ee4 <prvHeapInit+0xb0>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e80:	2208      	movs	r2, #8
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	1a9b      	subs	r3, r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0307 	bic.w	r3, r3, #7
 8006e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4a15      	ldr	r2, [pc, #84]	; (8006ee8 <prvHeapInit+0xb4>)
 8006e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e96:	4b14      	ldr	r3, [pc, #80]	; (8006ee8 <prvHeapInit+0xb4>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e9e:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <prvHeapInit+0xb4>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	1ad2      	subs	r2, r2, r3
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006eb4:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <prvHeapInit+0xb4>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	4a0a      	ldr	r2, [pc, #40]	; (8006eec <prvHeapInit+0xb8>)
 8006ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	4a09      	ldr	r2, [pc, #36]	; (8006ef0 <prvHeapInit+0xbc>)
 8006eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ecc:	4b09      	ldr	r3, [pc, #36]	; (8006ef4 <prvHeapInit+0xc0>)
 8006ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ed2:	601a      	str	r2, [r3, #0]
}
 8006ed4:	bf00      	nop
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	200002d0 	.word	0x200002d0
 8006ee4:	20003ed0 	.word	0x20003ed0
 8006ee8:	20003ed8 	.word	0x20003ed8
 8006eec:	20003ee0 	.word	0x20003ee0
 8006ef0:	20003edc 	.word	0x20003edc
 8006ef4:	20003eec 	.word	0x20003eec

08006ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f00:	4b28      	ldr	r3, [pc, #160]	; (8006fa4 <prvInsertBlockIntoFreeList+0xac>)
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	e002      	b.n	8006f0c <prvInsertBlockIntoFreeList+0x14>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d8f7      	bhi.n	8006f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	4413      	add	r3, r2
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d108      	bne.n	8006f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	441a      	add	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	441a      	add	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d118      	bne.n	8006f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d00d      	beq.n	8006f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	441a      	add	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	e008      	b.n	8006f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f76:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	e003      	b.n	8006f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d002      	beq.n	8006f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f96:	bf00      	nop
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	20003ed0 	.word	0x20003ed0
 8006fa8:	20003ed8 	.word	0x20003ed8

08006fac <configureTimerForRunTimeStats>:
uint32_t tim4_ov_counter=0;
extern TIM_HandleTypeDef htim4;

/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0

}
 8006fb0:	bf00      	nop
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
	...

08006fbc <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0
	return ((tim4_ov_counter << 16) + (uint32_t)__HAL_TIM_GET_COUNTER(&htim4));
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <getRunTimeCounterValue+0x1c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	041a      	lsls	r2, r3, #16
 8006fc6:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <getRunTimeCounterValue+0x20>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fcc:	4413      	add	r3, r2
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	20003ef0 	.word	0x20003ef0
 8006fdc:	20004670 	.word	0x20004670

08006fe0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4a07      	ldr	r2, [pc, #28]	; (800700c <vApplicationGetIdleTaskMemory+0x2c>)
 8006ff0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	4a06      	ldr	r2, [pc, #24]	; (8007010 <vApplicationGetIdleTaskMemory+0x30>)
 8006ff6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2280      	movs	r2, #128	; 0x80
 8006ffc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8006ffe:	bf00      	nop
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	20003ef4 	.word	0x20003ef4
 8007010:	20003f54 	.word	0x20003f54

08007014 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4a07      	ldr	r2, [pc, #28]	; (8007040 <vApplicationGetTimerTaskMemory+0x2c>)
 8007024:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	4a06      	ldr	r2, [pc, #24]	; (8007044 <vApplicationGetTimerTaskMemory+0x30>)
 800702a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007032:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8007034:	bf00      	nop
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	20004154 	.word	0x20004154
 8007044:	200041b4 	.word	0x200041b4

08007048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007048:	b5b0      	push	{r4, r5, r7, lr}
 800704a:	b0a4      	sub	sp, #144	; 0x90
 800704c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800704e:	f7f9 fab3 	bl	80005b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007052:	f000 f891 	bl	8007178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007056:	f000 fa19 	bl	800748c <MX_GPIO_Init>
  MX_DMA_Init();
 800705a:	f000 f9ef 	bl	800743c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800705e:	f000 f9c3 	bl	80073e8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8007062:	f000 f8f7 	bl	8007254 <MX_ADC1_Init>
  MX_TIM4_Init();
 8007066:	f000 f949 	bl	80072fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);
 800706a:	4837      	ldr	r0, [pc, #220]	; (8007148 <main+0x100>)
 800706c:	f7fb f9ee 	bl	800244c <HAL_TIM_Base_Start_IT>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of uartTxQueue */
  osMessageQDef(uartTxQueue, 10, uint8_t *);
 8007070:	4b36      	ldr	r3, [pc, #216]	; (800714c <main+0x104>)
 8007072:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8007076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007078:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uartTxQueueHandle = osMessageCreate(osMessageQ(uartTxQueue), NULL);
 800707c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f7fc ff21 	bl	8003eca <osMessageCreate>
 8007088:	4603      	mov	r3, r0
 800708a:	4a31      	ldr	r2, [pc, #196]	; (8007150 <main+0x108>)
 800708c:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartRxQueue */
  osMessageQDef(uartRxQueue, 10, uint8_t*);
 800708e:	4b2f      	ldr	r3, [pc, #188]	; (800714c <main+0x104>)
 8007090:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8007094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uartRxQueueHandle = osMessageCreate(osMessageQ(uartRxQueue), NULL);
 800709a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800709e:	2100      	movs	r1, #0
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fc ff12 	bl	8003eca <osMessageCreate>
 80070a6:	4603      	mov	r3, r0
 80070a8:	4a2a      	ldr	r2, [pc, #168]	; (8007154 <main+0x10c>)
 80070aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LEDTask */
  osThreadDef(LEDTask, StartLEDTask, osPriorityNormal, 0, 128);
 80070ac:	4b2a      	ldr	r3, [pc, #168]	; (8007158 <main+0x110>)
 80070ae:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80070b2:	461d      	mov	r5, r3
 80070b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80070bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDTaskHandle = osThreadCreate(osThread(LEDTask), NULL);
 80070c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80070c4:	2100      	movs	r1, #0
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fc fe9f 	bl	8003e0a <osThreadCreate>
 80070cc:	4603      	mov	r3, r0
 80070ce:	4a23      	ldr	r2, [pc, #140]	; (800715c <main+0x114>)
 80070d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartTxTask */
  osThreadDef(uartTxTask, StartUartTxTask, osPriorityNormal, 0, 128);
 80070d2:	4b23      	ldr	r3, [pc, #140]	; (8007160 <main+0x118>)
 80070d4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80070d8:	461d      	mov	r5, r3
 80070da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80070e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTxTaskHandle = osThreadCreate(osThread(uartTxTask), NULL);
 80070e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80070ea:	2100      	movs	r1, #0
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fc fe8c 	bl	8003e0a <osThreadCreate>
 80070f2:	4603      	mov	r3, r0
 80070f4:	4a1b      	ldr	r2, [pc, #108]	; (8007164 <main+0x11c>)
 80070f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of statsTask */
  osThreadDef(statsTask, StartStatsTask, osPriorityLow, 0, 260);
 80070f8:	4b1b      	ldr	r3, [pc, #108]	; (8007168 <main+0x120>)
 80070fa:	f107 041c 	add.w	r4, r7, #28
 80070fe:	461d      	mov	r5, r3
 8007100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007104:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007108:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  statsTaskHandle = osThreadCreate(osThread(statsTask), NULL);
 800710c:	f107 031c 	add.w	r3, r7, #28
 8007110:	2100      	movs	r1, #0
 8007112:	4618      	mov	r0, r3
 8007114:	f7fc fe79 	bl	8003e0a <osThreadCreate>
 8007118:	4603      	mov	r3, r0
 800711a:	4a14      	ldr	r2, [pc, #80]	; (800716c <main+0x124>)
 800711c:	6013      	str	r3, [r2, #0]

  /* definition and creation of adcTask */
  osThreadDef(adcTask, StartTask04, osPriorityAboveNormal, 0, 128);
 800711e:	4b14      	ldr	r3, [pc, #80]	; (8007170 <main+0x128>)
 8007120:	463c      	mov	r4, r7
 8007122:	461d      	mov	r5, r3
 8007124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007128:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800712c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcTaskHandle = osThreadCreate(osThread(adcTask), NULL);
 8007130:	463b      	mov	r3, r7
 8007132:	2100      	movs	r1, #0
 8007134:	4618      	mov	r0, r3
 8007136:	f7fc fe68 	bl	8003e0a <osThreadCreate>
 800713a:	4603      	mov	r3, r0
 800713c:	4a0d      	ldr	r2, [pc, #52]	; (8007174 <main+0x12c>)
 800713e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8007140:	f7fc fe5c 	bl	8003dfc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007144:	e7fe      	b.n	8007144 <main+0xfc>
 8007146:	bf00      	nop
 8007148:	20004670 	.word	0x20004670
 800714c:	080085d4 	.word	0x080085d4
 8007150:	20004764 	.word	0x20004764
 8007154:	2000466c 	.word	0x2000466c
 8007158:	080085e4 	.word	0x080085e4
 800715c:	20004608 	.word	0x20004608
 8007160:	08008600 	.word	0x08008600
 8007164:	200047b0 	.word	0x200047b0
 8007168:	0800861c 	.word	0x0800861c
 800716c:	20004768 	.word	0x20004768
 8007170:	08008638 	.word	0x08008638
 8007174:	200046b8 	.word	0x200046b8

08007178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b094      	sub	sp, #80	; 0x50
 800717c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800717e:	f107 031c 	add.w	r3, r7, #28
 8007182:	2234      	movs	r2, #52	; 0x34
 8007184:	2100      	movs	r1, #0
 8007186:	4618      	mov	r0, r3
 8007188:	f000 fdb4 	bl	8007cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800718c:	f107 0308 	add.w	r3, r7, #8
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	605a      	str	r2, [r3, #4]
 8007196:	609a      	str	r2, [r3, #8]
 8007198:	60da      	str	r2, [r3, #12]
 800719a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800719c:	2300      	movs	r3, #0
 800719e:	607b      	str	r3, [r7, #4]
 80071a0:	4b2a      	ldr	r3, [pc, #168]	; (800724c <SystemClock_Config+0xd4>)
 80071a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a4:	4a29      	ldr	r2, [pc, #164]	; (800724c <SystemClock_Config+0xd4>)
 80071a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071aa:	6413      	str	r3, [r2, #64]	; 0x40
 80071ac:	4b27      	ldr	r3, [pc, #156]	; (800724c <SystemClock_Config+0xd4>)
 80071ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b4:	607b      	str	r3, [r7, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80071b8:	2300      	movs	r3, #0
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	4b24      	ldr	r3, [pc, #144]	; (8007250 <SystemClock_Config+0xd8>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80071c4:	4a22      	ldr	r2, [pc, #136]	; (8007250 <SystemClock_Config+0xd8>)
 80071c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071ca:	6013      	str	r3, [r2, #0]
 80071cc:	4b20      	ldr	r3, [pc, #128]	; (8007250 <SystemClock_Config+0xd8>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80071d4:	603b      	str	r3, [r7, #0]
 80071d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80071d8:	2302      	movs	r3, #2
 80071da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80071dc:	2301      	movs	r3, #1
 80071de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80071e0:	2310      	movs	r3, #16
 80071e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80071e4:	2302      	movs	r3, #2
 80071e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80071e8:	2300      	movs	r3, #0
 80071ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80071ec:	2310      	movs	r3, #16
 80071ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80071f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80071f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80071f6:	2304      	movs	r3, #4
 80071f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80071fa:	2302      	movs	r3, #2
 80071fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80071fe:	2302      	movs	r3, #2
 8007200:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007202:	f107 031c 	add.w	r3, r7, #28
 8007206:	4618      	mov	r0, r3
 8007208:	f7fa fe32 	bl	8001e70 <HAL_RCC_OscConfig>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d001      	beq.n	8007216 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8007212:	f000 fa9b 	bl	800774c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007216:	230f      	movs	r3, #15
 8007218:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800721a:	2302      	movs	r3, #2
 800721c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800721e:	2300      	movs	r3, #0
 8007220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007226:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007228:	2300      	movs	r3, #0
 800722a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800722c:	f107 0308 	add.w	r3, r7, #8
 8007230:	2102      	movs	r1, #2
 8007232:	4618      	mov	r0, r3
 8007234:	f7fa fb1e 	bl	8001874 <HAL_RCC_ClockConfig>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800723e:	f000 fa85 	bl	800774c <Error_Handler>
  }
}
 8007242:	bf00      	nop
 8007244:	3750      	adds	r7, #80	; 0x50
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	40023800 	.word	0x40023800
 8007250:	40007000 	.word	0x40007000

08007254 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800725a:	463b      	mov	r3, r7
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	605a      	str	r2, [r3, #4]
 8007262:	609a      	str	r2, [r3, #8]
 8007264:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8007266:	4b21      	ldr	r3, [pc, #132]	; (80072ec <MX_ADC1_Init+0x98>)
 8007268:	4a21      	ldr	r2, [pc, #132]	; (80072f0 <MX_ADC1_Init+0x9c>)
 800726a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800726c:	4b1f      	ldr	r3, [pc, #124]	; (80072ec <MX_ADC1_Init+0x98>)
 800726e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007272:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007274:	4b1d      	ldr	r3, [pc, #116]	; (80072ec <MX_ADC1_Init+0x98>)
 8007276:	2200      	movs	r2, #0
 8007278:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800727a:	4b1c      	ldr	r3, [pc, #112]	; (80072ec <MX_ADC1_Init+0x98>)
 800727c:	2200      	movs	r2, #0
 800727e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007280:	4b1a      	ldr	r3, [pc, #104]	; (80072ec <MX_ADC1_Init+0x98>)
 8007282:	2200      	movs	r2, #0
 8007284:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007286:	4b19      	ldr	r3, [pc, #100]	; (80072ec <MX_ADC1_Init+0x98>)
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800728e:	4b17      	ldr	r3, [pc, #92]	; (80072ec <MX_ADC1_Init+0x98>)
 8007290:	2200      	movs	r2, #0
 8007292:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007294:	4b15      	ldr	r3, [pc, #84]	; (80072ec <MX_ADC1_Init+0x98>)
 8007296:	4a17      	ldr	r2, [pc, #92]	; (80072f4 <MX_ADC1_Init+0xa0>)
 8007298:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800729a:	4b14      	ldr	r3, [pc, #80]	; (80072ec <MX_ADC1_Init+0x98>)
 800729c:	2200      	movs	r2, #0
 800729e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80072a0:	4b12      	ldr	r3, [pc, #72]	; (80072ec <MX_ADC1_Init+0x98>)
 80072a2:	2201      	movs	r2, #1
 80072a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80072a6:	4b11      	ldr	r3, [pc, #68]	; (80072ec <MX_ADC1_Init+0x98>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80072ae:	4b0f      	ldr	r3, [pc, #60]	; (80072ec <MX_ADC1_Init+0x98>)
 80072b0:	2201      	movs	r2, #1
 80072b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80072b4:	480d      	ldr	r0, [pc, #52]	; (80072ec <MX_ADC1_Init+0x98>)
 80072b6:	f7f9 f9c1 	bl	800063c <HAL_ADC_Init>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80072c0:	f000 fa44 	bl	800774c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80072c4:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <MX_ADC1_Init+0xa4>)
 80072c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80072c8:	2301      	movs	r3, #1
 80072ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80072cc:	2300      	movs	r3, #0
 80072ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80072d0:	463b      	mov	r3, r7
 80072d2:	4619      	mov	r1, r3
 80072d4:	4805      	ldr	r0, [pc, #20]	; (80072ec <MX_ADC1_Init+0x98>)
 80072d6:	f7f9 f9f5 	bl	80006c4 <HAL_ADC_ConfigChannel>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80072e0:	f000 fa34 	bl	800774c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80072e4:	bf00      	nop
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	200046bc 	.word	0x200046bc
 80072f0:	40012000 	.word	0x40012000
 80072f4:	0f000001 	.word	0x0f000001
 80072f8:	10000012 	.word	0x10000012

080072fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08e      	sub	sp, #56	; 0x38
 8007300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	605a      	str	r2, [r3, #4]
 800730c:	609a      	str	r2, [r3, #8]
 800730e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007310:	f107 0320 	add.w	r3, r7, #32
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800731a:	1d3b      	adds	r3, r7, #4
 800731c:	2200      	movs	r2, #0
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	605a      	str	r2, [r3, #4]
 8007322:	609a      	str	r2, [r3, #8]
 8007324:	60da      	str	r2, [r3, #12]
 8007326:	611a      	str	r2, [r3, #16]
 8007328:	615a      	str	r2, [r3, #20]
 800732a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800732c:	4b2c      	ldr	r3, [pc, #176]	; (80073e0 <MX_TIM4_Init+0xe4>)
 800732e:	4a2d      	ldr	r2, [pc, #180]	; (80073e4 <MX_TIM4_Init+0xe8>)
 8007330:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8007332:	4b2b      	ldr	r3, [pc, #172]	; (80073e0 <MX_TIM4_Init+0xe4>)
 8007334:	2253      	movs	r2, #83	; 0x53
 8007336:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007338:	4b29      	ldr	r3, [pc, #164]	; (80073e0 <MX_TIM4_Init+0xe4>)
 800733a:	2200      	movs	r2, #0
 800733c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800733e:	4b28      	ldr	r3, [pc, #160]	; (80073e0 <MX_TIM4_Init+0xe4>)
 8007340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007344:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007346:	4b26      	ldr	r3, [pc, #152]	; (80073e0 <MX_TIM4_Init+0xe4>)
 8007348:	2200      	movs	r2, #0
 800734a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800734c:	4b24      	ldr	r3, [pc, #144]	; (80073e0 <MX_TIM4_Init+0xe4>)
 800734e:	2280      	movs	r2, #128	; 0x80
 8007350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007352:	4823      	ldr	r0, [pc, #140]	; (80073e0 <MX_TIM4_Init+0xe4>)
 8007354:	f7fb f82a 	bl	80023ac <HAL_TIM_Base_Init>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800735e:	f000 f9f5 	bl	800774c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007366:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007368:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800736c:	4619      	mov	r1, r3
 800736e:	481c      	ldr	r0, [pc, #112]	; (80073e0 <MX_TIM4_Init+0xe4>)
 8007370:	f7fb fa96 	bl	80028a0 <HAL_TIM_ConfigClockSource>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800737a:	f000 f9e7 	bl	800774c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800737e:	4818      	ldr	r0, [pc, #96]	; (80073e0 <MX_TIM4_Init+0xe4>)
 8007380:	f7fb f8d4 	bl	800252c <HAL_TIM_OC_Init>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800738a:	f000 f9df 	bl	800774c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800738e:	2300      	movs	r3, #0
 8007390:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007392:	2300      	movs	r3, #0
 8007394:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007396:	f107 0320 	add.w	r3, r7, #32
 800739a:	4619      	mov	r1, r3
 800739c:	4810      	ldr	r0, [pc, #64]	; (80073e0 <MX_TIM4_Init+0xe4>)
 800739e:	f7fb fe55 	bl	800304c <HAL_TIMEx_MasterConfigSynchronization>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80073a8:	f000 f9d0 	bl	800774c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80073ac:	2330      	movs	r3, #48	; 0x30
 80073ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 80073b0:	230a      	movs	r3, #10
 80073b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80073b4:	2300      	movs	r3, #0
 80073b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80073b8:	2300      	movs	r3, #0
 80073ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80073bc:	1d3b      	adds	r3, r7, #4
 80073be:	2200      	movs	r2, #0
 80073c0:	4619      	mov	r1, r3
 80073c2:	4807      	ldr	r0, [pc, #28]	; (80073e0 <MX_TIM4_Init+0xe4>)
 80073c4:	f7fb fa14 	bl	80027f0 <HAL_TIM_OC_ConfigChannel>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80073ce:	f000 f9bd 	bl	800774c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80073d2:	4803      	ldr	r0, [pc, #12]	; (80073e0 <MX_TIM4_Init+0xe4>)
 80073d4:	f000 fa4c 	bl	8007870 <HAL_TIM_MspPostInit>

}
 80073d8:	bf00      	nop
 80073da:	3738      	adds	r7, #56	; 0x38
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	20004670 	.word	0x20004670
 80073e4:	40000800 	.word	0x40000800

080073e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80073ec:	4b11      	ldr	r3, [pc, #68]	; (8007434 <MX_USART2_UART_Init+0x4c>)
 80073ee:	4a12      	ldr	r2, [pc, #72]	; (8007438 <MX_USART2_UART_Init+0x50>)
 80073f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80073f2:	4b10      	ldr	r3, [pc, #64]	; (8007434 <MX_USART2_UART_Init+0x4c>)
 80073f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80073f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80073fa:	4b0e      	ldr	r3, [pc, #56]	; (8007434 <MX_USART2_UART_Init+0x4c>)
 80073fc:	2200      	movs	r2, #0
 80073fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007400:	4b0c      	ldr	r3, [pc, #48]	; (8007434 <MX_USART2_UART_Init+0x4c>)
 8007402:	2200      	movs	r2, #0
 8007404:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007406:	4b0b      	ldr	r3, [pc, #44]	; (8007434 <MX_USART2_UART_Init+0x4c>)
 8007408:	2200      	movs	r2, #0
 800740a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800740c:	4b09      	ldr	r3, [pc, #36]	; (8007434 <MX_USART2_UART_Init+0x4c>)
 800740e:	220c      	movs	r2, #12
 8007410:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007412:	4b08      	ldr	r3, [pc, #32]	; (8007434 <MX_USART2_UART_Init+0x4c>)
 8007414:	2200      	movs	r2, #0
 8007416:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007418:	4b06      	ldr	r3, [pc, #24]	; (8007434 <MX_USART2_UART_Init+0x4c>)
 800741a:	2200      	movs	r2, #0
 800741c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800741e:	4805      	ldr	r0, [pc, #20]	; (8007434 <MX_USART2_UART_Init+0x4c>)
 8007420:	f7fb fea4 	bl	800316c <HAL_UART_Init>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800742a:	f000 f98f 	bl	800774c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800742e:	bf00      	nop
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	2000476c 	.word	0x2000476c
 8007438:	40004400 	.word	0x40004400

0800743c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007442:	2300      	movs	r3, #0
 8007444:	607b      	str	r3, [r7, #4]
 8007446:	4b10      	ldr	r3, [pc, #64]	; (8007488 <MX_DMA_Init+0x4c>)
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	4a0f      	ldr	r2, [pc, #60]	; (8007488 <MX_DMA_Init+0x4c>)
 800744c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007450:	6313      	str	r3, [r2, #48]	; 0x30
 8007452:	4b0d      	ldr	r3, [pc, #52]	; (8007488 <MX_DMA_Init+0x4c>)
 8007454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800745a:	607b      	str	r3, [r7, #4]
 800745c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800745e:	2200      	movs	r2, #0
 8007460:	2105      	movs	r1, #5
 8007462:	2010      	movs	r0, #16
 8007464:	f7f9 fc14 	bl	8000c90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8007468:	2010      	movs	r0, #16
 800746a:	f7f9 fc2d 	bl	8000cc8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800746e:	2200      	movs	r2, #0
 8007470:	2105      	movs	r1, #5
 8007472:	2011      	movs	r0, #17
 8007474:	f7f9 fc0c 	bl	8000c90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8007478:	2011      	movs	r0, #17
 800747a:	f7f9 fc25 	bl	8000cc8 <HAL_NVIC_EnableIRQ>

}
 800747e:	bf00      	nop
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	40023800 	.word	0x40023800

0800748c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08a      	sub	sp, #40	; 0x28
 8007490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007492:	f107 0314 	add.w	r3, r7, #20
 8007496:	2200      	movs	r2, #0
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	605a      	str	r2, [r3, #4]
 800749c:	609a      	str	r2, [r3, #8]
 800749e:	60da      	str	r2, [r3, #12]
 80074a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80074a2:	2300      	movs	r3, #0
 80074a4:	613b      	str	r3, [r7, #16]
 80074a6:	4b3b      	ldr	r3, [pc, #236]	; (8007594 <MX_GPIO_Init+0x108>)
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074aa:	4a3a      	ldr	r2, [pc, #232]	; (8007594 <MX_GPIO_Init+0x108>)
 80074ac:	f043 0304 	orr.w	r3, r3, #4
 80074b0:	6313      	str	r3, [r2, #48]	; 0x30
 80074b2:	4b38      	ldr	r3, [pc, #224]	; (8007594 <MX_GPIO_Init+0x108>)
 80074b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b6:	f003 0304 	and.w	r3, r3, #4
 80074ba:	613b      	str	r3, [r7, #16]
 80074bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80074be:	2300      	movs	r3, #0
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	4b34      	ldr	r3, [pc, #208]	; (8007594 <MX_GPIO_Init+0x108>)
 80074c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c6:	4a33      	ldr	r2, [pc, #204]	; (8007594 <MX_GPIO_Init+0x108>)
 80074c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074cc:	6313      	str	r3, [r2, #48]	; 0x30
 80074ce:	4b31      	ldr	r3, [pc, #196]	; (8007594 <MX_GPIO_Init+0x108>)
 80074d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d6:	60fb      	str	r3, [r7, #12]
 80074d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074da:	2300      	movs	r3, #0
 80074dc:	60bb      	str	r3, [r7, #8]
 80074de:	4b2d      	ldr	r3, [pc, #180]	; (8007594 <MX_GPIO_Init+0x108>)
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	4a2c      	ldr	r2, [pc, #176]	; (8007594 <MX_GPIO_Init+0x108>)
 80074e4:	f043 0301 	orr.w	r3, r3, #1
 80074e8:	6313      	str	r3, [r2, #48]	; 0x30
 80074ea:	4b2a      	ldr	r3, [pc, #168]	; (8007594 <MX_GPIO_Init+0x108>)
 80074ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	60bb      	str	r3, [r7, #8]
 80074f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074f6:	2300      	movs	r3, #0
 80074f8:	607b      	str	r3, [r7, #4]
 80074fa:	4b26      	ldr	r3, [pc, #152]	; (8007594 <MX_GPIO_Init+0x108>)
 80074fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fe:	4a25      	ldr	r2, [pc, #148]	; (8007594 <MX_GPIO_Init+0x108>)
 8007500:	f043 0302 	orr.w	r3, r3, #2
 8007504:	6313      	str	r3, [r2, #48]	; 0x30
 8007506:	4b23      	ldr	r3, [pc, #140]	; (8007594 <MX_GPIO_Init+0x108>)
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	607b      	str	r3, [r7, #4]
 8007510:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Test_pin_Pin|Event_1_Pin|Event_2_Pin, GPIO_PIN_RESET);
 8007512:	2200      	movs	r2, #0
 8007514:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8007518:	481f      	ldr	r0, [pc, #124]	; (8007598 <MX_GPIO_Init+0x10c>)
 800751a:	f7fa f979 	bl	8001810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800751e:	2200      	movs	r2, #0
 8007520:	2120      	movs	r1, #32
 8007522:	481e      	ldr	r0, [pc, #120]	; (800759c <MX_GPIO_Init+0x110>)
 8007524:	f7fa f974 	bl	8001810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8007528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800752c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800752e:	4b1c      	ldr	r3, [pc, #112]	; (80075a0 <MX_GPIO_Init+0x114>)
 8007530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007532:	2300      	movs	r3, #0
 8007534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007536:	f107 0314 	add.w	r3, r7, #20
 800753a:	4619      	mov	r1, r3
 800753c:	4816      	ldr	r0, [pc, #88]	; (8007598 <MX_GPIO_Init+0x10c>)
 800753e:	f7f9 ffd3 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Test_pin_Pin Event_1_Pin Event_2_Pin */
  GPIO_InitStruct.Pin = Test_pin_Pin|Event_1_Pin|Event_2_Pin;
 8007542:	f44f 73a1 	mov.w	r3, #322	; 0x142
 8007546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007548:	2301      	movs	r3, #1
 800754a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800754c:	2300      	movs	r3, #0
 800754e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007550:	2300      	movs	r3, #0
 8007552:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007554:	f107 0314 	add.w	r3, r7, #20
 8007558:	4619      	mov	r1, r3
 800755a:	480f      	ldr	r0, [pc, #60]	; (8007598 <MX_GPIO_Init+0x10c>)
 800755c:	f7f9 ffc4 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8007560:	2320      	movs	r3, #32
 8007562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007564:	2301      	movs	r3, #1
 8007566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007568:	2300      	movs	r3, #0
 800756a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800756c:	2300      	movs	r3, #0
 800756e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8007570:	f107 0314 	add.w	r3, r7, #20
 8007574:	4619      	mov	r1, r3
 8007576:	4809      	ldr	r0, [pc, #36]	; (800759c <MX_GPIO_Init+0x110>)
 8007578:	f7f9 ffb6 	bl	80014e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800757c:	2200      	movs	r2, #0
 800757e:	2105      	movs	r1, #5
 8007580:	2028      	movs	r0, #40	; 0x28
 8007582:	f7f9 fb85 	bl	8000c90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007586:	2028      	movs	r0, #40	; 0x28
 8007588:	f7f9 fb9e 	bl	8000cc8 <HAL_NVIC_EnableIRQ>

}
 800758c:	bf00      	nop
 800758e:	3728      	adds	r7, #40	; 0x28
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	40023800 	.word	0x40023800
 8007598:	40020800 	.word	0x40020800
 800759c:	40020000 	.word	0x40020000
 80075a0:	10210000 	.word	0x10210000

080075a4 <HAL_GPIO_EXTI_Callback>:
#define LED_G_PORT GPIOA
#define LED_G_PIN	GPIO_PIN_5



void HAL_GPIO_EXTI_Callback(uint16_t mikel){
 80075a4:	b480      	push	{r7}
 80075a6:	b097      	sub	sp, #92	; 0x5c
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	4603      	mov	r3, r0
 80075ac:	80fb      	strh	r3, [r7, #6]
		//sprintf((char*)msg_buffer, "TRIGGERSEEDFSDSF\n\r");
		//pTxBuff = msg_buffer;
		//xQueueGenericSend(uartTxQueueHandle, &pTxBuff, 10, queueSEND_TO_BACK);
	}

}
 80075ae:	bf00      	nop
 80075b0:	375c      	adds	r7, #92	; 0x5c
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
	...

080075bc <StartLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLEDTask */
void StartLEDTask(void const * argument)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b096      	sub	sp, #88	; 0x58
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
	uint8_t *pTxBuff;
  /* Infinite loop */
  for(;;)
  {

	  if (LED_delay < 1000) LED_delay += 100; else LED_delay=1000;
 80075c4:	4b11      	ldr	r3, [pc, #68]	; (800760c <StartLEDTask+0x50>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075cc:	d205      	bcs.n	80075da <StartLEDTask+0x1e>
 80075ce:	4b0f      	ldr	r3, [pc, #60]	; (800760c <StartLEDTask+0x50>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	3364      	adds	r3, #100	; 0x64
 80075d4:	4a0d      	ldr	r2, [pc, #52]	; (800760c <StartLEDTask+0x50>)
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	e003      	b.n	80075e2 <StartLEDTask+0x26>
 80075da:	4b0c      	ldr	r3, [pc, #48]	; (800760c <StartLEDTask+0x50>)
 80075dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075e0:	601a      	str	r2, [r3, #0]
	  vTaskDelay(LED_delay);
 80075e2:	4b0a      	ldr	r3, [pc, #40]	; (800760c <StartLEDTask+0x50>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fd fc18 	bl	8004e1c <vTaskDelay>
	  HAL_GPIO_WritePin(LED_G_PORT,LED_G_PIN, 1); //Toggle LED
 80075ec:	2201      	movs	r2, #1
 80075ee:	2120      	movs	r1, #32
 80075f0:	4807      	ldr	r0, [pc, #28]	; (8007610 <StartLEDTask+0x54>)
 80075f2:	f7fa f90d 	bl	8001810 <HAL_GPIO_WritePin>
	  vTaskDelay(LED_delay);
 80075f6:	4b05      	ldr	r3, [pc, #20]	; (800760c <StartLEDTask+0x50>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fd fc0e 	bl	8004e1c <vTaskDelay>
	  //osDelay(LED_delay);
	  HAL_GPIO_WritePin(LED_G_PORT, LED_G_PIN, 0); //Toggle LED
 8007600:	2200      	movs	r2, #0
 8007602:	2120      	movs	r1, #32
 8007604:	4802      	ldr	r0, [pc, #8]	; (8007610 <StartLEDTask+0x54>)
 8007606:	f7fa f903 	bl	8001810 <HAL_GPIO_WritePin>
	  if (LED_delay < 1000) LED_delay += 100; else LED_delay=1000;
 800760a:	e7db      	b.n	80075c4 <StartLEDTask+0x8>
 800760c:	200045b4 	.word	0x200045b4
 8007610:	40020000 	.word	0x40020000

08007614 <StartUartTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTxTask */
void StartUartTxTask(void const * argument)
{
 8007614:	b590      	push	{r4, r7, lr}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartTxTask */
	uint32_t notification = 1;
 800761c:	2301      	movs	r3, #1
 800761e:	60fb      	str	r3, [r7, #12]
	uint8_t *pTxBuff = NULL;
 8007620:	2300      	movs	r3, #0
 8007622:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		if (notification!=0)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d021      	beq.n	800766e <StartUartTxTask+0x5a>
		{
			while (pdFALSE==xQueueReceive( uartTxQueueHandle, &pTxBuff, portMAX_DELAY ));
 800762a:	bf00      	nop
 800762c:	4b14      	ldr	r3, [pc, #80]	; (8007680 <StartUartTxTask+0x6c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f107 0108 	add.w	r1, r7, #8
 8007634:	f04f 32ff 	mov.w	r2, #4294967295
 8007638:	4618      	mov	r0, r3
 800763a:	f7fc fffb 	bl	8004634 <xQueueReceive>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d0f3      	beq.n	800762c <StartUartTxTask+0x18>
			if (HAL_OK != HAL_UART_Transmit_DMA(&huart2, pTxBuff, strlen((const char*)pTxBuff)))
 8007644:	68bc      	ldr	r4, [r7, #8]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	4618      	mov	r0, r3
 800764a:	f7f8 fde1 	bl	8000210 <strlen>
 800764e:	4603      	mov	r3, r0
 8007650:	b29b      	uxth	r3, r3
 8007652:	461a      	mov	r2, r3
 8007654:	4621      	mov	r1, r4
 8007656:	480b      	ldr	r0, [pc, #44]	; (8007684 <StartUartTxTask+0x70>)
 8007658:	f7fb fdd6 	bl	8003208 <HAL_UART_Transmit_DMA>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <StartUartTxTask+0x54>
			{
				notification = 1;
 8007662:	2301      	movs	r3, #1
 8007664:	60fb      	str	r3, [r7, #12]
 8007666:	e007      	b.n	8007678 <StartUartTxTask+0x64>
			}
			else
			{
				notification = 0; // wait for ISR/Callback to indicate completion
 8007668:	2300      	movs	r3, #0
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	e004      	b.n	8007678 <StartUartTxTask+0x64>
			}
		}
		else
		{
			notification = ulTaskNotifyTake( pdTRUE, 100 );
 800766e:	2164      	movs	r1, #100	; 0x64
 8007670:	2001      	movs	r0, #1
 8007672:	f7fe fba7 	bl	8005dc4 <ulTaskNotifyTake>
 8007676:	60f8      	str	r0, [r7, #12]
		}
		osDelay(1);
 8007678:	2001      	movs	r0, #1
 800767a:	f7fc fc12 	bl	8003ea2 <osDelay>
		if (notification!=0)
 800767e:	e7d1      	b.n	8007624 <StartUartTxTask+0x10>
 8007680:	20004764 	.word	0x20004764
 8007684:	2000476c 	.word	0x2000476c

08007688 <StartStatsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStatsTask */
void StartStatsTask(void const * argument)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b0d6      	sub	sp, #344	; 0x158
 800768c:	af00      	add	r7, sp, #0
 800768e:	1d3b      	adds	r3, r7, #4
 8007690:	6018      	str	r0, [r3, #0]
	uint8_t *pTxBuff;
  /* Infinite loop */
	  for(;;)
	  {
	    //osDelay(1000); // 1000ms
	    vTaskDelay(1000); // 1000 ticks = 1000 ms
 8007692:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007696:	f7fd fbc1 	bl	8004e1c <vTaskDelay>
	    vTaskGetRunTimeStats( (char*) ps_buffer ); // Generate CPU utilization info (human readable)
 800769a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe fb0c 	bl	8005cbc <vTaskGetRunTimeStats>
	    pTxBuff = ps_buffer;
 80076a4:	f107 030c 	add.w	r3, r7, #12
 80076a8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80076ac:	601a      	str	r2, [r3, #0]
	    xQueueGenericSend(uartTxQueueHandle, (void *)&pTxBuff, 10, queueSEND_TO_BACK);
 80076ae:	4b16      	ldr	r3, [pc, #88]	; (8007708 <StartStatsTask+0x80>)
 80076b0:	6818      	ldr	r0, [r3, #0]
 80076b2:	f107 010c 	add.w	r1, r7, #12
 80076b6:	2300      	movs	r3, #0
 80076b8:	220a      	movs	r2, #10
 80076ba:	f7fc fe21 	bl	8004300 <xQueueGenericSend>

		dstack = uxTaskGetStackHighWaterMark(LEDTaskHandle);
 80076be:	4b13      	ldr	r3, [pc, #76]	; (800770c <StartStatsTask+0x84>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe f9c4 	bl	8005a50 <uxTaskGetStackHighWaterMark>
 80076c8:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
		t2stack = uxTaskGetStackHighWaterMark(statsTaskHandle);
 80076cc:	4b10      	ldr	r3, [pc, #64]	; (8007710 <StartStatsTask+0x88>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fe f9bd 	bl	8005a50 <uxTaskGetStackHighWaterMark>
 80076d6:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
		sprintf((char*)msg_buffer, "Stack High Mark: T_default=%ld, T_2=%ld\n\r", dstack, t2stack);
 80076da:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80076de:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80076e2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80076e6:	490b      	ldr	r1, [pc, #44]	; (8007714 <StartStatsTask+0x8c>)
 80076e8:	f000 fb0c 	bl	8007d04 <siprintf>
		pTxBuff = msg_buffer;
 80076ec:	f107 030c 	add.w	r3, r7, #12
 80076f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80076f4:	601a      	str	r2, [r3, #0]
	    xQueueGenericSend(uartTxQueueHandle, &pTxBuff, 10, queueSEND_TO_BACK);
 80076f6:	4b04      	ldr	r3, [pc, #16]	; (8007708 <StartStatsTask+0x80>)
 80076f8:	6818      	ldr	r0, [r3, #0]
 80076fa:	f107 010c 	add.w	r1, r7, #12
 80076fe:	2300      	movs	r3, #0
 8007700:	220a      	movs	r2, #10
 8007702:	f7fc fdfd 	bl	8004300 <xQueueGenericSend>
	  {
 8007706:	e7c4      	b.n	8007692 <StartStatsTask+0xa>
 8007708:	20004764 	.word	0x20004764
 800770c:	20004608 	.word	0x20004608
 8007710:	20004768 	.word	0x20004768
 8007714:	08008654 	.word	0x08008654

08007718 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8007720:	2001      	movs	r0, #1
 8007722:	f7fc fbbe 	bl	8003ea2 <osDelay>
 8007726:	e7fb      	b.n	8007720 <StartTask04+0x8>

08007728 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a04      	ldr	r2, [pc, #16]	; (8007748 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d101      	bne.n	800773e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800773a:	f7f8 ff5f 	bl	80005fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800773e:	bf00      	nop
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	40001400 	.word	0x40001400

0800774c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800774c:	b480      	push	{r7}
 800774e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007750:	bf00      	nop
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
	...

0800775c <HAL_UART_TxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af02      	add	r7, sp, #8
 8007762:	6078      	str	r0, [r7, #4]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
  //if (huart == huart2)
  {
	  xTaskGenericNotifyFromISR(uartTxTaskHandle, 1, eIncrement, NULL, NULL);
 8007764:	4b06      	ldr	r3, [pc, #24]	; (8007780 <HAL_UART_TxCpltCallback+0x24>)
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	2300      	movs	r3, #0
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	2300      	movs	r3, #0
 800776e:	2202      	movs	r2, #2
 8007770:	2101      	movs	r1, #1
 8007772:	f7fe fb6f 	bl	8005e54 <xTaskGenericNotifyFromISR>
  }
}
 8007776:	bf00      	nop
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	200047b0 	.word	0x200047b0

08007784 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800778a:	2300      	movs	r3, #0
 800778c:	607b      	str	r3, [r7, #4]
 800778e:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <HAL_MspInit+0x54>)
 8007790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007792:	4a11      	ldr	r2, [pc, #68]	; (80077d8 <HAL_MspInit+0x54>)
 8007794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007798:	6453      	str	r3, [r2, #68]	; 0x44
 800779a:	4b0f      	ldr	r3, [pc, #60]	; (80077d8 <HAL_MspInit+0x54>)
 800779c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077a2:	607b      	str	r3, [r7, #4]
 80077a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80077a6:	2300      	movs	r3, #0
 80077a8:	603b      	str	r3, [r7, #0]
 80077aa:	4b0b      	ldr	r3, [pc, #44]	; (80077d8 <HAL_MspInit+0x54>)
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	4a0a      	ldr	r2, [pc, #40]	; (80077d8 <HAL_MspInit+0x54>)
 80077b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b4:	6413      	str	r3, [r2, #64]	; 0x40
 80077b6:	4b08      	ldr	r3, [pc, #32]	; (80077d8 <HAL_MspInit+0x54>)
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077be:	603b      	str	r3, [r7, #0]
 80077c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80077c2:	2200      	movs	r2, #0
 80077c4:	210f      	movs	r1, #15
 80077c6:	f06f 0001 	mvn.w	r0, #1
 80077ca:	f7f9 fa61 	bl	8000c90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80077ce:	bf00      	nop
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	40023800 	.word	0x40023800

080077dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a0b      	ldr	r2, [pc, #44]	; (8007818 <HAL_ADC_MspInit+0x3c>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d10d      	bne.n	800780a <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
 80077f2:	4b0a      	ldr	r3, [pc, #40]	; (800781c <HAL_ADC_MspInit+0x40>)
 80077f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f6:	4a09      	ldr	r2, [pc, #36]	; (800781c <HAL_ADC_MspInit+0x40>)
 80077f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077fc:	6453      	str	r3, [r2, #68]	; 0x44
 80077fe:	4b07      	ldr	r3, [pc, #28]	; (800781c <HAL_ADC_MspInit+0x40>)
 8007800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800780a:	bf00      	nop
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	40012000 	.word	0x40012000
 800781c:	40023800 	.word	0x40023800

08007820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a0e      	ldr	r2, [pc, #56]	; (8007868 <HAL_TIM_Base_MspInit+0x48>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d115      	bne.n	800785e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007832:	2300      	movs	r3, #0
 8007834:	60fb      	str	r3, [r7, #12]
 8007836:	4b0d      	ldr	r3, [pc, #52]	; (800786c <HAL_TIM_Base_MspInit+0x4c>)
 8007838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783a:	4a0c      	ldr	r2, [pc, #48]	; (800786c <HAL_TIM_Base_MspInit+0x4c>)
 800783c:	f043 0304 	orr.w	r3, r3, #4
 8007840:	6413      	str	r3, [r2, #64]	; 0x40
 8007842:	4b0a      	ldr	r3, [pc, #40]	; (800786c <HAL_TIM_Base_MspInit+0x4c>)
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	f003 0304 	and.w	r3, r3, #4
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800784e:	2200      	movs	r2, #0
 8007850:	2105      	movs	r1, #5
 8007852:	201e      	movs	r0, #30
 8007854:	f7f9 fa1c 	bl	8000c90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007858:	201e      	movs	r0, #30
 800785a:	f7f9 fa35 	bl	8000cc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800785e:	bf00      	nop
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	40000800 	.word	0x40000800
 800786c:	40023800 	.word	0x40023800

08007870 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007878:	f107 030c 	add.w	r3, r7, #12
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	605a      	str	r2, [r3, #4]
 8007882:	609a      	str	r2, [r3, #8]
 8007884:	60da      	str	r2, [r3, #12]
 8007886:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a12      	ldr	r2, [pc, #72]	; (80078d8 <HAL_TIM_MspPostInit+0x68>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d11d      	bne.n	80078ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007892:	2300      	movs	r3, #0
 8007894:	60bb      	str	r3, [r7, #8]
 8007896:	4b11      	ldr	r3, [pc, #68]	; (80078dc <HAL_TIM_MspPostInit+0x6c>)
 8007898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789a:	4a10      	ldr	r2, [pc, #64]	; (80078dc <HAL_TIM_MspPostInit+0x6c>)
 800789c:	f043 0302 	orr.w	r3, r3, #2
 80078a0:	6313      	str	r3, [r2, #48]	; 0x30
 80078a2:	4b0e      	ldr	r3, [pc, #56]	; (80078dc <HAL_TIM_MspPostInit+0x6c>)
 80078a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	60bb      	str	r3, [r7, #8]
 80078ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80078ae:	2340      	movs	r3, #64	; 0x40
 80078b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078b2:	2302      	movs	r3, #2
 80078b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078ba:	2300      	movs	r3, #0
 80078bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80078be:	2302      	movs	r3, #2
 80078c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078c2:	f107 030c 	add.w	r3, r7, #12
 80078c6:	4619      	mov	r1, r3
 80078c8:	4805      	ldr	r0, [pc, #20]	; (80078e0 <HAL_TIM_MspPostInit+0x70>)
 80078ca:	f7f9 fe0d 	bl	80014e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80078ce:	bf00      	nop
 80078d0:	3720      	adds	r7, #32
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	40000800 	.word	0x40000800
 80078dc:	40023800 	.word	0x40023800
 80078e0:	40020400 	.word	0x40020400

080078e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08a      	sub	sp, #40	; 0x28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078ec:	f107 0314 	add.w	r3, r7, #20
 80078f0:	2200      	movs	r2, #0
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	605a      	str	r2, [r3, #4]
 80078f6:	609a      	str	r2, [r3, #8]
 80078f8:	60da      	str	r2, [r3, #12]
 80078fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a4c      	ldr	r2, [pc, #304]	; (8007a34 <HAL_UART_MspInit+0x150>)
 8007902:	4293      	cmp	r3, r2
 8007904:	f040 8091 	bne.w	8007a2a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007908:	2300      	movs	r3, #0
 800790a:	613b      	str	r3, [r7, #16]
 800790c:	4b4a      	ldr	r3, [pc, #296]	; (8007a38 <HAL_UART_MspInit+0x154>)
 800790e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007910:	4a49      	ldr	r2, [pc, #292]	; (8007a38 <HAL_UART_MspInit+0x154>)
 8007912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007916:	6413      	str	r3, [r2, #64]	; 0x40
 8007918:	4b47      	ldr	r3, [pc, #284]	; (8007a38 <HAL_UART_MspInit+0x154>)
 800791a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007920:	613b      	str	r3, [r7, #16]
 8007922:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007924:	2300      	movs	r3, #0
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	4b43      	ldr	r3, [pc, #268]	; (8007a38 <HAL_UART_MspInit+0x154>)
 800792a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792c:	4a42      	ldr	r2, [pc, #264]	; (8007a38 <HAL_UART_MspInit+0x154>)
 800792e:	f043 0301 	orr.w	r3, r3, #1
 8007932:	6313      	str	r3, [r2, #48]	; 0x30
 8007934:	4b40      	ldr	r3, [pc, #256]	; (8007a38 <HAL_UART_MspInit+0x154>)
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	60fb      	str	r3, [r7, #12]
 800793e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007940:	230c      	movs	r3, #12
 8007942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007944:	2302      	movs	r3, #2
 8007946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007948:	2300      	movs	r3, #0
 800794a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800794c:	2303      	movs	r3, #3
 800794e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007950:	2307      	movs	r3, #7
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007954:	f107 0314 	add.w	r3, r7, #20
 8007958:	4619      	mov	r1, r3
 800795a:	4838      	ldr	r0, [pc, #224]	; (8007a3c <HAL_UART_MspInit+0x158>)
 800795c:	f7f9 fdc4 	bl	80014e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8007960:	4b37      	ldr	r3, [pc, #220]	; (8007a40 <HAL_UART_MspInit+0x15c>)
 8007962:	4a38      	ldr	r2, [pc, #224]	; (8007a44 <HAL_UART_MspInit+0x160>)
 8007964:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8007966:	4b36      	ldr	r3, [pc, #216]	; (8007a40 <HAL_UART_MspInit+0x15c>)
 8007968:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800796c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800796e:	4b34      	ldr	r3, [pc, #208]	; (8007a40 <HAL_UART_MspInit+0x15c>)
 8007970:	2240      	movs	r2, #64	; 0x40
 8007972:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007974:	4b32      	ldr	r3, [pc, #200]	; (8007a40 <HAL_UART_MspInit+0x15c>)
 8007976:	2200      	movs	r2, #0
 8007978:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800797a:	4b31      	ldr	r3, [pc, #196]	; (8007a40 <HAL_UART_MspInit+0x15c>)
 800797c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007980:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007982:	4b2f      	ldr	r3, [pc, #188]	; (8007a40 <HAL_UART_MspInit+0x15c>)
 8007984:	2200      	movs	r2, #0
 8007986:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007988:	4b2d      	ldr	r3, [pc, #180]	; (8007a40 <HAL_UART_MspInit+0x15c>)
 800798a:	2200      	movs	r2, #0
 800798c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800798e:	4b2c      	ldr	r3, [pc, #176]	; (8007a40 <HAL_UART_MspInit+0x15c>)
 8007990:	2200      	movs	r2, #0
 8007992:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007994:	4b2a      	ldr	r3, [pc, #168]	; (8007a40 <HAL_UART_MspInit+0x15c>)
 8007996:	2200      	movs	r2, #0
 8007998:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800799a:	4b29      	ldr	r3, [pc, #164]	; (8007a40 <HAL_UART_MspInit+0x15c>)
 800799c:	2200      	movs	r2, #0
 800799e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80079a0:	4827      	ldr	r0, [pc, #156]	; (8007a40 <HAL_UART_MspInit+0x15c>)
 80079a2:	f7f9 f99f 	bl	8000ce4 <HAL_DMA_Init>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80079ac:	f7ff fece 	bl	800774c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a23      	ldr	r2, [pc, #140]	; (8007a40 <HAL_UART_MspInit+0x15c>)
 80079b4:	635a      	str	r2, [r3, #52]	; 0x34
 80079b6:	4a22      	ldr	r2, [pc, #136]	; (8007a40 <HAL_UART_MspInit+0x15c>)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80079bc:	4b22      	ldr	r3, [pc, #136]	; (8007a48 <HAL_UART_MspInit+0x164>)
 80079be:	4a23      	ldr	r2, [pc, #140]	; (8007a4c <HAL_UART_MspInit+0x168>)
 80079c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80079c2:	4b21      	ldr	r3, [pc, #132]	; (8007a48 <HAL_UART_MspInit+0x164>)
 80079c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80079c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80079ca:	4b1f      	ldr	r3, [pc, #124]	; (8007a48 <HAL_UART_MspInit+0x164>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80079d0:	4b1d      	ldr	r3, [pc, #116]	; (8007a48 <HAL_UART_MspInit+0x164>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80079d6:	4b1c      	ldr	r3, [pc, #112]	; (8007a48 <HAL_UART_MspInit+0x164>)
 80079d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80079dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80079de:	4b1a      	ldr	r3, [pc, #104]	; (8007a48 <HAL_UART_MspInit+0x164>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80079e4:	4b18      	ldr	r3, [pc, #96]	; (8007a48 <HAL_UART_MspInit+0x164>)
 80079e6:	2200      	movs	r2, #0
 80079e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80079ea:	4b17      	ldr	r3, [pc, #92]	; (8007a48 <HAL_UART_MspInit+0x164>)
 80079ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079f0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80079f2:	4b15      	ldr	r3, [pc, #84]	; (8007a48 <HAL_UART_MspInit+0x164>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80079f8:	4b13      	ldr	r3, [pc, #76]	; (8007a48 <HAL_UART_MspInit+0x164>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80079fe:	4812      	ldr	r0, [pc, #72]	; (8007a48 <HAL_UART_MspInit+0x164>)
 8007a00:	f7f9 f970 	bl	8000ce4 <HAL_DMA_Init>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8007a0a:	f7ff fe9f 	bl	800774c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a0d      	ldr	r2, [pc, #52]	; (8007a48 <HAL_UART_MspInit+0x164>)
 8007a12:	639a      	str	r2, [r3, #56]	; 0x38
 8007a14:	4a0c      	ldr	r2, [pc, #48]	; (8007a48 <HAL_UART_MspInit+0x164>)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	2105      	movs	r1, #5
 8007a1e:	2026      	movs	r0, #38	; 0x26
 8007a20:	f7f9 f936 	bl	8000c90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007a24:	2026      	movs	r0, #38	; 0x26
 8007a26:	f7f9 f94f 	bl	8000cc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007a2a:	bf00      	nop
 8007a2c:	3728      	adds	r7, #40	; 0x28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	40004400 	.word	0x40004400
 8007a38:	40023800 	.word	0x40023800
 8007a3c:	40020000 	.word	0x40020000
 8007a40:	20004704 	.word	0x20004704
 8007a44:	400260a0 	.word	0x400260a0
 8007a48:	2000460c 	.word	0x2000460c
 8007a4c:	40026088 	.word	0x40026088

08007a50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b08c      	sub	sp, #48	; 0x30
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8007a60:	2200      	movs	r2, #0
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	2037      	movs	r0, #55	; 0x37
 8007a66:	f7f9 f913 	bl	8000c90 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007a6a:	2037      	movs	r0, #55	; 0x37
 8007a6c:	f7f9 f92c 	bl	8000cc8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8007a70:	2300      	movs	r3, #0
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	4b1f      	ldr	r3, [pc, #124]	; (8007af4 <HAL_InitTick+0xa4>)
 8007a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a78:	4a1e      	ldr	r2, [pc, #120]	; (8007af4 <HAL_InitTick+0xa4>)
 8007a7a:	f043 0320 	orr.w	r3, r3, #32
 8007a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8007a80:	4b1c      	ldr	r3, [pc, #112]	; (8007af4 <HAL_InitTick+0xa4>)
 8007a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a84:	f003 0320 	and.w	r3, r3, #32
 8007a88:	60fb      	str	r3, [r7, #12]
 8007a8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007a8c:	f107 0210 	add.w	r2, r7, #16
 8007a90:	f107 0314 	add.w	r3, r7, #20
 8007a94:	4611      	mov	r1, r2
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fa f806 	bl	8001aa8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8007a9c:	f7f9 ffdc 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	4a13      	ldr	r2, [pc, #76]	; (8007af8 <HAL_InitTick+0xa8>)
 8007aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8007aae:	0c9b      	lsrs	r3, r3, #18
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8007ab4:	4b11      	ldr	r3, [pc, #68]	; (8007afc <HAL_InitTick+0xac>)
 8007ab6:	4a12      	ldr	r2, [pc, #72]	; (8007b00 <HAL_InitTick+0xb0>)
 8007ab8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8007aba:	4b10      	ldr	r3, [pc, #64]	; (8007afc <HAL_InitTick+0xac>)
 8007abc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007ac0:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8007ac2:	4a0e      	ldr	r2, [pc, #56]	; (8007afc <HAL_InitTick+0xac>)
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8007ac8:	4b0c      	ldr	r3, [pc, #48]	; (8007afc <HAL_InitTick+0xac>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ace:	4b0b      	ldr	r3, [pc, #44]	; (8007afc <HAL_InitTick+0xac>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8007ad4:	4809      	ldr	r0, [pc, #36]	; (8007afc <HAL_InitTick+0xac>)
 8007ad6:	f7fa fc69 	bl	80023ac <HAL_TIM_Base_Init>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d104      	bne.n	8007aea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8007ae0:	4806      	ldr	r0, [pc, #24]	; (8007afc <HAL_InitTick+0xac>)
 8007ae2:	f7fa fcb3 	bl	800244c <HAL_TIM_Base_Start_IT>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	e000      	b.n	8007aec <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3730      	adds	r7, #48	; 0x30
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	40023800 	.word	0x40023800
 8007af8:	431bde83 	.word	0x431bde83
 8007afc:	200047b4 	.word	0x200047b4
 8007b00:	40001400 	.word	0x40001400

08007b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007b04:	b480      	push	{r7}
 8007b06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007b08:	bf00      	nop
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007b12:	b480      	push	{r7}
 8007b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007b16:	e7fe      	b.n	8007b16 <HardFault_Handler+0x4>

08007b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007b1c:	e7fe      	b.n	8007b1c <MemManage_Handler+0x4>

08007b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007b22:	e7fe      	b.n	8007b22 <BusFault_Handler+0x4>

08007b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007b24:	b480      	push	{r7}
 8007b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007b28:	e7fe      	b.n	8007b28 <UsageFault_Handler+0x4>

08007b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007b2e:	bf00      	nop
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007b3c:	4802      	ldr	r0, [pc, #8]	; (8007b48 <DMA1_Stream5_IRQHandler+0x10>)
 8007b3e:	f7f9 fa69 	bl	8001014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8007b42:	bf00      	nop
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	2000460c 	.word	0x2000460c

08007b4c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007b50:	4802      	ldr	r0, [pc, #8]	; (8007b5c <DMA1_Stream6_IRQHandler+0x10>)
 8007b52:	f7f9 fa5f 	bl	8001014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8007b56:	bf00      	nop
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	20004704 	.word	0x20004704

08007b60 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007b64:	4802      	ldr	r0, [pc, #8]	; (8007b70 <TIM4_IRQHandler+0x10>)
 8007b66:	f7fa fd3a 	bl	80025de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8007b6a:	bf00      	nop
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	20004670 	.word	0x20004670

08007b74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007b78:	4802      	ldr	r0, [pc, #8]	; (8007b84 <USART2_IRQHandler+0x10>)
 8007b7a:	f7fb fbb1 	bl	80032e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007b7e:	bf00      	nop
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	2000476c 	.word	0x2000476c

08007b88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007b8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007b90:	f7f9 fe58 	bl	8001844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007b94:	bf00      	nop
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007b9c:	4802      	ldr	r0, [pc, #8]	; (8007ba8 <TIM7_IRQHandler+0x10>)
 8007b9e:	f7fa fd1e 	bl	80025de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007ba2:	bf00      	nop
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	200047b4 	.word	0x200047b4

08007bac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007bb4:	4b11      	ldr	r3, [pc, #68]	; (8007bfc <_sbrk+0x50>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d102      	bne.n	8007bc2 <_sbrk+0x16>
		heap_end = &end;
 8007bbc:	4b0f      	ldr	r3, [pc, #60]	; (8007bfc <_sbrk+0x50>)
 8007bbe:	4a10      	ldr	r2, [pc, #64]	; (8007c00 <_sbrk+0x54>)
 8007bc0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007bc2:	4b0e      	ldr	r3, [pc, #56]	; (8007bfc <_sbrk+0x50>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007bc8:	4b0c      	ldr	r3, [pc, #48]	; (8007bfc <_sbrk+0x50>)
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4413      	add	r3, r2
 8007bd0:	466a      	mov	r2, sp
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d907      	bls.n	8007be6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007bd6:	f000 f855 	bl	8007c84 <__errno>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	220c      	movs	r2, #12
 8007bde:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8007be0:	f04f 33ff 	mov.w	r3, #4294967295
 8007be4:	e006      	b.n	8007bf4 <_sbrk+0x48>
	}

	heap_end += incr;
 8007be6:	4b05      	ldr	r3, [pc, #20]	; (8007bfc <_sbrk+0x50>)
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4413      	add	r3, r2
 8007bee:	4a03      	ldr	r2, [pc, #12]	; (8007bfc <_sbrk+0x50>)
 8007bf0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	200045b8 	.word	0x200045b8
 8007c00:	20004810 	.word	0x20004810

08007c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007c04:	b480      	push	{r7}
 8007c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007c08:	4b08      	ldr	r3, [pc, #32]	; (8007c2c <SystemInit+0x28>)
 8007c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c0e:	4a07      	ldr	r2, [pc, #28]	; (8007c2c <SystemInit+0x28>)
 8007c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007c18:	4b04      	ldr	r3, [pc, #16]	; (8007c2c <SystemInit+0x28>)
 8007c1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007c1e:	609a      	str	r2, [r3, #8]
#endif
}
 8007c20:	bf00      	nop
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	e000ed00 	.word	0xe000ed00

08007c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007c68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007c34:	480d      	ldr	r0, [pc, #52]	; (8007c6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007c36:	490e      	ldr	r1, [pc, #56]	; (8007c70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007c38:	4a0e      	ldr	r2, [pc, #56]	; (8007c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007c3c:	e002      	b.n	8007c44 <LoopCopyDataInit>

08007c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007c42:	3304      	adds	r3, #4

08007c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007c48:	d3f9      	bcc.n	8007c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007c4a:	4a0b      	ldr	r2, [pc, #44]	; (8007c78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007c4c:	4c0b      	ldr	r4, [pc, #44]	; (8007c7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8007c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007c50:	e001      	b.n	8007c56 <LoopFillZerobss>

08007c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007c54:	3204      	adds	r2, #4

08007c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007c58:	d3fb      	bcc.n	8007c52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007c5a:	f7ff ffd3 	bl	8007c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007c5e:	f000 f817 	bl	8007c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007c62:	f7ff f9f1 	bl	8007048 <main>
  bx  lr    
 8007c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007c68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007c70:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8007c74:	080086e4 	.word	0x080086e4
  ldr r2, =_sbss
 8007c78:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8007c7c:	2000480c 	.word	0x2000480c

08007c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c80:	e7fe      	b.n	8007c80 <ADC_IRQHandler>
	...

08007c84 <__errno>:
 8007c84:	4b01      	ldr	r3, [pc, #4]	; (8007c8c <__errno+0x8>)
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	20000010 	.word	0x20000010

08007c90 <__libc_init_array>:
 8007c90:	b570      	push	{r4, r5, r6, lr}
 8007c92:	4d0d      	ldr	r5, [pc, #52]	; (8007cc8 <__libc_init_array+0x38>)
 8007c94:	4c0d      	ldr	r4, [pc, #52]	; (8007ccc <__libc_init_array+0x3c>)
 8007c96:	1b64      	subs	r4, r4, r5
 8007c98:	10a4      	asrs	r4, r4, #2
 8007c9a:	2600      	movs	r6, #0
 8007c9c:	42a6      	cmp	r6, r4
 8007c9e:	d109      	bne.n	8007cb4 <__libc_init_array+0x24>
 8007ca0:	4d0b      	ldr	r5, [pc, #44]	; (8007cd0 <__libc_init_array+0x40>)
 8007ca2:	4c0c      	ldr	r4, [pc, #48]	; (8007cd4 <__libc_init_array+0x44>)
 8007ca4:	f000 fc56 	bl	8008554 <_init>
 8007ca8:	1b64      	subs	r4, r4, r5
 8007caa:	10a4      	asrs	r4, r4, #2
 8007cac:	2600      	movs	r6, #0
 8007cae:	42a6      	cmp	r6, r4
 8007cb0:	d105      	bne.n	8007cbe <__libc_init_array+0x2e>
 8007cb2:	bd70      	pop	{r4, r5, r6, pc}
 8007cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb8:	4798      	blx	r3
 8007cba:	3601      	adds	r6, #1
 8007cbc:	e7ee      	b.n	8007c9c <__libc_init_array+0xc>
 8007cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc2:	4798      	blx	r3
 8007cc4:	3601      	adds	r6, #1
 8007cc6:	e7f2      	b.n	8007cae <__libc_init_array+0x1e>
 8007cc8:	080086dc 	.word	0x080086dc
 8007ccc:	080086dc 	.word	0x080086dc
 8007cd0:	080086dc 	.word	0x080086dc
 8007cd4:	080086e0 	.word	0x080086e0

08007cd8 <memcpy>:
 8007cd8:	440a      	add	r2, r1
 8007cda:	4291      	cmp	r1, r2
 8007cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ce0:	d100      	bne.n	8007ce4 <memcpy+0xc>
 8007ce2:	4770      	bx	lr
 8007ce4:	b510      	push	{r4, lr}
 8007ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cee:	4291      	cmp	r1, r2
 8007cf0:	d1f9      	bne.n	8007ce6 <memcpy+0xe>
 8007cf2:	bd10      	pop	{r4, pc}

08007cf4 <memset>:
 8007cf4:	4402      	add	r2, r0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d100      	bne.n	8007cfe <memset+0xa>
 8007cfc:	4770      	bx	lr
 8007cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8007d02:	e7f9      	b.n	8007cf8 <memset+0x4>

08007d04 <siprintf>:
 8007d04:	b40e      	push	{r1, r2, r3}
 8007d06:	b500      	push	{lr}
 8007d08:	b09c      	sub	sp, #112	; 0x70
 8007d0a:	ab1d      	add	r3, sp, #116	; 0x74
 8007d0c:	9002      	str	r0, [sp, #8]
 8007d0e:	9006      	str	r0, [sp, #24]
 8007d10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d14:	4809      	ldr	r0, [pc, #36]	; (8007d3c <siprintf+0x38>)
 8007d16:	9107      	str	r1, [sp, #28]
 8007d18:	9104      	str	r1, [sp, #16]
 8007d1a:	4909      	ldr	r1, [pc, #36]	; (8007d40 <siprintf+0x3c>)
 8007d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d20:	9105      	str	r1, [sp, #20]
 8007d22:	6800      	ldr	r0, [r0, #0]
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	a902      	add	r1, sp, #8
 8007d28:	f000 f870 	bl	8007e0c <_svfiprintf_r>
 8007d2c:	9b02      	ldr	r3, [sp, #8]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	701a      	strb	r2, [r3, #0]
 8007d32:	b01c      	add	sp, #112	; 0x70
 8007d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d38:	b003      	add	sp, #12
 8007d3a:	4770      	bx	lr
 8007d3c:	20000010 	.word	0x20000010
 8007d40:	ffff0208 	.word	0xffff0208

08007d44 <strcpy>:
 8007d44:	4603      	mov	r3, r0
 8007d46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d4a:	f803 2b01 	strb.w	r2, [r3], #1
 8007d4e:	2a00      	cmp	r2, #0
 8007d50:	d1f9      	bne.n	8007d46 <strcpy+0x2>
 8007d52:	4770      	bx	lr

08007d54 <__ssputs_r>:
 8007d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d58:	688e      	ldr	r6, [r1, #8]
 8007d5a:	429e      	cmp	r6, r3
 8007d5c:	4682      	mov	sl, r0
 8007d5e:	460c      	mov	r4, r1
 8007d60:	4690      	mov	r8, r2
 8007d62:	461f      	mov	r7, r3
 8007d64:	d838      	bhi.n	8007dd8 <__ssputs_r+0x84>
 8007d66:	898a      	ldrh	r2, [r1, #12]
 8007d68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d6c:	d032      	beq.n	8007dd4 <__ssputs_r+0x80>
 8007d6e:	6825      	ldr	r5, [r4, #0]
 8007d70:	6909      	ldr	r1, [r1, #16]
 8007d72:	eba5 0901 	sub.w	r9, r5, r1
 8007d76:	6965      	ldr	r5, [r4, #20]
 8007d78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d80:	3301      	adds	r3, #1
 8007d82:	444b      	add	r3, r9
 8007d84:	106d      	asrs	r5, r5, #1
 8007d86:	429d      	cmp	r5, r3
 8007d88:	bf38      	it	cc
 8007d8a:	461d      	movcc	r5, r3
 8007d8c:	0553      	lsls	r3, r2, #21
 8007d8e:	d531      	bpl.n	8007df4 <__ssputs_r+0xa0>
 8007d90:	4629      	mov	r1, r5
 8007d92:	f000 fb39 	bl	8008408 <_malloc_r>
 8007d96:	4606      	mov	r6, r0
 8007d98:	b950      	cbnz	r0, 8007db0 <__ssputs_r+0x5c>
 8007d9a:	230c      	movs	r3, #12
 8007d9c:	f8ca 3000 	str.w	r3, [sl]
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007da6:	81a3      	strh	r3, [r4, #12]
 8007da8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db0:	6921      	ldr	r1, [r4, #16]
 8007db2:	464a      	mov	r2, r9
 8007db4:	f7ff ff90 	bl	8007cd8 <memcpy>
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dc2:	81a3      	strh	r3, [r4, #12]
 8007dc4:	6126      	str	r6, [r4, #16]
 8007dc6:	6165      	str	r5, [r4, #20]
 8007dc8:	444e      	add	r6, r9
 8007dca:	eba5 0509 	sub.w	r5, r5, r9
 8007dce:	6026      	str	r6, [r4, #0]
 8007dd0:	60a5      	str	r5, [r4, #8]
 8007dd2:	463e      	mov	r6, r7
 8007dd4:	42be      	cmp	r6, r7
 8007dd6:	d900      	bls.n	8007dda <__ssputs_r+0x86>
 8007dd8:	463e      	mov	r6, r7
 8007dda:	4632      	mov	r2, r6
 8007ddc:	6820      	ldr	r0, [r4, #0]
 8007dde:	4641      	mov	r1, r8
 8007de0:	f000 faa8 	bl	8008334 <memmove>
 8007de4:	68a3      	ldr	r3, [r4, #8]
 8007de6:	6822      	ldr	r2, [r4, #0]
 8007de8:	1b9b      	subs	r3, r3, r6
 8007dea:	4432      	add	r2, r6
 8007dec:	60a3      	str	r3, [r4, #8]
 8007dee:	6022      	str	r2, [r4, #0]
 8007df0:	2000      	movs	r0, #0
 8007df2:	e7db      	b.n	8007dac <__ssputs_r+0x58>
 8007df4:	462a      	mov	r2, r5
 8007df6:	f000 fb61 	bl	80084bc <_realloc_r>
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d1e1      	bne.n	8007dc4 <__ssputs_r+0x70>
 8007e00:	6921      	ldr	r1, [r4, #16]
 8007e02:	4650      	mov	r0, sl
 8007e04:	f000 fab0 	bl	8008368 <_free_r>
 8007e08:	e7c7      	b.n	8007d9a <__ssputs_r+0x46>
	...

08007e0c <_svfiprintf_r>:
 8007e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e10:	4698      	mov	r8, r3
 8007e12:	898b      	ldrh	r3, [r1, #12]
 8007e14:	061b      	lsls	r3, r3, #24
 8007e16:	b09d      	sub	sp, #116	; 0x74
 8007e18:	4607      	mov	r7, r0
 8007e1a:	460d      	mov	r5, r1
 8007e1c:	4614      	mov	r4, r2
 8007e1e:	d50e      	bpl.n	8007e3e <_svfiprintf_r+0x32>
 8007e20:	690b      	ldr	r3, [r1, #16]
 8007e22:	b963      	cbnz	r3, 8007e3e <_svfiprintf_r+0x32>
 8007e24:	2140      	movs	r1, #64	; 0x40
 8007e26:	f000 faef 	bl	8008408 <_malloc_r>
 8007e2a:	6028      	str	r0, [r5, #0]
 8007e2c:	6128      	str	r0, [r5, #16]
 8007e2e:	b920      	cbnz	r0, 8007e3a <_svfiprintf_r+0x2e>
 8007e30:	230c      	movs	r3, #12
 8007e32:	603b      	str	r3, [r7, #0]
 8007e34:	f04f 30ff 	mov.w	r0, #4294967295
 8007e38:	e0d1      	b.n	8007fde <_svfiprintf_r+0x1d2>
 8007e3a:	2340      	movs	r3, #64	; 0x40
 8007e3c:	616b      	str	r3, [r5, #20]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9309      	str	r3, [sp, #36]	; 0x24
 8007e42:	2320      	movs	r3, #32
 8007e44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e48:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e4c:	2330      	movs	r3, #48	; 0x30
 8007e4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ff8 <_svfiprintf_r+0x1ec>
 8007e52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e56:	f04f 0901 	mov.w	r9, #1
 8007e5a:	4623      	mov	r3, r4
 8007e5c:	469a      	mov	sl, r3
 8007e5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e62:	b10a      	cbz	r2, 8007e68 <_svfiprintf_r+0x5c>
 8007e64:	2a25      	cmp	r2, #37	; 0x25
 8007e66:	d1f9      	bne.n	8007e5c <_svfiprintf_r+0x50>
 8007e68:	ebba 0b04 	subs.w	fp, sl, r4
 8007e6c:	d00b      	beq.n	8007e86 <_svfiprintf_r+0x7a>
 8007e6e:	465b      	mov	r3, fp
 8007e70:	4622      	mov	r2, r4
 8007e72:	4629      	mov	r1, r5
 8007e74:	4638      	mov	r0, r7
 8007e76:	f7ff ff6d 	bl	8007d54 <__ssputs_r>
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	f000 80aa 	beq.w	8007fd4 <_svfiprintf_r+0x1c8>
 8007e80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e82:	445a      	add	r2, fp
 8007e84:	9209      	str	r2, [sp, #36]	; 0x24
 8007e86:	f89a 3000 	ldrb.w	r3, [sl]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 80a2 	beq.w	8007fd4 <_svfiprintf_r+0x1c8>
 8007e90:	2300      	movs	r3, #0
 8007e92:	f04f 32ff 	mov.w	r2, #4294967295
 8007e96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e9a:	f10a 0a01 	add.w	sl, sl, #1
 8007e9e:	9304      	str	r3, [sp, #16]
 8007ea0:	9307      	str	r3, [sp, #28]
 8007ea2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ea6:	931a      	str	r3, [sp, #104]	; 0x68
 8007ea8:	4654      	mov	r4, sl
 8007eaa:	2205      	movs	r2, #5
 8007eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb0:	4851      	ldr	r0, [pc, #324]	; (8007ff8 <_svfiprintf_r+0x1ec>)
 8007eb2:	f7f8 f9b5 	bl	8000220 <memchr>
 8007eb6:	9a04      	ldr	r2, [sp, #16]
 8007eb8:	b9d8      	cbnz	r0, 8007ef2 <_svfiprintf_r+0xe6>
 8007eba:	06d0      	lsls	r0, r2, #27
 8007ebc:	bf44      	itt	mi
 8007ebe:	2320      	movmi	r3, #32
 8007ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ec4:	0711      	lsls	r1, r2, #28
 8007ec6:	bf44      	itt	mi
 8007ec8:	232b      	movmi	r3, #43	; 0x2b
 8007eca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ece:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ed4:	d015      	beq.n	8007f02 <_svfiprintf_r+0xf6>
 8007ed6:	9a07      	ldr	r2, [sp, #28]
 8007ed8:	4654      	mov	r4, sl
 8007eda:	2000      	movs	r0, #0
 8007edc:	f04f 0c0a 	mov.w	ip, #10
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ee6:	3b30      	subs	r3, #48	; 0x30
 8007ee8:	2b09      	cmp	r3, #9
 8007eea:	d94e      	bls.n	8007f8a <_svfiprintf_r+0x17e>
 8007eec:	b1b0      	cbz	r0, 8007f1c <_svfiprintf_r+0x110>
 8007eee:	9207      	str	r2, [sp, #28]
 8007ef0:	e014      	b.n	8007f1c <_svfiprintf_r+0x110>
 8007ef2:	eba0 0308 	sub.w	r3, r0, r8
 8007ef6:	fa09 f303 	lsl.w	r3, r9, r3
 8007efa:	4313      	orrs	r3, r2
 8007efc:	9304      	str	r3, [sp, #16]
 8007efe:	46a2      	mov	sl, r4
 8007f00:	e7d2      	b.n	8007ea8 <_svfiprintf_r+0x9c>
 8007f02:	9b03      	ldr	r3, [sp, #12]
 8007f04:	1d19      	adds	r1, r3, #4
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	9103      	str	r1, [sp, #12]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	bfbb      	ittet	lt
 8007f0e:	425b      	neglt	r3, r3
 8007f10:	f042 0202 	orrlt.w	r2, r2, #2
 8007f14:	9307      	strge	r3, [sp, #28]
 8007f16:	9307      	strlt	r3, [sp, #28]
 8007f18:	bfb8      	it	lt
 8007f1a:	9204      	strlt	r2, [sp, #16]
 8007f1c:	7823      	ldrb	r3, [r4, #0]
 8007f1e:	2b2e      	cmp	r3, #46	; 0x2e
 8007f20:	d10c      	bne.n	8007f3c <_svfiprintf_r+0x130>
 8007f22:	7863      	ldrb	r3, [r4, #1]
 8007f24:	2b2a      	cmp	r3, #42	; 0x2a
 8007f26:	d135      	bne.n	8007f94 <_svfiprintf_r+0x188>
 8007f28:	9b03      	ldr	r3, [sp, #12]
 8007f2a:	1d1a      	adds	r2, r3, #4
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	9203      	str	r2, [sp, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	bfb8      	it	lt
 8007f34:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f38:	3402      	adds	r4, #2
 8007f3a:	9305      	str	r3, [sp, #20]
 8007f3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008008 <_svfiprintf_r+0x1fc>
 8007f40:	7821      	ldrb	r1, [r4, #0]
 8007f42:	2203      	movs	r2, #3
 8007f44:	4650      	mov	r0, sl
 8007f46:	f7f8 f96b 	bl	8000220 <memchr>
 8007f4a:	b140      	cbz	r0, 8007f5e <_svfiprintf_r+0x152>
 8007f4c:	2340      	movs	r3, #64	; 0x40
 8007f4e:	eba0 000a 	sub.w	r0, r0, sl
 8007f52:	fa03 f000 	lsl.w	r0, r3, r0
 8007f56:	9b04      	ldr	r3, [sp, #16]
 8007f58:	4303      	orrs	r3, r0
 8007f5a:	3401      	adds	r4, #1
 8007f5c:	9304      	str	r3, [sp, #16]
 8007f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f62:	4826      	ldr	r0, [pc, #152]	; (8007ffc <_svfiprintf_r+0x1f0>)
 8007f64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f68:	2206      	movs	r2, #6
 8007f6a:	f7f8 f959 	bl	8000220 <memchr>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d038      	beq.n	8007fe4 <_svfiprintf_r+0x1d8>
 8007f72:	4b23      	ldr	r3, [pc, #140]	; (8008000 <_svfiprintf_r+0x1f4>)
 8007f74:	bb1b      	cbnz	r3, 8007fbe <_svfiprintf_r+0x1b2>
 8007f76:	9b03      	ldr	r3, [sp, #12]
 8007f78:	3307      	adds	r3, #7
 8007f7a:	f023 0307 	bic.w	r3, r3, #7
 8007f7e:	3308      	adds	r3, #8
 8007f80:	9303      	str	r3, [sp, #12]
 8007f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f84:	4433      	add	r3, r6
 8007f86:	9309      	str	r3, [sp, #36]	; 0x24
 8007f88:	e767      	b.n	8007e5a <_svfiprintf_r+0x4e>
 8007f8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f8e:	460c      	mov	r4, r1
 8007f90:	2001      	movs	r0, #1
 8007f92:	e7a5      	b.n	8007ee0 <_svfiprintf_r+0xd4>
 8007f94:	2300      	movs	r3, #0
 8007f96:	3401      	adds	r4, #1
 8007f98:	9305      	str	r3, [sp, #20]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	f04f 0c0a 	mov.w	ip, #10
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fa6:	3a30      	subs	r2, #48	; 0x30
 8007fa8:	2a09      	cmp	r2, #9
 8007faa:	d903      	bls.n	8007fb4 <_svfiprintf_r+0x1a8>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d0c5      	beq.n	8007f3c <_svfiprintf_r+0x130>
 8007fb0:	9105      	str	r1, [sp, #20]
 8007fb2:	e7c3      	b.n	8007f3c <_svfiprintf_r+0x130>
 8007fb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fb8:	4604      	mov	r4, r0
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e7f0      	b.n	8007fa0 <_svfiprintf_r+0x194>
 8007fbe:	ab03      	add	r3, sp, #12
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	462a      	mov	r2, r5
 8007fc4:	4b0f      	ldr	r3, [pc, #60]	; (8008004 <_svfiprintf_r+0x1f8>)
 8007fc6:	a904      	add	r1, sp, #16
 8007fc8:	4638      	mov	r0, r7
 8007fca:	f3af 8000 	nop.w
 8007fce:	1c42      	adds	r2, r0, #1
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	d1d6      	bne.n	8007f82 <_svfiprintf_r+0x176>
 8007fd4:	89ab      	ldrh	r3, [r5, #12]
 8007fd6:	065b      	lsls	r3, r3, #25
 8007fd8:	f53f af2c 	bmi.w	8007e34 <_svfiprintf_r+0x28>
 8007fdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fde:	b01d      	add	sp, #116	; 0x74
 8007fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe4:	ab03      	add	r3, sp, #12
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	462a      	mov	r2, r5
 8007fea:	4b06      	ldr	r3, [pc, #24]	; (8008004 <_svfiprintf_r+0x1f8>)
 8007fec:	a904      	add	r1, sp, #16
 8007fee:	4638      	mov	r0, r7
 8007ff0:	f000 f87a 	bl	80080e8 <_printf_i>
 8007ff4:	e7eb      	b.n	8007fce <_svfiprintf_r+0x1c2>
 8007ff6:	bf00      	nop
 8007ff8:	080086a0 	.word	0x080086a0
 8007ffc:	080086aa 	.word	0x080086aa
 8008000:	00000000 	.word	0x00000000
 8008004:	08007d55 	.word	0x08007d55
 8008008:	080086a6 	.word	0x080086a6

0800800c <_printf_common>:
 800800c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008010:	4616      	mov	r6, r2
 8008012:	4699      	mov	r9, r3
 8008014:	688a      	ldr	r2, [r1, #8]
 8008016:	690b      	ldr	r3, [r1, #16]
 8008018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800801c:	4293      	cmp	r3, r2
 800801e:	bfb8      	it	lt
 8008020:	4613      	movlt	r3, r2
 8008022:	6033      	str	r3, [r6, #0]
 8008024:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008028:	4607      	mov	r7, r0
 800802a:	460c      	mov	r4, r1
 800802c:	b10a      	cbz	r2, 8008032 <_printf_common+0x26>
 800802e:	3301      	adds	r3, #1
 8008030:	6033      	str	r3, [r6, #0]
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	0699      	lsls	r1, r3, #26
 8008036:	bf42      	ittt	mi
 8008038:	6833      	ldrmi	r3, [r6, #0]
 800803a:	3302      	addmi	r3, #2
 800803c:	6033      	strmi	r3, [r6, #0]
 800803e:	6825      	ldr	r5, [r4, #0]
 8008040:	f015 0506 	ands.w	r5, r5, #6
 8008044:	d106      	bne.n	8008054 <_printf_common+0x48>
 8008046:	f104 0a19 	add.w	sl, r4, #25
 800804a:	68e3      	ldr	r3, [r4, #12]
 800804c:	6832      	ldr	r2, [r6, #0]
 800804e:	1a9b      	subs	r3, r3, r2
 8008050:	42ab      	cmp	r3, r5
 8008052:	dc26      	bgt.n	80080a2 <_printf_common+0x96>
 8008054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008058:	1e13      	subs	r3, r2, #0
 800805a:	6822      	ldr	r2, [r4, #0]
 800805c:	bf18      	it	ne
 800805e:	2301      	movne	r3, #1
 8008060:	0692      	lsls	r2, r2, #26
 8008062:	d42b      	bmi.n	80080bc <_printf_common+0xb0>
 8008064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008068:	4649      	mov	r1, r9
 800806a:	4638      	mov	r0, r7
 800806c:	47c0      	blx	r8
 800806e:	3001      	adds	r0, #1
 8008070:	d01e      	beq.n	80080b0 <_printf_common+0xa4>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	68e5      	ldr	r5, [r4, #12]
 8008076:	6832      	ldr	r2, [r6, #0]
 8008078:	f003 0306 	and.w	r3, r3, #6
 800807c:	2b04      	cmp	r3, #4
 800807e:	bf08      	it	eq
 8008080:	1aad      	subeq	r5, r5, r2
 8008082:	68a3      	ldr	r3, [r4, #8]
 8008084:	6922      	ldr	r2, [r4, #16]
 8008086:	bf0c      	ite	eq
 8008088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800808c:	2500      	movne	r5, #0
 800808e:	4293      	cmp	r3, r2
 8008090:	bfc4      	itt	gt
 8008092:	1a9b      	subgt	r3, r3, r2
 8008094:	18ed      	addgt	r5, r5, r3
 8008096:	2600      	movs	r6, #0
 8008098:	341a      	adds	r4, #26
 800809a:	42b5      	cmp	r5, r6
 800809c:	d11a      	bne.n	80080d4 <_printf_common+0xc8>
 800809e:	2000      	movs	r0, #0
 80080a0:	e008      	b.n	80080b4 <_printf_common+0xa8>
 80080a2:	2301      	movs	r3, #1
 80080a4:	4652      	mov	r2, sl
 80080a6:	4649      	mov	r1, r9
 80080a8:	4638      	mov	r0, r7
 80080aa:	47c0      	blx	r8
 80080ac:	3001      	adds	r0, #1
 80080ae:	d103      	bne.n	80080b8 <_printf_common+0xac>
 80080b0:	f04f 30ff 	mov.w	r0, #4294967295
 80080b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b8:	3501      	adds	r5, #1
 80080ba:	e7c6      	b.n	800804a <_printf_common+0x3e>
 80080bc:	18e1      	adds	r1, r4, r3
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	2030      	movs	r0, #48	; 0x30
 80080c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080c6:	4422      	add	r2, r4
 80080c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080d0:	3302      	adds	r3, #2
 80080d2:	e7c7      	b.n	8008064 <_printf_common+0x58>
 80080d4:	2301      	movs	r3, #1
 80080d6:	4622      	mov	r2, r4
 80080d8:	4649      	mov	r1, r9
 80080da:	4638      	mov	r0, r7
 80080dc:	47c0      	blx	r8
 80080de:	3001      	adds	r0, #1
 80080e0:	d0e6      	beq.n	80080b0 <_printf_common+0xa4>
 80080e2:	3601      	adds	r6, #1
 80080e4:	e7d9      	b.n	800809a <_printf_common+0x8e>
	...

080080e8 <_printf_i>:
 80080e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080ec:	460c      	mov	r4, r1
 80080ee:	4691      	mov	r9, r2
 80080f0:	7e27      	ldrb	r7, [r4, #24]
 80080f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80080f4:	2f78      	cmp	r7, #120	; 0x78
 80080f6:	4680      	mov	r8, r0
 80080f8:	469a      	mov	sl, r3
 80080fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080fe:	d807      	bhi.n	8008110 <_printf_i+0x28>
 8008100:	2f62      	cmp	r7, #98	; 0x62
 8008102:	d80a      	bhi.n	800811a <_printf_i+0x32>
 8008104:	2f00      	cmp	r7, #0
 8008106:	f000 80d8 	beq.w	80082ba <_printf_i+0x1d2>
 800810a:	2f58      	cmp	r7, #88	; 0x58
 800810c:	f000 80a3 	beq.w	8008256 <_printf_i+0x16e>
 8008110:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008118:	e03a      	b.n	8008190 <_printf_i+0xa8>
 800811a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800811e:	2b15      	cmp	r3, #21
 8008120:	d8f6      	bhi.n	8008110 <_printf_i+0x28>
 8008122:	a001      	add	r0, pc, #4	; (adr r0, 8008128 <_printf_i+0x40>)
 8008124:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008128:	08008181 	.word	0x08008181
 800812c:	08008195 	.word	0x08008195
 8008130:	08008111 	.word	0x08008111
 8008134:	08008111 	.word	0x08008111
 8008138:	08008111 	.word	0x08008111
 800813c:	08008111 	.word	0x08008111
 8008140:	08008195 	.word	0x08008195
 8008144:	08008111 	.word	0x08008111
 8008148:	08008111 	.word	0x08008111
 800814c:	08008111 	.word	0x08008111
 8008150:	08008111 	.word	0x08008111
 8008154:	080082a1 	.word	0x080082a1
 8008158:	080081c5 	.word	0x080081c5
 800815c:	08008283 	.word	0x08008283
 8008160:	08008111 	.word	0x08008111
 8008164:	08008111 	.word	0x08008111
 8008168:	080082c3 	.word	0x080082c3
 800816c:	08008111 	.word	0x08008111
 8008170:	080081c5 	.word	0x080081c5
 8008174:	08008111 	.word	0x08008111
 8008178:	08008111 	.word	0x08008111
 800817c:	0800828b 	.word	0x0800828b
 8008180:	680b      	ldr	r3, [r1, #0]
 8008182:	1d1a      	adds	r2, r3, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	600a      	str	r2, [r1, #0]
 8008188:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800818c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008190:	2301      	movs	r3, #1
 8008192:	e0a3      	b.n	80082dc <_printf_i+0x1f4>
 8008194:	6825      	ldr	r5, [r4, #0]
 8008196:	6808      	ldr	r0, [r1, #0]
 8008198:	062e      	lsls	r6, r5, #24
 800819a:	f100 0304 	add.w	r3, r0, #4
 800819e:	d50a      	bpl.n	80081b6 <_printf_i+0xce>
 80081a0:	6805      	ldr	r5, [r0, #0]
 80081a2:	600b      	str	r3, [r1, #0]
 80081a4:	2d00      	cmp	r5, #0
 80081a6:	da03      	bge.n	80081b0 <_printf_i+0xc8>
 80081a8:	232d      	movs	r3, #45	; 0x2d
 80081aa:	426d      	negs	r5, r5
 80081ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081b0:	485e      	ldr	r0, [pc, #376]	; (800832c <_printf_i+0x244>)
 80081b2:	230a      	movs	r3, #10
 80081b4:	e019      	b.n	80081ea <_printf_i+0x102>
 80081b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80081ba:	6805      	ldr	r5, [r0, #0]
 80081bc:	600b      	str	r3, [r1, #0]
 80081be:	bf18      	it	ne
 80081c0:	b22d      	sxthne	r5, r5
 80081c2:	e7ef      	b.n	80081a4 <_printf_i+0xbc>
 80081c4:	680b      	ldr	r3, [r1, #0]
 80081c6:	6825      	ldr	r5, [r4, #0]
 80081c8:	1d18      	adds	r0, r3, #4
 80081ca:	6008      	str	r0, [r1, #0]
 80081cc:	0628      	lsls	r0, r5, #24
 80081ce:	d501      	bpl.n	80081d4 <_printf_i+0xec>
 80081d0:	681d      	ldr	r5, [r3, #0]
 80081d2:	e002      	b.n	80081da <_printf_i+0xf2>
 80081d4:	0669      	lsls	r1, r5, #25
 80081d6:	d5fb      	bpl.n	80081d0 <_printf_i+0xe8>
 80081d8:	881d      	ldrh	r5, [r3, #0]
 80081da:	4854      	ldr	r0, [pc, #336]	; (800832c <_printf_i+0x244>)
 80081dc:	2f6f      	cmp	r7, #111	; 0x6f
 80081de:	bf0c      	ite	eq
 80081e0:	2308      	moveq	r3, #8
 80081e2:	230a      	movne	r3, #10
 80081e4:	2100      	movs	r1, #0
 80081e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081ea:	6866      	ldr	r6, [r4, #4]
 80081ec:	60a6      	str	r6, [r4, #8]
 80081ee:	2e00      	cmp	r6, #0
 80081f0:	bfa2      	ittt	ge
 80081f2:	6821      	ldrge	r1, [r4, #0]
 80081f4:	f021 0104 	bicge.w	r1, r1, #4
 80081f8:	6021      	strge	r1, [r4, #0]
 80081fa:	b90d      	cbnz	r5, 8008200 <_printf_i+0x118>
 80081fc:	2e00      	cmp	r6, #0
 80081fe:	d04d      	beq.n	800829c <_printf_i+0x1b4>
 8008200:	4616      	mov	r6, r2
 8008202:	fbb5 f1f3 	udiv	r1, r5, r3
 8008206:	fb03 5711 	mls	r7, r3, r1, r5
 800820a:	5dc7      	ldrb	r7, [r0, r7]
 800820c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008210:	462f      	mov	r7, r5
 8008212:	42bb      	cmp	r3, r7
 8008214:	460d      	mov	r5, r1
 8008216:	d9f4      	bls.n	8008202 <_printf_i+0x11a>
 8008218:	2b08      	cmp	r3, #8
 800821a:	d10b      	bne.n	8008234 <_printf_i+0x14c>
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	07df      	lsls	r7, r3, #31
 8008220:	d508      	bpl.n	8008234 <_printf_i+0x14c>
 8008222:	6923      	ldr	r3, [r4, #16]
 8008224:	6861      	ldr	r1, [r4, #4]
 8008226:	4299      	cmp	r1, r3
 8008228:	bfde      	ittt	le
 800822a:	2330      	movle	r3, #48	; 0x30
 800822c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008230:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008234:	1b92      	subs	r2, r2, r6
 8008236:	6122      	str	r2, [r4, #16]
 8008238:	f8cd a000 	str.w	sl, [sp]
 800823c:	464b      	mov	r3, r9
 800823e:	aa03      	add	r2, sp, #12
 8008240:	4621      	mov	r1, r4
 8008242:	4640      	mov	r0, r8
 8008244:	f7ff fee2 	bl	800800c <_printf_common>
 8008248:	3001      	adds	r0, #1
 800824a:	d14c      	bne.n	80082e6 <_printf_i+0x1fe>
 800824c:	f04f 30ff 	mov.w	r0, #4294967295
 8008250:	b004      	add	sp, #16
 8008252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008256:	4835      	ldr	r0, [pc, #212]	; (800832c <_printf_i+0x244>)
 8008258:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	680e      	ldr	r6, [r1, #0]
 8008260:	061f      	lsls	r7, r3, #24
 8008262:	f856 5b04 	ldr.w	r5, [r6], #4
 8008266:	600e      	str	r6, [r1, #0]
 8008268:	d514      	bpl.n	8008294 <_printf_i+0x1ac>
 800826a:	07d9      	lsls	r1, r3, #31
 800826c:	bf44      	itt	mi
 800826e:	f043 0320 	orrmi.w	r3, r3, #32
 8008272:	6023      	strmi	r3, [r4, #0]
 8008274:	b91d      	cbnz	r5, 800827e <_printf_i+0x196>
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	f023 0320 	bic.w	r3, r3, #32
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	2310      	movs	r3, #16
 8008280:	e7b0      	b.n	80081e4 <_printf_i+0xfc>
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	f043 0320 	orr.w	r3, r3, #32
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	2378      	movs	r3, #120	; 0x78
 800828c:	4828      	ldr	r0, [pc, #160]	; (8008330 <_printf_i+0x248>)
 800828e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008292:	e7e3      	b.n	800825c <_printf_i+0x174>
 8008294:	065e      	lsls	r6, r3, #25
 8008296:	bf48      	it	mi
 8008298:	b2ad      	uxthmi	r5, r5
 800829a:	e7e6      	b.n	800826a <_printf_i+0x182>
 800829c:	4616      	mov	r6, r2
 800829e:	e7bb      	b.n	8008218 <_printf_i+0x130>
 80082a0:	680b      	ldr	r3, [r1, #0]
 80082a2:	6826      	ldr	r6, [r4, #0]
 80082a4:	6960      	ldr	r0, [r4, #20]
 80082a6:	1d1d      	adds	r5, r3, #4
 80082a8:	600d      	str	r5, [r1, #0]
 80082aa:	0635      	lsls	r5, r6, #24
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	d501      	bpl.n	80082b4 <_printf_i+0x1cc>
 80082b0:	6018      	str	r0, [r3, #0]
 80082b2:	e002      	b.n	80082ba <_printf_i+0x1d2>
 80082b4:	0671      	lsls	r1, r6, #25
 80082b6:	d5fb      	bpl.n	80082b0 <_printf_i+0x1c8>
 80082b8:	8018      	strh	r0, [r3, #0]
 80082ba:	2300      	movs	r3, #0
 80082bc:	6123      	str	r3, [r4, #16]
 80082be:	4616      	mov	r6, r2
 80082c0:	e7ba      	b.n	8008238 <_printf_i+0x150>
 80082c2:	680b      	ldr	r3, [r1, #0]
 80082c4:	1d1a      	adds	r2, r3, #4
 80082c6:	600a      	str	r2, [r1, #0]
 80082c8:	681e      	ldr	r6, [r3, #0]
 80082ca:	6862      	ldr	r2, [r4, #4]
 80082cc:	2100      	movs	r1, #0
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7f7 ffa6 	bl	8000220 <memchr>
 80082d4:	b108      	cbz	r0, 80082da <_printf_i+0x1f2>
 80082d6:	1b80      	subs	r0, r0, r6
 80082d8:	6060      	str	r0, [r4, #4]
 80082da:	6863      	ldr	r3, [r4, #4]
 80082dc:	6123      	str	r3, [r4, #16]
 80082de:	2300      	movs	r3, #0
 80082e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082e4:	e7a8      	b.n	8008238 <_printf_i+0x150>
 80082e6:	6923      	ldr	r3, [r4, #16]
 80082e8:	4632      	mov	r2, r6
 80082ea:	4649      	mov	r1, r9
 80082ec:	4640      	mov	r0, r8
 80082ee:	47d0      	blx	sl
 80082f0:	3001      	adds	r0, #1
 80082f2:	d0ab      	beq.n	800824c <_printf_i+0x164>
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	079b      	lsls	r3, r3, #30
 80082f8:	d413      	bmi.n	8008322 <_printf_i+0x23a>
 80082fa:	68e0      	ldr	r0, [r4, #12]
 80082fc:	9b03      	ldr	r3, [sp, #12]
 80082fe:	4298      	cmp	r0, r3
 8008300:	bfb8      	it	lt
 8008302:	4618      	movlt	r0, r3
 8008304:	e7a4      	b.n	8008250 <_printf_i+0x168>
 8008306:	2301      	movs	r3, #1
 8008308:	4632      	mov	r2, r6
 800830a:	4649      	mov	r1, r9
 800830c:	4640      	mov	r0, r8
 800830e:	47d0      	blx	sl
 8008310:	3001      	adds	r0, #1
 8008312:	d09b      	beq.n	800824c <_printf_i+0x164>
 8008314:	3501      	adds	r5, #1
 8008316:	68e3      	ldr	r3, [r4, #12]
 8008318:	9903      	ldr	r1, [sp, #12]
 800831a:	1a5b      	subs	r3, r3, r1
 800831c:	42ab      	cmp	r3, r5
 800831e:	dcf2      	bgt.n	8008306 <_printf_i+0x21e>
 8008320:	e7eb      	b.n	80082fa <_printf_i+0x212>
 8008322:	2500      	movs	r5, #0
 8008324:	f104 0619 	add.w	r6, r4, #25
 8008328:	e7f5      	b.n	8008316 <_printf_i+0x22e>
 800832a:	bf00      	nop
 800832c:	080086b1 	.word	0x080086b1
 8008330:	080086c2 	.word	0x080086c2

08008334 <memmove>:
 8008334:	4288      	cmp	r0, r1
 8008336:	b510      	push	{r4, lr}
 8008338:	eb01 0402 	add.w	r4, r1, r2
 800833c:	d902      	bls.n	8008344 <memmove+0x10>
 800833e:	4284      	cmp	r4, r0
 8008340:	4623      	mov	r3, r4
 8008342:	d807      	bhi.n	8008354 <memmove+0x20>
 8008344:	1e43      	subs	r3, r0, #1
 8008346:	42a1      	cmp	r1, r4
 8008348:	d008      	beq.n	800835c <memmove+0x28>
 800834a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800834e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008352:	e7f8      	b.n	8008346 <memmove+0x12>
 8008354:	4402      	add	r2, r0
 8008356:	4601      	mov	r1, r0
 8008358:	428a      	cmp	r2, r1
 800835a:	d100      	bne.n	800835e <memmove+0x2a>
 800835c:	bd10      	pop	{r4, pc}
 800835e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008366:	e7f7      	b.n	8008358 <memmove+0x24>

08008368 <_free_r>:
 8008368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800836a:	2900      	cmp	r1, #0
 800836c:	d048      	beq.n	8008400 <_free_r+0x98>
 800836e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008372:	9001      	str	r0, [sp, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	f1a1 0404 	sub.w	r4, r1, #4
 800837a:	bfb8      	it	lt
 800837c:	18e4      	addlt	r4, r4, r3
 800837e:	f000 f8d3 	bl	8008528 <__malloc_lock>
 8008382:	4a20      	ldr	r2, [pc, #128]	; (8008404 <_free_r+0x9c>)
 8008384:	9801      	ldr	r0, [sp, #4]
 8008386:	6813      	ldr	r3, [r2, #0]
 8008388:	4615      	mov	r5, r2
 800838a:	b933      	cbnz	r3, 800839a <_free_r+0x32>
 800838c:	6063      	str	r3, [r4, #4]
 800838e:	6014      	str	r4, [r2, #0]
 8008390:	b003      	add	sp, #12
 8008392:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008396:	f000 b8cd 	b.w	8008534 <__malloc_unlock>
 800839a:	42a3      	cmp	r3, r4
 800839c:	d90b      	bls.n	80083b6 <_free_r+0x4e>
 800839e:	6821      	ldr	r1, [r4, #0]
 80083a0:	1862      	adds	r2, r4, r1
 80083a2:	4293      	cmp	r3, r2
 80083a4:	bf04      	itt	eq
 80083a6:	681a      	ldreq	r2, [r3, #0]
 80083a8:	685b      	ldreq	r3, [r3, #4]
 80083aa:	6063      	str	r3, [r4, #4]
 80083ac:	bf04      	itt	eq
 80083ae:	1852      	addeq	r2, r2, r1
 80083b0:	6022      	streq	r2, [r4, #0]
 80083b2:	602c      	str	r4, [r5, #0]
 80083b4:	e7ec      	b.n	8008390 <_free_r+0x28>
 80083b6:	461a      	mov	r2, r3
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	b10b      	cbz	r3, 80083c0 <_free_r+0x58>
 80083bc:	42a3      	cmp	r3, r4
 80083be:	d9fa      	bls.n	80083b6 <_free_r+0x4e>
 80083c0:	6811      	ldr	r1, [r2, #0]
 80083c2:	1855      	adds	r5, r2, r1
 80083c4:	42a5      	cmp	r5, r4
 80083c6:	d10b      	bne.n	80083e0 <_free_r+0x78>
 80083c8:	6824      	ldr	r4, [r4, #0]
 80083ca:	4421      	add	r1, r4
 80083cc:	1854      	adds	r4, r2, r1
 80083ce:	42a3      	cmp	r3, r4
 80083d0:	6011      	str	r1, [r2, #0]
 80083d2:	d1dd      	bne.n	8008390 <_free_r+0x28>
 80083d4:	681c      	ldr	r4, [r3, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	6053      	str	r3, [r2, #4]
 80083da:	4421      	add	r1, r4
 80083dc:	6011      	str	r1, [r2, #0]
 80083de:	e7d7      	b.n	8008390 <_free_r+0x28>
 80083e0:	d902      	bls.n	80083e8 <_free_r+0x80>
 80083e2:	230c      	movs	r3, #12
 80083e4:	6003      	str	r3, [r0, #0]
 80083e6:	e7d3      	b.n	8008390 <_free_r+0x28>
 80083e8:	6825      	ldr	r5, [r4, #0]
 80083ea:	1961      	adds	r1, r4, r5
 80083ec:	428b      	cmp	r3, r1
 80083ee:	bf04      	itt	eq
 80083f0:	6819      	ldreq	r1, [r3, #0]
 80083f2:	685b      	ldreq	r3, [r3, #4]
 80083f4:	6063      	str	r3, [r4, #4]
 80083f6:	bf04      	itt	eq
 80083f8:	1949      	addeq	r1, r1, r5
 80083fa:	6021      	streq	r1, [r4, #0]
 80083fc:	6054      	str	r4, [r2, #4]
 80083fe:	e7c7      	b.n	8008390 <_free_r+0x28>
 8008400:	b003      	add	sp, #12
 8008402:	bd30      	pop	{r4, r5, pc}
 8008404:	200045bc 	.word	0x200045bc

08008408 <_malloc_r>:
 8008408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840a:	1ccd      	adds	r5, r1, #3
 800840c:	f025 0503 	bic.w	r5, r5, #3
 8008410:	3508      	adds	r5, #8
 8008412:	2d0c      	cmp	r5, #12
 8008414:	bf38      	it	cc
 8008416:	250c      	movcc	r5, #12
 8008418:	2d00      	cmp	r5, #0
 800841a:	4606      	mov	r6, r0
 800841c:	db01      	blt.n	8008422 <_malloc_r+0x1a>
 800841e:	42a9      	cmp	r1, r5
 8008420:	d903      	bls.n	800842a <_malloc_r+0x22>
 8008422:	230c      	movs	r3, #12
 8008424:	6033      	str	r3, [r6, #0]
 8008426:	2000      	movs	r0, #0
 8008428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800842a:	f000 f87d 	bl	8008528 <__malloc_lock>
 800842e:	4921      	ldr	r1, [pc, #132]	; (80084b4 <_malloc_r+0xac>)
 8008430:	680a      	ldr	r2, [r1, #0]
 8008432:	4614      	mov	r4, r2
 8008434:	b99c      	cbnz	r4, 800845e <_malloc_r+0x56>
 8008436:	4f20      	ldr	r7, [pc, #128]	; (80084b8 <_malloc_r+0xb0>)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	b923      	cbnz	r3, 8008446 <_malloc_r+0x3e>
 800843c:	4621      	mov	r1, r4
 800843e:	4630      	mov	r0, r6
 8008440:	f000 f862 	bl	8008508 <_sbrk_r>
 8008444:	6038      	str	r0, [r7, #0]
 8008446:	4629      	mov	r1, r5
 8008448:	4630      	mov	r0, r6
 800844a:	f000 f85d 	bl	8008508 <_sbrk_r>
 800844e:	1c43      	adds	r3, r0, #1
 8008450:	d123      	bne.n	800849a <_malloc_r+0x92>
 8008452:	230c      	movs	r3, #12
 8008454:	6033      	str	r3, [r6, #0]
 8008456:	4630      	mov	r0, r6
 8008458:	f000 f86c 	bl	8008534 <__malloc_unlock>
 800845c:	e7e3      	b.n	8008426 <_malloc_r+0x1e>
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	1b5b      	subs	r3, r3, r5
 8008462:	d417      	bmi.n	8008494 <_malloc_r+0x8c>
 8008464:	2b0b      	cmp	r3, #11
 8008466:	d903      	bls.n	8008470 <_malloc_r+0x68>
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	441c      	add	r4, r3
 800846c:	6025      	str	r5, [r4, #0]
 800846e:	e004      	b.n	800847a <_malloc_r+0x72>
 8008470:	6863      	ldr	r3, [r4, #4]
 8008472:	42a2      	cmp	r2, r4
 8008474:	bf0c      	ite	eq
 8008476:	600b      	streq	r3, [r1, #0]
 8008478:	6053      	strne	r3, [r2, #4]
 800847a:	4630      	mov	r0, r6
 800847c:	f000 f85a 	bl	8008534 <__malloc_unlock>
 8008480:	f104 000b 	add.w	r0, r4, #11
 8008484:	1d23      	adds	r3, r4, #4
 8008486:	f020 0007 	bic.w	r0, r0, #7
 800848a:	1ac2      	subs	r2, r0, r3
 800848c:	d0cc      	beq.n	8008428 <_malloc_r+0x20>
 800848e:	1a1b      	subs	r3, r3, r0
 8008490:	50a3      	str	r3, [r4, r2]
 8008492:	e7c9      	b.n	8008428 <_malloc_r+0x20>
 8008494:	4622      	mov	r2, r4
 8008496:	6864      	ldr	r4, [r4, #4]
 8008498:	e7cc      	b.n	8008434 <_malloc_r+0x2c>
 800849a:	1cc4      	adds	r4, r0, #3
 800849c:	f024 0403 	bic.w	r4, r4, #3
 80084a0:	42a0      	cmp	r0, r4
 80084a2:	d0e3      	beq.n	800846c <_malloc_r+0x64>
 80084a4:	1a21      	subs	r1, r4, r0
 80084a6:	4630      	mov	r0, r6
 80084a8:	f000 f82e 	bl	8008508 <_sbrk_r>
 80084ac:	3001      	adds	r0, #1
 80084ae:	d1dd      	bne.n	800846c <_malloc_r+0x64>
 80084b0:	e7cf      	b.n	8008452 <_malloc_r+0x4a>
 80084b2:	bf00      	nop
 80084b4:	200045bc 	.word	0x200045bc
 80084b8:	200045c0 	.word	0x200045c0

080084bc <_realloc_r>:
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	4607      	mov	r7, r0
 80084c0:	4614      	mov	r4, r2
 80084c2:	460e      	mov	r6, r1
 80084c4:	b921      	cbnz	r1, 80084d0 <_realloc_r+0x14>
 80084c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80084ca:	4611      	mov	r1, r2
 80084cc:	f7ff bf9c 	b.w	8008408 <_malloc_r>
 80084d0:	b922      	cbnz	r2, 80084dc <_realloc_r+0x20>
 80084d2:	f7ff ff49 	bl	8008368 <_free_r>
 80084d6:	4625      	mov	r5, r4
 80084d8:	4628      	mov	r0, r5
 80084da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084dc:	f000 f830 	bl	8008540 <_malloc_usable_size_r>
 80084e0:	42a0      	cmp	r0, r4
 80084e2:	d20f      	bcs.n	8008504 <_realloc_r+0x48>
 80084e4:	4621      	mov	r1, r4
 80084e6:	4638      	mov	r0, r7
 80084e8:	f7ff ff8e 	bl	8008408 <_malloc_r>
 80084ec:	4605      	mov	r5, r0
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d0f2      	beq.n	80084d8 <_realloc_r+0x1c>
 80084f2:	4631      	mov	r1, r6
 80084f4:	4622      	mov	r2, r4
 80084f6:	f7ff fbef 	bl	8007cd8 <memcpy>
 80084fa:	4631      	mov	r1, r6
 80084fc:	4638      	mov	r0, r7
 80084fe:	f7ff ff33 	bl	8008368 <_free_r>
 8008502:	e7e9      	b.n	80084d8 <_realloc_r+0x1c>
 8008504:	4635      	mov	r5, r6
 8008506:	e7e7      	b.n	80084d8 <_realloc_r+0x1c>

08008508 <_sbrk_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	4d06      	ldr	r5, [pc, #24]	; (8008524 <_sbrk_r+0x1c>)
 800850c:	2300      	movs	r3, #0
 800850e:	4604      	mov	r4, r0
 8008510:	4608      	mov	r0, r1
 8008512:	602b      	str	r3, [r5, #0]
 8008514:	f7ff fb4a 	bl	8007bac <_sbrk>
 8008518:	1c43      	adds	r3, r0, #1
 800851a:	d102      	bne.n	8008522 <_sbrk_r+0x1a>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	b103      	cbz	r3, 8008522 <_sbrk_r+0x1a>
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	200047fc 	.word	0x200047fc

08008528 <__malloc_lock>:
 8008528:	4801      	ldr	r0, [pc, #4]	; (8008530 <__malloc_lock+0x8>)
 800852a:	f000 b811 	b.w	8008550 <__retarget_lock_acquire_recursive>
 800852e:	bf00      	nop
 8008530:	20004804 	.word	0x20004804

08008534 <__malloc_unlock>:
 8008534:	4801      	ldr	r0, [pc, #4]	; (800853c <__malloc_unlock+0x8>)
 8008536:	f000 b80c 	b.w	8008552 <__retarget_lock_release_recursive>
 800853a:	bf00      	nop
 800853c:	20004804 	.word	0x20004804

08008540 <_malloc_usable_size_r>:
 8008540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008544:	1f18      	subs	r0, r3, #4
 8008546:	2b00      	cmp	r3, #0
 8008548:	bfbc      	itt	lt
 800854a:	580b      	ldrlt	r3, [r1, r0]
 800854c:	18c0      	addlt	r0, r0, r3
 800854e:	4770      	bx	lr

08008550 <__retarget_lock_acquire_recursive>:
 8008550:	4770      	bx	lr

08008552 <__retarget_lock_release_recursive>:
 8008552:	4770      	bx	lr

08008554 <_init>:
 8008554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008556:	bf00      	nop
 8008558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855a:	bc08      	pop	{r3}
 800855c:	469e      	mov	lr, r3
 800855e:	4770      	bx	lr

08008560 <_fini>:
 8008560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008562:	bf00      	nop
 8008564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008566:	bc08      	pop	{r3}
 8008568:	469e      	mov	lr, r3
 800856a:	4770      	bx	lr
