
lab_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008524  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080086f4  080086f4  000186f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008858  08008858  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008858  08008858  00018858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008860  08008860  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008860  08008860  00018860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008864  08008864  00018864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08008868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004234  200000ec  08008954  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004320  08008954  00024320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c64  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039fe  00000000  00000000  00039d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  0003d780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  0003ec50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cb9  00000000  00000000  0003ff88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016748  00000000  00000000  00064c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd99e  00000000  00000000  0007b389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158d27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a38  00000000  00000000  00158d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ec 	.word	0x200000ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080086dc 	.word	0x080086dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000f0 	.word	0x200000f0
 800020c:	080086dc 	.word	0x080086dc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005bc:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <HAL_Init+0x40>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <HAL_Init+0x40>)
 80005c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_Init+0x40>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <HAL_Init+0x40>)
 80005ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_Init+0x40>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <HAL_Init+0x40>)
 80005da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e0:	2003      	movs	r0, #3
 80005e2:	f000 fd86 	bl	80010f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f007 fadc 	bl	8007ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005ec:	f007 f93c 	bl	8007868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023c00 	.word	0x40023c00

080005fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_IncTick+0x20>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_IncTick+0x24>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4413      	add	r3, r2
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <HAL_IncTick+0x24>)
 800060e:	6013      	str	r3, [r2, #0]
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000004 	.word	0x20000004
 8000620:	200040cc 	.word	0x200040cc

08000624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return uwTick;
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <HAL_GetTick+0x14>)
 800062a:	681b      	ldr	r3, [r3, #0]
}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	200040cc 	.word	0x200040cc

0800063c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000644:	2300      	movs	r3, #0
 8000646:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d101      	bne.n	8000652 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	e033      	b.n	80006ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	2b00      	cmp	r3, #0
 8000658:	d109      	bne.n	800066e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f007 f930 	bl	80078c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2200      	movs	r2, #0
 800066a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	f003 0310 	and.w	r3, r3, #16
 8000676:	2b00      	cmp	r3, #0
 8000678:	d118      	bne.n	80006ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000682:	f023 0302 	bic.w	r3, r3, #2
 8000686:	f043 0202 	orr.w	r2, r3, #2
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 fb7c 	bl	8000d8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2200      	movs	r2, #0
 8000698:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069e:	f023 0303 	bic.w	r3, r3, #3
 80006a2:	f043 0201 	orr.w	r2, r3, #1
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	641a      	str	r2, [r3, #64]	; 0x40
 80006aa:	e001      	b.n	80006b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006ac:	2301      	movs	r3, #1
 80006ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d101      	bne.n	80006de <HAL_ADC_Start_IT+0x1a>
 80006da:	2302      	movs	r3, #2
 80006dc:	e0b0      	b.n	8000840 <HAL_ADC_Start_IT+0x17c>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2201      	movs	r2, #1
 80006e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d018      	beq.n	8000726 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	689a      	ldr	r2, [r3, #8]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f042 0201 	orr.w	r2, r2, #1
 8000702:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000704:	4b51      	ldr	r3, [pc, #324]	; (800084c <HAL_ADC_Start_IT+0x188>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a51      	ldr	r2, [pc, #324]	; (8000850 <HAL_ADC_Start_IT+0x18c>)
 800070a:	fba2 2303 	umull	r2, r3, r2, r3
 800070e:	0c9a      	lsrs	r2, r3, #18
 8000710:	4613      	mov	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4413      	add	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000718:	e002      	b.n	8000720 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	3b01      	subs	r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f9      	bne.n	800071a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	2b01      	cmp	r3, #1
 8000732:	f040 8084 	bne.w	800083e <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800073e:	f023 0301 	bic.w	r3, r3, #1
 8000742:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000754:	2b00      	cmp	r3, #0
 8000756:	d007      	beq.n	8000768 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000760:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000774:	d106      	bne.n	8000784 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	f023 0206 	bic.w	r2, r3, #6
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	645a      	str	r2, [r3, #68]	; 0x44
 8000782:	e002      	b.n	800078a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2200      	movs	r2, #0
 800078e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000792:	4b30      	ldr	r3, [pc, #192]	; (8000854 <HAL_ADC_Start_IT+0x190>)
 8000794:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800079e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	6812      	ldr	r2, [r2, #0]
 80007aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007ae:	f043 0320 	orr.w	r3, r3, #32
 80007b2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	f003 031f 	and.w	r3, r3, #31
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d12a      	bne.n	8000816 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a24      	ldr	r2, [pc, #144]	; (8000858 <HAL_ADC_Start_IT+0x194>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d015      	beq.n	80007f6 <HAL_ADC_Start_IT+0x132>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a23      	ldr	r2, [pc, #140]	; (800085c <HAL_ADC_Start_IT+0x198>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d105      	bne.n	80007e0 <HAL_ADC_Start_IT+0x11c>
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <HAL_ADC_Start_IT+0x190>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f003 031f 	and.w	r3, r3, #31
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d00a      	beq.n	80007f6 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a1e      	ldr	r2, [pc, #120]	; (8000860 <HAL_ADC_Start_IT+0x19c>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d129      	bne.n	800083e <HAL_ADC_Start_IT+0x17a>
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <HAL_ADC_Start_IT+0x190>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f003 0310 	and.w	r3, r3, #16
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d123      	bne.n	800083e <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000800:	2b00      	cmp	r3, #0
 8000802:	d11c      	bne.n	800083e <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	689a      	ldr	r2, [r3, #8]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	e013      	b.n	800083e <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <HAL_ADC_Start_IT+0x194>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d10e      	bne.n	800083e <HAL_ADC_Start_IT+0x17a>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800082a:	2b00      	cmp	r3, #0
 800082c:	d107      	bne.n	800083e <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	689a      	ldr	r2, [r3, #8]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800083c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	20000084 	.word	0x20000084
 8000850:	431bde83 	.word	0x431bde83
 8000854:	40012300 	.word	0x40012300
 8000858:	40012000 	.word	0x40012000
 800085c:	40012100 	.word	0x40012100
 8000860:	40012200 	.word	0x40012200

08000864 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	2b02      	cmp	r3, #2
 8000880:	bf0c      	ite	eq
 8000882:	2301      	moveq	r3, #1
 8000884:	2300      	movne	r3, #0
 8000886:	b2db      	uxtb	r3, r3
 8000888:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	f003 0320 	and.w	r3, r3, #32
 8000894:	2b20      	cmp	r3, #32
 8000896:	bf0c      	ite	eq
 8000898:	2301      	moveq	r3, #1
 800089a:	2300      	movne	r3, #0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d049      	beq.n	800093a <HAL_ADC_IRQHandler+0xd6>
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d046      	beq.n	800093a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	f003 0310 	and.w	r3, r3, #16
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d105      	bne.n	80008c4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d12b      	bne.n	800092a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d127      	bne.n	800092a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d006      	beq.n	80008f6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d119      	bne.n	800092a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	685a      	ldr	r2, [r3, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f022 0220 	bic.w	r2, r2, #32
 8000904:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800091a:	2b00      	cmp	r3, #0
 800091c:	d105      	bne.n	800092a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	f043 0201 	orr.w	r2, r3, #1
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f006 fe5c 	bl	80075e8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f06f 0212 	mvn.w	r2, #18
 8000938:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f003 0304 	and.w	r3, r3, #4
 8000944:	2b04      	cmp	r3, #4
 8000946:	bf0c      	ite	eq
 8000948:	2301      	moveq	r3, #1
 800094a:	2300      	movne	r3, #0
 800094c:	b2db      	uxtb	r3, r3
 800094e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	2b80      	cmp	r3, #128	; 0x80
 800095c:	bf0c      	ite	eq
 800095e:	2301      	moveq	r3, #1
 8000960:	2300      	movne	r3, #0
 8000962:	b2db      	uxtb	r3, r3
 8000964:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d057      	beq.n	8000a1c <HAL_ADC_IRQHandler+0x1b8>
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d054      	beq.n	8000a1c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f003 0310 	and.w	r3, r3, #16
 800097a:	2b00      	cmp	r3, #0
 800097c:	d105      	bne.n	800098a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d139      	bne.n	8000a0c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800099e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d006      	beq.n	80009b4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d12b      	bne.n	8000a0c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d124      	bne.n	8000a0c <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d11d      	bne.n	8000a0c <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d119      	bne.n	8000a0c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	685a      	ldr	r2, [r3, #4]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d105      	bne.n	8000a0c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	f043 0201 	orr.w	r2, r3, #1
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 fab9 	bl	8000f84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f06f 020c 	mvn.w	r2, #12
 8000a1a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	bf0c      	ite	eq
 8000a2a:	2301      	moveq	r3, #1
 8000a2c:	2300      	movne	r3, #0
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3c:	2b40      	cmp	r3, #64	; 0x40
 8000a3e:	bf0c      	ite	eq
 8000a40:	2301      	moveq	r3, #1
 8000a42:	2300      	movne	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d017      	beq.n	8000a7e <HAL_ADC_IRQHandler+0x21a>
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d014      	beq.n	8000a7e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d10d      	bne.n	8000a7e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 f846 	bl	8000b00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f06f 0201 	mvn.w	r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f003 0320 	and.w	r3, r3, #32
 8000a88:	2b20      	cmp	r3, #32
 8000a8a:	bf0c      	ite	eq
 8000a8c:	2301      	moveq	r3, #1
 8000a8e:	2300      	movne	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000aa2:	bf0c      	ite	eq
 8000aa4:	2301      	moveq	r3, #1
 8000aa6:	2300      	movne	r3, #0
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d015      	beq.n	8000ade <HAL_ADC_IRQHandler+0x27a>
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d012      	beq.n	8000ade <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abc:	f043 0202 	orr.w	r2, r3, #2
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f06f 0220 	mvn.w	r2, #32
 8000acc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f000 f820 	bl	8000b14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f06f 0220 	mvn.w	r2, #32
 8000adc:	601a      	str	r2, [r3, #0]
  }
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d101      	bne.n	8000b44 <HAL_ADC_ConfigChannel+0x1c>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e113      	b.n	8000d6c <HAL_ADC_ConfigChannel+0x244>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2201      	movs	r2, #1
 8000b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b09      	cmp	r3, #9
 8000b52:	d925      	bls.n	8000ba0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68d9      	ldr	r1, [r3, #12]
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	4613      	mov	r3, r2
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	4413      	add	r3, r2
 8000b68:	3b1e      	subs	r3, #30
 8000b6a:	2207      	movs	r2, #7
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	43da      	mvns	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	400a      	ands	r2, r1
 8000b78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68d9      	ldr	r1, [r3, #12]
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	689a      	ldr	r2, [r3, #8]
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4403      	add	r3, r0
 8000b92:	3b1e      	subs	r3, #30
 8000b94:	409a      	lsls	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	e022      	b.n	8000be6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	6919      	ldr	r1, [r3, #16]
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	461a      	mov	r2, r3
 8000bae:	4613      	mov	r3, r2
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	4413      	add	r3, r2
 8000bb4:	2207      	movs	r2, #7
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	400a      	ands	r2, r1
 8000bc2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6919      	ldr	r1, [r3, #16]
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	689a      	ldr	r2, [r3, #8]
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4403      	add	r3, r0
 8000bdc:	409a      	lsls	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	430a      	orrs	r2, r1
 8000be4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d824      	bhi.n	8000c38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	3b05      	subs	r3, #5
 8000c00:	221f      	movs	r2, #31
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	400a      	ands	r2, r1
 8000c0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	4613      	mov	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	3b05      	subs	r3, #5
 8000c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	430a      	orrs	r2, r1
 8000c34:	635a      	str	r2, [r3, #52]	; 0x34
 8000c36:	e04c      	b.n	8000cd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2b0c      	cmp	r3, #12
 8000c3e:	d824      	bhi.n	8000c8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	3b23      	subs	r3, #35	; 0x23
 8000c52:	221f      	movs	r2, #31
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43da      	mvns	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	400a      	ands	r2, r1
 8000c60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	4613      	mov	r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	3b23      	subs	r3, #35	; 0x23
 8000c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	631a      	str	r2, [r3, #48]	; 0x30
 8000c88:	e023      	b.n	8000cd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	4613      	mov	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4413      	add	r3, r2
 8000c9a:	3b41      	subs	r3, #65	; 0x41
 8000c9c:	221f      	movs	r2, #31
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	400a      	ands	r2, r1
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3b41      	subs	r3, #65	; 0x41
 8000cc6:	fa00 f203 	lsl.w	r2, r0, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <HAL_ADC_ConfigChannel+0x250>)
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <HAL_ADC_ConfigChannel+0x254>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d10f      	bne.n	8000d00 <HAL_ADC_ConfigChannel+0x1d8>
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b12      	cmp	r3, #18
 8000ce6:	d10b      	bne.n	8000d00 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <HAL_ADC_ConfigChannel+0x254>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12b      	bne.n	8000d62 <HAL_ADC_ConfigChannel+0x23a>
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a1c      	ldr	r2, [pc, #112]	; (8000d80 <HAL_ADC_ConfigChannel+0x258>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d003      	beq.n	8000d1c <HAL_ADC_ConfigChannel+0x1f4>
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b11      	cmp	r3, #17
 8000d1a:	d122      	bne.n	8000d62 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <HAL_ADC_ConfigChannel+0x258>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d111      	bne.n	8000d62 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_ADC_ConfigChannel+0x25c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a11      	ldr	r2, [pc, #68]	; (8000d88 <HAL_ADC_ConfigChannel+0x260>)
 8000d44:	fba2 2303 	umull	r2, r3, r2, r3
 8000d48:	0c9a      	lsrs	r2, r3, #18
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000d54:	e002      	b.n	8000d5c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f9      	bne.n	8000d56 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	40012300 	.word	0x40012300
 8000d7c:	40012000 	.word	0x40012000
 8000d80:	10000012 	.word	0x10000012
 8000d84:	20000084 	.word	0x20000084
 8000d88:	431bde83 	.word	0x431bde83

08000d8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d94:	4b79      	ldr	r3, [pc, #484]	; (8000f7c <ADC_Init+0x1f0>)
 8000d96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	431a      	orrs	r2, r3
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6859      	ldr	r1, [r3, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	021a      	lsls	r2, r3, #8
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000de4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	6859      	ldr	r1, [r3, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6899      	ldr	r1, [r3, #8]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68da      	ldr	r2, [r3, #12]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	430a      	orrs	r2, r1
 8000e18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1e:	4a58      	ldr	r2, [pc, #352]	; (8000f80 <ADC_Init+0x1f4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d022      	beq.n	8000e6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	6899      	ldr	r1, [r3, #8]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	430a      	orrs	r2, r1
 8000e44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6899      	ldr	r1, [r3, #8]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	e00f      	b.n	8000e8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f022 0202 	bic.w	r2, r2, #2
 8000e98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6899      	ldr	r1, [r3, #8]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7e1b      	ldrb	r3, [r3, #24]
 8000ea4:	005a      	lsls	r2, r3, #1
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d01b      	beq.n	8000ef0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ec6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000ed6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6859      	ldr	r1, [r3, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	035a      	lsls	r2, r3, #13
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	e007      	b.n	8000f00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000efe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	051a      	lsls	r2, r3, #20
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	430a      	orrs	r2, r1
 8000f24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6899      	ldr	r1, [r3, #8]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f42:	025a      	lsls	r2, r3, #9
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6899      	ldr	r1, [r3, #8]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	029a      	lsls	r2, r3, #10
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	609a      	str	r2, [r3, #8]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40012300 	.word	0x40012300
 8000f80:	0f000001 	.word	0x0f000001

08000f84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	2b00      	cmp	r3, #0
 800100c:	db0b      	blt.n	8001026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 021f 	and.w	r2, r3, #31
 8001014:	4907      	ldr	r1, [pc, #28]	; (8001034 <__NVIC_EnableIRQ+0x38>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	2001      	movs	r0, #1
 800101e:	fa00 f202 	lsl.w	r2, r0, r2
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e100 	.word	0xe000e100

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db0a      	blt.n	8001062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	490c      	ldr	r1, [pc, #48]	; (8001084 <__NVIC_SetPriority+0x4c>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001060:	e00a      	b.n	8001078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	; (8001088 <__NVIC_SetPriority+0x50>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b04      	subs	r3, #4
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	440b      	add	r3, r1
 8001076:	761a      	strb	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f1c3 0307 	rsb	r3, r3, #7
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf28      	it	cs
 80010aa:	2304      	movcs	r3, #4
 80010ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d902      	bls.n	80010bc <NVIC_EncodePriority+0x30>
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3b03      	subs	r3, #3
 80010ba:	e000      	b.n	80010be <NVIC_EncodePriority+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43d9      	mvns	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ff4c 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800111a:	f7ff ff61 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 800111e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	6978      	ldr	r0, [r7, #20]
 8001126:	f7ff ffb1 	bl	800108c <NVIC_EncodePriority>
 800112a:	4602      	mov	r2, r0
 800112c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff80 	bl	8001038 <__NVIC_SetPriority>
}
 8001138:	bf00      	nop
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff54 	bl	8000ffc <__NVIC_EnableIRQ>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff fa5c 	bl	8000624 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e099      	b.n	80012ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2202      	movs	r2, #2
 8001184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0201 	bic.w	r2, r2, #1
 8001196:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001198:	e00f      	b.n	80011ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800119a:	f7ff fa43 	bl	8000624 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b05      	cmp	r3, #5
 80011a6:	d908      	bls.n	80011ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2220      	movs	r2, #32
 80011ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2203      	movs	r2, #3
 80011b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e078      	b.n	80012ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1e8      	bne.n	800119a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <HAL_DMA_Init+0x158>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4313      	orrs	r3, r2
 800120a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	2b04      	cmp	r3, #4
 8001212:	d107      	bne.n	8001224 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	4313      	orrs	r3, r2
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4313      	orrs	r3, r2
 8001222:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f023 0307 	bic.w	r3, r3, #7
 800123a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4313      	orrs	r3, r2
 8001244:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	2b04      	cmp	r3, #4
 800124c:	d117      	bne.n	800127e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4313      	orrs	r3, r2
 8001256:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00e      	beq.n	800127e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 fa91 	bl	8001788 <DMA_CheckFifoParam>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d008      	beq.n	800127e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2240      	movs	r2, #64	; 0x40
 8001270:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800127a:	2301      	movs	r3, #1
 800127c:	e016      	b.n	80012ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 fa48 	bl	800171c <DMA_CalcBaseAndBitshift>
 800128c:	4603      	mov	r3, r0
 800128e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001294:	223f      	movs	r2, #63	; 0x3f
 8001296:	409a      	lsls	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	f010803f 	.word	0xf010803f

080012b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d101      	bne.n	80012de <HAL_DMA_Start_IT+0x26>
 80012da:	2302      	movs	r3, #2
 80012dc:	e040      	b.n	8001360 <HAL_DMA_Start_IT+0xa8>
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d12f      	bne.n	8001352 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2202      	movs	r2, #2
 80012f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2200      	movs	r2, #0
 80012fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 f9da 	bl	80016c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001310:	223f      	movs	r2, #63	; 0x3f
 8001312:	409a      	lsls	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0216 	orr.w	r2, r2, #22
 8001326:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	2b00      	cmp	r3, #0
 800132e:	d007      	beq.n	8001340 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0208 	orr.w	r2, r2, #8
 800133e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0201 	orr.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	e005      	b.n	800135e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800135a:	2302      	movs	r3, #2
 800135c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800135e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d004      	beq.n	8001386 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e00c      	b.n	80013a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2205      	movs	r2, #5
 800138a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0201 	bic.w	r2, r2, #1
 800139c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013b8:	4b92      	ldr	r3, [pc, #584]	; (8001604 <HAL_DMA_IRQHandler+0x258>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a92      	ldr	r2, [pc, #584]	; (8001608 <HAL_DMA_IRQHandler+0x25c>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	0a9b      	lsrs	r3, r3, #10
 80013c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d6:	2208      	movs	r2, #8
 80013d8:	409a      	lsls	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d01a      	beq.n	8001418 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d013      	beq.n	8001418 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0204 	bic.w	r2, r2, #4
 80013fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001404:	2208      	movs	r2, #8
 8001406:	409a      	lsls	r2, r3
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001410:	f043 0201 	orr.w	r2, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141c:	2201      	movs	r2, #1
 800141e:	409a      	lsls	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d012      	beq.n	800144e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00b      	beq.n	800144e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143a:	2201      	movs	r2, #1
 800143c:	409a      	lsls	r2, r3
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001446:	f043 0202 	orr.w	r2, r3, #2
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001452:	2204      	movs	r2, #4
 8001454:	409a      	lsls	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4013      	ands	r3, r2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d012      	beq.n	8001484 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00b      	beq.n	8001484 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001470:	2204      	movs	r2, #4
 8001472:	409a      	lsls	r2, r3
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147c:	f043 0204 	orr.w	r2, r3, #4
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001488:	2210      	movs	r2, #16
 800148a:	409a      	lsls	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4013      	ands	r3, r2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d043      	beq.n	800151c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d03c      	beq.n	800151c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a6:	2210      	movs	r2, #16
 80014a8:	409a      	lsls	r2, r3
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d018      	beq.n	80014ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d108      	bne.n	80014dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d024      	beq.n	800151c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	4798      	blx	r3
 80014da:	e01f      	b.n	800151c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d01b      	beq.n	800151c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	4798      	blx	r3
 80014ec:	e016      	b.n	800151c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d107      	bne.n	800150c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0208 	bic.w	r2, r2, #8
 800150a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001520:	2220      	movs	r2, #32
 8001522:	409a      	lsls	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 808e 	beq.w	800164a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 8086 	beq.w	800164a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001542:	2220      	movs	r2, #32
 8001544:	409a      	lsls	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b05      	cmp	r3, #5
 8001554:	d136      	bne.n	80015c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0216 	bic.w	r2, r2, #22
 8001564:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001574:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	2b00      	cmp	r3, #0
 800157c:	d103      	bne.n	8001586 <HAL_DMA_IRQHandler+0x1da>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001582:	2b00      	cmp	r3, #0
 8001584:	d007      	beq.n	8001596 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0208 	bic.w	r2, r2, #8
 8001594:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159a:	223f      	movs	r2, #63	; 0x3f
 800159c:	409a      	lsls	r2, r3
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d07d      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	4798      	blx	r3
        }
        return;
 80015c2:	e078      	b.n	80016b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d01c      	beq.n	800160c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d108      	bne.n	80015f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d030      	beq.n	800164a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	4798      	blx	r3
 80015f0:	e02b      	b.n	800164a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d027      	beq.n	800164a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	4798      	blx	r3
 8001602:	e022      	b.n	800164a <HAL_DMA_IRQHandler+0x29e>
 8001604:	20000084 	.word	0x20000084
 8001608:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10f      	bne.n	800163a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0210 	bic.w	r2, r2, #16
 8001628:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164e:	2b00      	cmp	r3, #0
 8001650:	d032      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d022      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2205      	movs	r2, #5
 8001662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0201 	bic.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	3301      	adds	r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	429a      	cmp	r2, r3
 8001680:	d307      	bcc.n	8001692 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f2      	bne.n	8001676 <HAL_DMA_IRQHandler+0x2ca>
 8001690:	e000      	b.n	8001694 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001692:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	4798      	blx	r3
 80016b4:	e000      	b.n	80016b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80016b6:	bf00      	nop
    }
  }
}
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop

080016c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b40      	cmp	r3, #64	; 0x40
 80016ec:	d108      	bne.n	8001700 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016fe:	e007      	b.n	8001710 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	60da      	str	r2, [r3, #12]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	3b10      	subs	r3, #16
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <DMA_CalcBaseAndBitshift+0x64>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	091b      	lsrs	r3, r3, #4
 8001734:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001736:	4a13      	ldr	r2, [pc, #76]	; (8001784 <DMA_CalcBaseAndBitshift+0x68>)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d909      	bls.n	800175e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001752:	f023 0303 	bic.w	r3, r3, #3
 8001756:	1d1a      	adds	r2, r3, #4
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	659a      	str	r2, [r3, #88]	; 0x58
 800175c:	e007      	b.n	800176e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001766:	f023 0303 	bic.w	r3, r3, #3
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001772:	4618      	mov	r0, r3
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	aaaaaaab 	.word	0xaaaaaaab
 8001784:	08008804 	.word	0x08008804

08001788 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d11f      	bne.n	80017e2 <DMA_CheckFifoParam+0x5a>
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d856      	bhi.n	8001856 <DMA_CheckFifoParam+0xce>
 80017a8:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <DMA_CheckFifoParam+0x28>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	080017c1 	.word	0x080017c1
 80017b4:	080017d3 	.word	0x080017d3
 80017b8:	080017c1 	.word	0x080017c1
 80017bc:	08001857 	.word	0x08001857
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d046      	beq.n	800185a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017d0:	e043      	b.n	800185a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017da:	d140      	bne.n	800185e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017e0:	e03d      	b.n	800185e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ea:	d121      	bne.n	8001830 <DMA_CheckFifoParam+0xa8>
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d837      	bhi.n	8001862 <DMA_CheckFifoParam+0xda>
 80017f2:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <DMA_CheckFifoParam+0x70>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001809 	.word	0x08001809
 80017fc:	0800180f 	.word	0x0800180f
 8001800:	08001809 	.word	0x08001809
 8001804:	08001821 	.word	0x08001821
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
      break;
 800180c:	e030      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d025      	beq.n	8001866 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800181e:	e022      	b.n	8001866 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001828:	d11f      	bne.n	800186a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800182e:	e01c      	b.n	800186a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d903      	bls.n	800183e <DMA_CheckFifoParam+0xb6>
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b03      	cmp	r3, #3
 800183a:	d003      	beq.n	8001844 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800183c:	e018      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
      break;
 8001842:	e015      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00e      	beq.n	800186e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
      break;
 8001854:	e00b      	b.n	800186e <DMA_CheckFifoParam+0xe6>
      break;
 8001856:	bf00      	nop
 8001858:	e00a      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
      break;
 800185a:	bf00      	nop
 800185c:	e008      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
      break;
 800185e:	bf00      	nop
 8001860:	e006      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
      break;
 8001862:	bf00      	nop
 8001864:	e004      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
      break;
 8001866:	bf00      	nop
 8001868:	e002      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
      break;   
 800186a:	bf00      	nop
 800186c:	e000      	b.n	8001870 <DMA_CheckFifoParam+0xe8>
      break;
 800186e:	bf00      	nop
    }
  } 
  
  return status; 
 8001870:	7bfb      	ldrb	r3, [r7, #15]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	e165      	b.n	8001b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800189c:	2201      	movs	r2, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8154 	bne.w	8001b62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d00b      	beq.n	80018da <HAL_GPIO_Init+0x5a>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d007      	beq.n	80018da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ce:	2b11      	cmp	r3, #17
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b12      	cmp	r3, #18
 80018d8:	d130      	bne.n	800193c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001910:	2201      	movs	r2, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 0201 	and.w	r2, r3, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0xfc>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b12      	cmp	r3, #18
 800197a:	d123      	bne.n	80019c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	69b9      	ldr	r1, [r7, #24]
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80ae 	beq.w	8001b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a5c      	ldr	r2, [pc, #368]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b5a      	ldr	r3, [pc, #360]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a22:	4a58      	ldr	r2, [pc, #352]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	220f      	movs	r2, #15
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4f      	ldr	r2, [pc, #316]	; (8001b88 <HAL_GPIO_Init+0x308>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d025      	beq.n	8001a9a <HAL_GPIO_Init+0x21a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4e      	ldr	r2, [pc, #312]	; (8001b8c <HAL_GPIO_Init+0x30c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d01f      	beq.n	8001a96 <HAL_GPIO_Init+0x216>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4d      	ldr	r2, [pc, #308]	; (8001b90 <HAL_GPIO_Init+0x310>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d019      	beq.n	8001a92 <HAL_GPIO_Init+0x212>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4c      	ldr	r2, [pc, #304]	; (8001b94 <HAL_GPIO_Init+0x314>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d013      	beq.n	8001a8e <HAL_GPIO_Init+0x20e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4b      	ldr	r2, [pc, #300]	; (8001b98 <HAL_GPIO_Init+0x318>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00d      	beq.n	8001a8a <HAL_GPIO_Init+0x20a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4a      	ldr	r2, [pc, #296]	; (8001b9c <HAL_GPIO_Init+0x31c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d007      	beq.n	8001a86 <HAL_GPIO_Init+0x206>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a49      	ldr	r2, [pc, #292]	; (8001ba0 <HAL_GPIO_Init+0x320>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_GPIO_Init+0x202>
 8001a7e:	2306      	movs	r3, #6
 8001a80:	e00c      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a82:	2307      	movs	r3, #7
 8001a84:	e00a      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a86:	2305      	movs	r3, #5
 8001a88:	e008      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e004      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	f002 0203 	and.w	r2, r2, #3
 8001aa2:	0092      	lsls	r2, r2, #2
 8001aa4:	4093      	lsls	r3, r2
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aac:	4935      	ldr	r1, [pc, #212]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aba:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <HAL_GPIO_Init+0x324>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ade:	4a31      	ldr	r2, [pc, #196]	; (8001ba4 <HAL_GPIO_Init+0x324>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ae4:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <HAL_GPIO_Init+0x324>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b08:	4a26      	ldr	r2, [pc, #152]	; (8001ba4 <HAL_GPIO_Init+0x324>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0e:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <HAL_GPIO_Init+0x324>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b32:	4a1c      	ldr	r2, [pc, #112]	; (8001ba4 <HAL_GPIO_Init+0x324>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b38:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <HAL_GPIO_Init+0x324>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b5c:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <HAL_GPIO_Init+0x324>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3301      	adds	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b0f      	cmp	r3, #15
 8001b6c:	f67f ae96 	bls.w	800189c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40013800 	.word	0x40013800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020c00 	.word	0x40020c00
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40021400 	.word	0x40021400
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	40013c00 	.word	0x40013c00

08001ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	807b      	strh	r3, [r7, #2]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb8:	787b      	ldrb	r3, [r7, #1]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc4:	e003      	b.n	8001bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bc6:	887b      	ldrh	r3, [r7, #2]
 8001bc8:	041a      	lsls	r2, r3, #16
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	619a      	str	r2, [r3, #24]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be8:	695a      	ldr	r2, [r3, #20]
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d006      	beq.n	8001c00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f005 fd28 	bl	8007650 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40013c00 	.word	0x40013c00

08001c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0cc      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b68      	ldr	r3, [pc, #416]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d90c      	bls.n	8001c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b65      	ldr	r3, [pc, #404]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b63      	ldr	r3, [pc, #396]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0b8      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c60:	4b59      	ldr	r3, [pc, #356]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a58      	ldr	r2, [pc, #352]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c78:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a52      	ldr	r2, [pc, #328]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	494d      	ldr	r1, [pc, #308]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d044      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d119      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e07f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cca:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e06f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cda:	4b3b      	ldr	r3, [pc, #236]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e067      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cea:	4b37      	ldr	r3, [pc, #220]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f023 0203 	bic.w	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4934      	ldr	r1, [pc, #208]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cfc:	f7fe fc92 	bl	8000624 <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d04:	f7fe fc8e 	bl	8000624 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e04f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 020c 	and.w	r2, r3, #12
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1eb      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d20c      	bcs.n	8001d54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e032      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4916      	ldr	r1, [pc, #88]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	490e      	ldr	r1, [pc, #56]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d92:	f000 f887 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8001d96:	4602      	mov	r2, r0
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	490a      	ldr	r1, [pc, #40]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	5ccb      	ldrb	r3, [r1, r3]
 8001da6:	fa22 f303 	lsr.w	r3, r2, r3
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f005 fef6 	bl	8007ba4 <HAL_InitTick>

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023c00 	.word	0x40023c00
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	0800880c 	.word	0x0800880c
 8001dd0:	20000084 	.word	0x20000084
 8001dd4:	20000000 	.word	0x20000000

08001dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_RCC_GetHCLKFreq+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000084 	.word	0x20000084

08001df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001df4:	f7ff fff0 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	0a9b      	lsrs	r3, r3, #10
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4903      	ldr	r1, [pc, #12]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	0800881c 	.word	0x0800881c

08001e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e1c:	f7ff ffdc 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0b5b      	lsrs	r3, r3, #13
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	0800881c 	.word	0x0800881c

08001e40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_RCC_GetClockConfig+0x5c>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0203 	and.w	r2, r3, #3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <HAL_RCC_GetClockConfig+0x5c>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <HAL_RCC_GetClockConfig+0x5c>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RCC_GetClockConfig+0x5c>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	08db      	lsrs	r3, r3, #3
 8001e7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e82:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <HAL_RCC_GetClockConfig+0x60>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 020f 	and.w	r2, r3, #15
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	601a      	str	r2, [r3, #0]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40023c00 	.word	0x40023c00

08001ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea8:	b088      	sub	sp, #32
 8001eaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ec0:	4bce      	ldr	r3, [pc, #824]	; (80021fc <HAL_RCC_GetSysClockFreq+0x358>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b0c      	cmp	r3, #12
 8001eca:	f200 818d 	bhi.w	80021e8 <HAL_RCC_GetSysClockFreq+0x344>
 8001ece:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <HAL_RCC_GetSysClockFreq+0x30>)
 8001ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed4:	08001f09 	.word	0x08001f09
 8001ed8:	080021e9 	.word	0x080021e9
 8001edc:	080021e9 	.word	0x080021e9
 8001ee0:	080021e9 	.word	0x080021e9
 8001ee4:	08001f0f 	.word	0x08001f0f
 8001ee8:	080021e9 	.word	0x080021e9
 8001eec:	080021e9 	.word	0x080021e9
 8001ef0:	080021e9 	.word	0x080021e9
 8001ef4:	08001f15 	.word	0x08001f15
 8001ef8:	080021e9 	.word	0x080021e9
 8001efc:	080021e9 	.word	0x080021e9
 8001f00:	080021e9 	.word	0x080021e9
 8001f04:	08002089 	.word	0x08002089
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f08:	4bbd      	ldr	r3, [pc, #756]	; (8002200 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f0a:	61bb      	str	r3, [r7, #24]
       break;
 8001f0c:	e16f      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f0e:	4bbd      	ldr	r3, [pc, #756]	; (8002204 <HAL_RCC_GetSysClockFreq+0x360>)
 8001f10:	61bb      	str	r3, [r7, #24]
      break;
 8001f12:	e16c      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f14:	4bb9      	ldr	r3, [pc, #740]	; (80021fc <HAL_RCC_GetSysClockFreq+0x358>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f1c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f1e:	4bb7      	ldr	r3, [pc, #732]	; (80021fc <HAL_RCC_GetSysClockFreq+0x358>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d053      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2a:	4bb4      	ldr	r3, [pc, #720]	; (80021fc <HAL_RCC_GetSysClockFreq+0x358>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	099b      	lsrs	r3, r3, #6
 8001f30:	461a      	mov	r2, r3
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f3a:	f04f 0100 	mov.w	r1, #0
 8001f3e:	ea02 0400 	and.w	r4, r2, r0
 8001f42:	603c      	str	r4, [r7, #0]
 8001f44:	400b      	ands	r3, r1
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	4629      	mov	r1, r5
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	014b      	lsls	r3, r1, #5
 8001f5a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f5e:	0142      	lsls	r2, r0, #5
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	4623      	mov	r3, r4
 8001f66:	1ac0      	subs	r0, r0, r3
 8001f68:	462b      	mov	r3, r5
 8001f6a:	eb61 0103 	sbc.w	r1, r1, r3
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	018b      	lsls	r3, r1, #6
 8001f78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f7c:	0182      	lsls	r2, r0, #6
 8001f7e:	1a12      	subs	r2, r2, r0
 8001f80:	eb63 0301 	sbc.w	r3, r3, r1
 8001f84:	f04f 0000 	mov.w	r0, #0
 8001f88:	f04f 0100 	mov.w	r1, #0
 8001f8c:	00d9      	lsls	r1, r3, #3
 8001f8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f92:	00d0      	lsls	r0, r2, #3
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4621      	mov	r1, r4
 8001f9a:	1852      	adds	r2, r2, r1
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	eb43 0101 	adc.w	r1, r3, r1
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	f04f 0000 	mov.w	r0, #0
 8001fa8:	f04f 0100 	mov.w	r1, #0
 8001fac:	0259      	lsls	r1, r3, #9
 8001fae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001fb2:	0250      	lsls	r0, r2, #9
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	f7fe f97c 	bl	80002c0 <__aeabi_uldivmod>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4613      	mov	r3, r2
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	e04c      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd2:	4b8a      	ldr	r3, [pc, #552]	; (80021fc <HAL_RCC_GetSysClockFreq+0x358>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	099b      	lsrs	r3, r3, #6
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fe2:	f04f 0100 	mov.w	r1, #0
 8001fe6:	ea02 0a00 	and.w	sl, r2, r0
 8001fea:	ea03 0b01 	and.w	fp, r3, r1
 8001fee:	4650      	mov	r0, sl
 8001ff0:	4659      	mov	r1, fp
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	014b      	lsls	r3, r1, #5
 8001ffc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002000:	0142      	lsls	r2, r0, #5
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	ebb0 000a 	subs.w	r0, r0, sl
 800200a:	eb61 010b 	sbc.w	r1, r1, fp
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	018b      	lsls	r3, r1, #6
 8002018:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800201c:	0182      	lsls	r2, r0, #6
 800201e:	1a12      	subs	r2, r2, r0
 8002020:	eb63 0301 	sbc.w	r3, r3, r1
 8002024:	f04f 0000 	mov.w	r0, #0
 8002028:	f04f 0100 	mov.w	r1, #0
 800202c:	00d9      	lsls	r1, r3, #3
 800202e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002032:	00d0      	lsls	r0, r2, #3
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	eb12 020a 	adds.w	r2, r2, sl
 800203c:	eb43 030b 	adc.w	r3, r3, fp
 8002040:	f04f 0000 	mov.w	r0, #0
 8002044:	f04f 0100 	mov.w	r1, #0
 8002048:	0299      	lsls	r1, r3, #10
 800204a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800204e:	0290      	lsls	r0, r2, #10
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	461a      	mov	r2, r3
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	f7fe f92e 	bl	80002c0 <__aeabi_uldivmod>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4613      	mov	r3, r2
 800206a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800206c:	4b63      	ldr	r3, [pc, #396]	; (80021fc <HAL_RCC_GetSysClockFreq+0x358>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	0c1b      	lsrs	r3, r3, #16
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	3301      	adds	r3, #1
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	fbb2 f3f3 	udiv	r3, r2, r3
 8002084:	61bb      	str	r3, [r7, #24]
      break;
 8002086:	e0b2      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002088:	4b5c      	ldr	r3, [pc, #368]	; (80021fc <HAL_RCC_GetSysClockFreq+0x358>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002090:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002092:	4b5a      	ldr	r3, [pc, #360]	; (80021fc <HAL_RCC_GetSysClockFreq+0x358>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d04d      	beq.n	800213a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209e:	4b57      	ldr	r3, [pc, #348]	; (80021fc <HAL_RCC_GetSysClockFreq+0x358>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	099b      	lsrs	r3, r3, #6
 80020a4:	461a      	mov	r2, r3
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020ae:	f04f 0100 	mov.w	r1, #0
 80020b2:	ea02 0800 	and.w	r8, r2, r0
 80020b6:	ea03 0901 	and.w	r9, r3, r1
 80020ba:	4640      	mov	r0, r8
 80020bc:	4649      	mov	r1, r9
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	014b      	lsls	r3, r1, #5
 80020c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020cc:	0142      	lsls	r2, r0, #5
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	ebb0 0008 	subs.w	r0, r0, r8
 80020d6:	eb61 0109 	sbc.w	r1, r1, r9
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	018b      	lsls	r3, r1, #6
 80020e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020e8:	0182      	lsls	r2, r0, #6
 80020ea:	1a12      	subs	r2, r2, r0
 80020ec:	eb63 0301 	sbc.w	r3, r3, r1
 80020f0:	f04f 0000 	mov.w	r0, #0
 80020f4:	f04f 0100 	mov.w	r1, #0
 80020f8:	00d9      	lsls	r1, r3, #3
 80020fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020fe:	00d0      	lsls	r0, r2, #3
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	eb12 0208 	adds.w	r2, r2, r8
 8002108:	eb43 0309 	adc.w	r3, r3, r9
 800210c:	f04f 0000 	mov.w	r0, #0
 8002110:	f04f 0100 	mov.w	r1, #0
 8002114:	0259      	lsls	r1, r3, #9
 8002116:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800211a:	0250      	lsls	r0, r2, #9
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4610      	mov	r0, r2
 8002122:	4619      	mov	r1, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	461a      	mov	r2, r3
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	f7fe f8c8 	bl	80002c0 <__aeabi_uldivmod>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4613      	mov	r3, r2
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	e04a      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800213a:	4b30      	ldr	r3, [pc, #192]	; (80021fc <HAL_RCC_GetSysClockFreq+0x358>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	099b      	lsrs	r3, r3, #6
 8002140:	461a      	mov	r2, r3
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	f240 10ff 	movw	r0, #511	; 0x1ff
 800214a:	f04f 0100 	mov.w	r1, #0
 800214e:	ea02 0400 	and.w	r4, r2, r0
 8002152:	ea03 0501 	and.w	r5, r3, r1
 8002156:	4620      	mov	r0, r4
 8002158:	4629      	mov	r1, r5
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	014b      	lsls	r3, r1, #5
 8002164:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002168:	0142      	lsls	r2, r0, #5
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	1b00      	subs	r0, r0, r4
 8002170:	eb61 0105 	sbc.w	r1, r1, r5
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	018b      	lsls	r3, r1, #6
 800217e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002182:	0182      	lsls	r2, r0, #6
 8002184:	1a12      	subs	r2, r2, r0
 8002186:	eb63 0301 	sbc.w	r3, r3, r1
 800218a:	f04f 0000 	mov.w	r0, #0
 800218e:	f04f 0100 	mov.w	r1, #0
 8002192:	00d9      	lsls	r1, r3, #3
 8002194:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002198:	00d0      	lsls	r0, r2, #3
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	1912      	adds	r2, r2, r4
 80021a0:	eb45 0303 	adc.w	r3, r5, r3
 80021a4:	f04f 0000 	mov.w	r0, #0
 80021a8:	f04f 0100 	mov.w	r1, #0
 80021ac:	0299      	lsls	r1, r3, #10
 80021ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021b2:	0290      	lsls	r0, r2, #10
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	461a      	mov	r2, r3
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	f7fe f87c 	bl	80002c0 <__aeabi_uldivmod>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4613      	mov	r3, r2
 80021ce:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_RCC_GetSysClockFreq+0x358>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	0f1b      	lsrs	r3, r3, #28
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	61bb      	str	r3, [r7, #24]
      break;
 80021e6:	e002      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_RCC_GetSysClockFreq+0x35c>)
 80021ea:	61bb      	str	r3, [r7, #24]
      break;
 80021ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ee:	69bb      	ldr	r3, [r7, #24]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3720      	adds	r7, #32
 80021f4:	46bd      	mov	sp, r7
 80021f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	00f42400 	.word	0x00f42400
 8002204:	007a1200 	.word	0x007a1200

08002208 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 8083 	beq.w	8002328 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002222:	4b95      	ldr	r3, [pc, #596]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b04      	cmp	r3, #4
 800222c:	d019      	beq.n	8002262 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800222e:	4b92      	ldr	r3, [pc, #584]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002236:	2b08      	cmp	r3, #8
 8002238:	d106      	bne.n	8002248 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800223a:	4b8f      	ldr	r3, [pc, #572]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002246:	d00c      	beq.n	8002262 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002248:	4b8b      	ldr	r3, [pc, #556]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002250:	2b0c      	cmp	r3, #12
 8002252:	d112      	bne.n	800227a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002254:	4b88      	ldr	r3, [pc, #544]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002260:	d10b      	bne.n	800227a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002262:	4b85      	ldr	r3, [pc, #532]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d05b      	beq.n	8002326 <HAL_RCC_OscConfig+0x11e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d157      	bne.n	8002326 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e216      	b.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002282:	d106      	bne.n	8002292 <HAL_RCC_OscConfig+0x8a>
 8002284:	4b7c      	ldr	r3, [pc, #496]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a7b      	ldr	r2, [pc, #492]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	e01d      	b.n	80022ce <HAL_RCC_OscConfig+0xc6>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800229a:	d10c      	bne.n	80022b6 <HAL_RCC_OscConfig+0xae>
 800229c:	4b76      	ldr	r3, [pc, #472]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a75      	ldr	r2, [pc, #468]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 80022a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b73      	ldr	r3, [pc, #460]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a72      	ldr	r2, [pc, #456]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 80022ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	e00b      	b.n	80022ce <HAL_RCC_OscConfig+0xc6>
 80022b6:	4b70      	ldr	r3, [pc, #448]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6f      	ldr	r2, [pc, #444]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 80022bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b6d      	ldr	r3, [pc, #436]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a6c      	ldr	r2, [pc, #432]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 80022c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d013      	beq.n	80022fe <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe f9a5 	bl	8000624 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022de:	f7fe f9a1 	bl	8000624 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b64      	cmp	r3, #100	; 0x64
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e1db      	b.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f0:	4b61      	ldr	r3, [pc, #388]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0xd6>
 80022fc:	e014      	b.n	8002328 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7fe f991 	bl	8000624 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002306:	f7fe f98d 	bl	8000624 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b64      	cmp	r3, #100	; 0x64
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e1c7      	b.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002318:	4b57      	ldr	r3, [pc, #348]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f0      	bne.n	8002306 <HAL_RCC_OscConfig+0xfe>
 8002324:	e000      	b.n	8002328 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002326:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d06f      	beq.n	8002414 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002334:	4b50      	ldr	r3, [pc, #320]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b00      	cmp	r3, #0
 800233e:	d017      	beq.n	8002370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002340:	4b4d      	ldr	r3, [pc, #308]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002348:	2b08      	cmp	r3, #8
 800234a:	d105      	bne.n	8002358 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800234c:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00b      	beq.n	8002370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002358:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002360:	2b0c      	cmp	r3, #12
 8002362:	d11c      	bne.n	800239e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002364:	4b44      	ldr	r3, [pc, #272]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d116      	bne.n	800239e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002370:	4b41      	ldr	r3, [pc, #260]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_RCC_OscConfig+0x180>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d001      	beq.n	8002388 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e18f      	b.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002388:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4938      	ldr	r1, [pc, #224]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 8002398:	4313      	orrs	r3, r2
 800239a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239c:	e03a      	b.n	8002414 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d020      	beq.n	80023e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a6:	4b35      	ldr	r3, [pc, #212]	; (800247c <HAL_RCC_OscConfig+0x274>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7fe f93a 	bl	8000624 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b4:	f7fe f936 	bl	8000624 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e170      	b.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c6:	4b2c      	ldr	r3, [pc, #176]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d2:	4b29      	ldr	r3, [pc, #164]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4925      	ldr	r1, [pc, #148]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]
 80023e6:	e015      	b.n	8002414 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e8:	4b24      	ldr	r3, [pc, #144]	; (800247c <HAL_RCC_OscConfig+0x274>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7fe f919 	bl	8000624 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f6:	f7fe f915 	bl	8000624 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e14f      	b.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f0      	bne.n	80023f6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	2b00      	cmp	r3, #0
 800241e:	d037      	beq.n	8002490 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d016      	beq.n	8002456 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_RCC_OscConfig+0x278>)
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe f8f9 	bl	8000624 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002436:	f7fe f8f5 	bl	8000624 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e12f      	b.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 800244a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x22e>
 8002454:	e01c      	b.n	8002490 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_RCC_OscConfig+0x278>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245c:	f7fe f8e2 	bl	8000624 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002462:	e00f      	b.n	8002484 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002464:	f7fe f8de 	bl	8000624 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d908      	bls.n	8002484 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e118      	b.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	42470000 	.word	0x42470000
 8002480:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002484:	4b8a      	ldr	r3, [pc, #552]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 8002486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1e9      	bne.n	8002464 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 8097 	beq.w	80025cc <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a2:	4b83      	ldr	r3, [pc, #524]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10f      	bne.n	80024ce <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	4b7f      	ldr	r3, [pc, #508]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	4a7e      	ldr	r2, [pc, #504]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 80024b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024bc:	6413      	str	r3, [r2, #64]	; 0x40
 80024be:	4b7c      	ldr	r3, [pc, #496]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024ca:	2301      	movs	r3, #1
 80024cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ce:	4b79      	ldr	r3, [pc, #484]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d118      	bne.n	800250c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024da:	4b76      	ldr	r3, [pc, #472]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a75      	ldr	r2, [pc, #468]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 80024e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e6:	f7fe f89d 	bl	8000624 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ee:	f7fe f899 	bl	8000624 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e0d3      	b.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002500:	4b6c      	ldr	r3, [pc, #432]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0x31a>
 8002514:	4b66      	ldr	r3, [pc, #408]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	4a65      	ldr	r2, [pc, #404]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6713      	str	r3, [r2, #112]	; 0x70
 8002520:	e01c      	b.n	800255c <HAL_RCC_OscConfig+0x354>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b05      	cmp	r3, #5
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x33c>
 800252a:	4b61      	ldr	r3, [pc, #388]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	4a60      	ldr	r2, [pc, #384]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 8002530:	f043 0304 	orr.w	r3, r3, #4
 8002534:	6713      	str	r3, [r2, #112]	; 0x70
 8002536:	4b5e      	ldr	r3, [pc, #376]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a5d      	ldr	r2, [pc, #372]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
 8002542:	e00b      	b.n	800255c <HAL_RCC_OscConfig+0x354>
 8002544:	4b5a      	ldr	r3, [pc, #360]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 8002546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002548:	4a59      	ldr	r2, [pc, #356]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 800254a:	f023 0301 	bic.w	r3, r3, #1
 800254e:	6713      	str	r3, [r2, #112]	; 0x70
 8002550:	4b57      	ldr	r3, [pc, #348]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	4a56      	ldr	r2, [pc, #344]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 8002556:	f023 0304 	bic.w	r3, r3, #4
 800255a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d015      	beq.n	8002590 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002564:	f7fe f85e 	bl	8000624 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256a:	e00a      	b.n	8002582 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800256c:	f7fe f85a 	bl	8000624 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	; 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e092      	b.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002582:	4b4b      	ldr	r3, [pc, #300]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0ee      	beq.n	800256c <HAL_RCC_OscConfig+0x364>
 800258e:	e014      	b.n	80025ba <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002590:	f7fe f848 	bl	8000624 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002596:	e00a      	b.n	80025ae <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002598:	f7fe f844 	bl	8000624 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e07c      	b.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ae:	4b40      	ldr	r3, [pc, #256]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1ee      	bne.n	8002598 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c0:	4b3b      	ldr	r3, [pc, #236]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	4a3a      	ldr	r2, [pc, #232]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 80025c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d068      	beq.n	80026a6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025d4:	4b36      	ldr	r3, [pc, #216]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d060      	beq.n	80026a2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d145      	bne.n	8002674 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e8:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <HAL_RCC_OscConfig+0x4b0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ee:	f7fe f819 	bl	8000624 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe f815 	bl	8000624 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e04f      	b.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002608:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f0      	bne.n	80025f6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69da      	ldr	r2, [r3, #28]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	019b      	lsls	r3, r3, #6
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	085b      	lsrs	r3, r3, #1
 800262c:	3b01      	subs	r3, #1
 800262e:	041b      	lsls	r3, r3, #16
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	061b      	lsls	r3, r3, #24
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	071b      	lsls	r3, r3, #28
 8002640:	491b      	ldr	r1, [pc, #108]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002646:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <HAL_RCC_OscConfig+0x4b0>)
 8002648:	2201      	movs	r2, #1
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fd ffea 	bl	8000624 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002654:	f7fd ffe6 	bl	8000624 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e020      	b.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002666:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x44c>
 8002672:	e018      	b.n	80026a6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002674:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <HAL_RCC_OscConfig+0x4b0>)
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7fd ffd3 	bl	8000624 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002682:	f7fd ffcf 	bl	8000624 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e009      	b.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_RCC_OscConfig+0x4a8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f0      	bne.n	8002682 <HAL_RCC_OscConfig+0x47a>
 80026a0:	e001      	b.n	80026a6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40007000 	.word	0x40007000
 80026b8:	42470060 	.word	0x42470060

080026bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e01d      	b.n	800270a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f005 f946 	bl	8007974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3304      	adds	r3, #4
 80026f8:	4619      	mov	r1, r3
 80026fa:	4610      	mov	r0, r2
 80026fc:	f000 fab6 	bl	8002c6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0201 	orr.w	r2, r2, #1
 8002728:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b06      	cmp	r3, #6
 800273a:	d007      	beq.n	800274c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e01d      	b.n	80027a8 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d106      	bne.n	8002786 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f815 	bl	80027b0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2202      	movs	r2, #2
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3304      	adds	r3, #4
 8002796:	4619      	mov	r1, r3
 8002798:	4610      	mov	r0, r2
 800279a:	f000 fa67 	bl	8002c6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d122      	bne.n	8002820 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d11b      	bne.n	8002820 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0202 	mvn.w	r2, #2
 80027f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fa12 	bl	8002c30 <HAL_TIM_IC_CaptureCallback>
 800280c:	e005      	b.n	800281a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fa04 	bl	8002c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fa15 	bl	8002c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b04      	cmp	r3, #4
 800282c:	d122      	bne.n	8002874 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b04      	cmp	r3, #4
 800283a:	d11b      	bne.n	8002874 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0204 	mvn.w	r2, #4
 8002844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2202      	movs	r2, #2
 800284a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f9e8 	bl	8002c30 <HAL_TIM_IC_CaptureCallback>
 8002860:	e005      	b.n	800286e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f9da 	bl	8002c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f9eb 	bl	8002c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b08      	cmp	r3, #8
 8002880:	d122      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b08      	cmp	r3, #8
 800288e:	d11b      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0208 	mvn.w	r2, #8
 8002898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2204      	movs	r2, #4
 800289e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f9be 	bl	8002c30 <HAL_TIM_IC_CaptureCallback>
 80028b4:	e005      	b.n	80028c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f9b0 	bl	8002c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f9c1 	bl	8002c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b10      	cmp	r3, #16
 80028d4:	d122      	bne.n	800291c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b10      	cmp	r3, #16
 80028e2:	d11b      	bne.n	800291c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0210 	mvn.w	r2, #16
 80028ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2208      	movs	r2, #8
 80028f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f994 	bl	8002c30 <HAL_TIM_IC_CaptureCallback>
 8002908:	e005      	b.n	8002916 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f986 	bl	8002c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f997 	bl	8002c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d10e      	bne.n	8002948 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d107      	bne.n	8002948 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0201 	mvn.w	r2, #1
 8002940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f004 ff62 	bl	800780c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002952:	2b80      	cmp	r3, #128	; 0x80
 8002954:	d10e      	bne.n	8002974 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002960:	2b80      	cmp	r3, #128	; 0x80
 8002962:	d107      	bne.n	8002974 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800296c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fcec 	bl	800334c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297e:	2b40      	cmp	r3, #64	; 0x40
 8002980:	d10e      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d107      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f95c 	bl	8002c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	d10e      	bne.n	80029cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d107      	bne.n	80029cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0220 	mvn.w	r2, #32
 80029c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fcb6 	bl	8003338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_TIM_OC_ConfigChannel+0x1a>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e04e      	b.n	8002a8c <HAL_TIM_OC_ConfigChannel+0xb8>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2202      	movs	r2, #2
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b0c      	cmp	r3, #12
 8002a02:	d839      	bhi.n	8002a78 <HAL_TIM_OC_ConfigChannel+0xa4>
 8002a04:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <HAL_TIM_OC_ConfigChannel+0x38>)
 8002a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0a:	bf00      	nop
 8002a0c:	08002a41 	.word	0x08002a41
 8002a10:	08002a79 	.word	0x08002a79
 8002a14:	08002a79 	.word	0x08002a79
 8002a18:	08002a79 	.word	0x08002a79
 8002a1c:	08002a4f 	.word	0x08002a4f
 8002a20:	08002a79 	.word	0x08002a79
 8002a24:	08002a79 	.word	0x08002a79
 8002a28:	08002a79 	.word	0x08002a79
 8002a2c:	08002a5d 	.word	0x08002a5d
 8002a30:	08002a79 	.word	0x08002a79
 8002a34:	08002a79 	.word	0x08002a79
 8002a38:	08002a79 	.word	0x08002a79
 8002a3c:	08002a6b 	.word	0x08002a6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f9b0 	bl	8002dac <TIM_OC1_SetConfig>
      break;
 8002a4c:	e015      	b.n	8002a7a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fa19 	bl	8002e8c <TIM_OC2_SetConfig>
      break;
 8002a5a:	e00e      	b.n	8002a7a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fa88 	bl	8002f78 <TIM_OC3_SetConfig>
      break;
 8002a68:	e007      	b.n	8002a7a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 faf5 	bl	8003060 <TIM_OC4_SetConfig>
      break;
 8002a76:	e000      	b.n	8002a7a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8002a78:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_TIM_ConfigClockSource+0x18>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e0b3      	b.n	8002c14 <HAL_TIM_ConfigClockSource+0x180>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ad2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae4:	d03e      	beq.n	8002b64 <HAL_TIM_ConfigClockSource+0xd0>
 8002ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aea:	f200 8087 	bhi.w	8002bfc <HAL_TIM_ConfigClockSource+0x168>
 8002aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af2:	f000 8085 	beq.w	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afa:	d87f      	bhi.n	8002bfc <HAL_TIM_ConfigClockSource+0x168>
 8002afc:	2b70      	cmp	r3, #112	; 0x70
 8002afe:	d01a      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0xa2>
 8002b00:	2b70      	cmp	r3, #112	; 0x70
 8002b02:	d87b      	bhi.n	8002bfc <HAL_TIM_ConfigClockSource+0x168>
 8002b04:	2b60      	cmp	r3, #96	; 0x60
 8002b06:	d050      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x116>
 8002b08:	2b60      	cmp	r3, #96	; 0x60
 8002b0a:	d877      	bhi.n	8002bfc <HAL_TIM_ConfigClockSource+0x168>
 8002b0c:	2b50      	cmp	r3, #80	; 0x50
 8002b0e:	d03c      	beq.n	8002b8a <HAL_TIM_ConfigClockSource+0xf6>
 8002b10:	2b50      	cmp	r3, #80	; 0x50
 8002b12:	d873      	bhi.n	8002bfc <HAL_TIM_ConfigClockSource+0x168>
 8002b14:	2b40      	cmp	r3, #64	; 0x40
 8002b16:	d058      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0x136>
 8002b18:	2b40      	cmp	r3, #64	; 0x40
 8002b1a:	d86f      	bhi.n	8002bfc <HAL_TIM_ConfigClockSource+0x168>
 8002b1c:	2b30      	cmp	r3, #48	; 0x30
 8002b1e:	d064      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0x156>
 8002b20:	2b30      	cmp	r3, #48	; 0x30
 8002b22:	d86b      	bhi.n	8002bfc <HAL_TIM_ConfigClockSource+0x168>
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d060      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0x156>
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d867      	bhi.n	8002bfc <HAL_TIM_ConfigClockSource+0x168>
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d05c      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0x156>
 8002b30:	2b10      	cmp	r3, #16
 8002b32:	d05a      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002b34:	e062      	b.n	8002bfc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6899      	ldr	r1, [r3, #8]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f000 fb5b 	bl	8003200 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b58:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	609a      	str	r2, [r3, #8]
      break;
 8002b62:	e04e      	b.n	8002c02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	6899      	ldr	r1, [r3, #8]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f000 fb44 	bl	8003200 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b86:	609a      	str	r2, [r3, #8]
      break;
 8002b88:	e03b      	b.n	8002c02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6859      	ldr	r1, [r3, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	461a      	mov	r2, r3
 8002b98:	f000 fab8 	bl	800310c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2150      	movs	r1, #80	; 0x50
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 fb11 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002ba8:	e02b      	b.n	8002c02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6859      	ldr	r1, [r3, #4]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f000 fad7 	bl	800316a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2160      	movs	r1, #96	; 0x60
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fb01 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002bc8:	e01b      	b.n	8002c02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6859      	ldr	r1, [r3, #4]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f000 fa98 	bl	800310c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2140      	movs	r1, #64	; 0x40
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 faf1 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002be8:	e00b      	b.n	8002c02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	f000 fae8 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002bfa:	e002      	b.n	8002c02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002bfc:	bf00      	nop
 8002bfe:	e000      	b.n	8002c02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a40      	ldr	r2, [pc, #256]	; (8002d80 <TIM_Base_SetConfig+0x114>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d013      	beq.n	8002cac <TIM_Base_SetConfig+0x40>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8a:	d00f      	beq.n	8002cac <TIM_Base_SetConfig+0x40>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a3d      	ldr	r2, [pc, #244]	; (8002d84 <TIM_Base_SetConfig+0x118>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00b      	beq.n	8002cac <TIM_Base_SetConfig+0x40>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a3c      	ldr	r2, [pc, #240]	; (8002d88 <TIM_Base_SetConfig+0x11c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d007      	beq.n	8002cac <TIM_Base_SetConfig+0x40>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a3b      	ldr	r2, [pc, #236]	; (8002d8c <TIM_Base_SetConfig+0x120>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d003      	beq.n	8002cac <TIM_Base_SetConfig+0x40>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a3a      	ldr	r2, [pc, #232]	; (8002d90 <TIM_Base_SetConfig+0x124>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d108      	bne.n	8002cbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a2f      	ldr	r2, [pc, #188]	; (8002d80 <TIM_Base_SetConfig+0x114>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d02b      	beq.n	8002d1e <TIM_Base_SetConfig+0xb2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ccc:	d027      	beq.n	8002d1e <TIM_Base_SetConfig+0xb2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a2c      	ldr	r2, [pc, #176]	; (8002d84 <TIM_Base_SetConfig+0x118>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d023      	beq.n	8002d1e <TIM_Base_SetConfig+0xb2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a2b      	ldr	r2, [pc, #172]	; (8002d88 <TIM_Base_SetConfig+0x11c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01f      	beq.n	8002d1e <TIM_Base_SetConfig+0xb2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a2a      	ldr	r2, [pc, #168]	; (8002d8c <TIM_Base_SetConfig+0x120>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d01b      	beq.n	8002d1e <TIM_Base_SetConfig+0xb2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a29      	ldr	r2, [pc, #164]	; (8002d90 <TIM_Base_SetConfig+0x124>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d017      	beq.n	8002d1e <TIM_Base_SetConfig+0xb2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a28      	ldr	r2, [pc, #160]	; (8002d94 <TIM_Base_SetConfig+0x128>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <TIM_Base_SetConfig+0xb2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a27      	ldr	r2, [pc, #156]	; (8002d98 <TIM_Base_SetConfig+0x12c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00f      	beq.n	8002d1e <TIM_Base_SetConfig+0xb2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a26      	ldr	r2, [pc, #152]	; (8002d9c <TIM_Base_SetConfig+0x130>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00b      	beq.n	8002d1e <TIM_Base_SetConfig+0xb2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a25      	ldr	r2, [pc, #148]	; (8002da0 <TIM_Base_SetConfig+0x134>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d007      	beq.n	8002d1e <TIM_Base_SetConfig+0xb2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a24      	ldr	r2, [pc, #144]	; (8002da4 <TIM_Base_SetConfig+0x138>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d003      	beq.n	8002d1e <TIM_Base_SetConfig+0xb2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a23      	ldr	r2, [pc, #140]	; (8002da8 <TIM_Base_SetConfig+0x13c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d108      	bne.n	8002d30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <TIM_Base_SetConfig+0x114>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d003      	beq.n	8002d64 <TIM_Base_SetConfig+0xf8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <TIM_Base_SetConfig+0x124>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d103      	bne.n	8002d6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	615a      	str	r2, [r3, #20]
}
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40010000 	.word	0x40010000
 8002d84:	40000400 	.word	0x40000400
 8002d88:	40000800 	.word	0x40000800
 8002d8c:	40000c00 	.word	0x40000c00
 8002d90:	40010400 	.word	0x40010400
 8002d94:	40014000 	.word	0x40014000
 8002d98:	40014400 	.word	0x40014400
 8002d9c:	40014800 	.word	0x40014800
 8002da0:	40001800 	.word	0x40001800
 8002da4:	40001c00 	.word	0x40001c00
 8002da8:	40002000 	.word	0x40002000

08002dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	f023 0201 	bic.w	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0303 	bic.w	r3, r3, #3
 8002de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f023 0302 	bic.w	r3, r3, #2
 8002df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a20      	ldr	r2, [pc, #128]	; (8002e84 <TIM_OC1_SetConfig+0xd8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d003      	beq.n	8002e10 <TIM_OC1_SetConfig+0x64>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a1f      	ldr	r2, [pc, #124]	; (8002e88 <TIM_OC1_SetConfig+0xdc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d10c      	bne.n	8002e2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f023 0308 	bic.w	r3, r3, #8
 8002e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f023 0304 	bic.w	r3, r3, #4
 8002e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a15      	ldr	r2, [pc, #84]	; (8002e84 <TIM_OC1_SetConfig+0xd8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d003      	beq.n	8002e3a <TIM_OC1_SetConfig+0x8e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a14      	ldr	r2, [pc, #80]	; (8002e88 <TIM_OC1_SetConfig+0xdc>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d111      	bne.n	8002e5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	621a      	str	r2, [r3, #32]
}
 8002e78:	bf00      	nop
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	40010000 	.word	0x40010000
 8002e88:	40010400 	.word	0x40010400

08002e8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f023 0210 	bic.w	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	021b      	lsls	r3, r3, #8
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f023 0320 	bic.w	r3, r3, #32
 8002ed6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a22      	ldr	r2, [pc, #136]	; (8002f70 <TIM_OC2_SetConfig+0xe4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d003      	beq.n	8002ef4 <TIM_OC2_SetConfig+0x68>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a21      	ldr	r2, [pc, #132]	; (8002f74 <TIM_OC2_SetConfig+0xe8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d10d      	bne.n	8002f10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a17      	ldr	r2, [pc, #92]	; (8002f70 <TIM_OC2_SetConfig+0xe4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d003      	beq.n	8002f20 <TIM_OC2_SetConfig+0x94>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <TIM_OC2_SetConfig+0xe8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d113      	bne.n	8002f48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	621a      	str	r2, [r3, #32]
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40010000 	.word	0x40010000
 8002f74:	40010400 	.word	0x40010400

08002f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0303 	bic.w	r3, r3, #3
 8002fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a21      	ldr	r2, [pc, #132]	; (8003058 <TIM_OC3_SetConfig+0xe0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d003      	beq.n	8002fde <TIM_OC3_SetConfig+0x66>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a20      	ldr	r2, [pc, #128]	; (800305c <TIM_OC3_SetConfig+0xe4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d10d      	bne.n	8002ffa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a16      	ldr	r2, [pc, #88]	; (8003058 <TIM_OC3_SetConfig+0xe0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d003      	beq.n	800300a <TIM_OC3_SetConfig+0x92>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a15      	ldr	r2, [pc, #84]	; (800305c <TIM_OC3_SetConfig+0xe4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d113      	bne.n	8003032 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	621a      	str	r2, [r3, #32]
}
 800304c:	bf00      	nop
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	40010000 	.word	0x40010000
 800305c:	40010400 	.word	0x40010400

08003060 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800308e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	031b      	lsls	r3, r3, #12
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a12      	ldr	r2, [pc, #72]	; (8003104 <TIM_OC4_SetConfig+0xa4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d003      	beq.n	80030c8 <TIM_OC4_SetConfig+0x68>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a11      	ldr	r2, [pc, #68]	; (8003108 <TIM_OC4_SetConfig+0xa8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d109      	bne.n	80030dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	019b      	lsls	r3, r3, #6
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	621a      	str	r2, [r3, #32]
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40010000 	.word	0x40010000
 8003108:	40010400 	.word	0x40010400

0800310c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	f023 0201 	bic.w	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f023 030a 	bic.w	r3, r3, #10
 8003148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	621a      	str	r2, [r3, #32]
}
 800315e:	bf00      	nop
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800316a:	b480      	push	{r7}
 800316c:	b087      	sub	sp, #28
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f023 0210 	bic.w	r2, r3, #16
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	031b      	lsls	r3, r3, #12
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	621a      	str	r2, [r3, #32]
}
 80031be:	bf00      	nop
 80031c0:	371c      	adds	r7, #28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b085      	sub	sp, #20
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f043 0307 	orr.w	r3, r3, #7
 80031ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	609a      	str	r2, [r3, #8]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800321a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	021a      	lsls	r2, r3, #8
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	431a      	orrs	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4313      	orrs	r3, r2
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	609a      	str	r2, [r3, #8]
}
 8003234:	bf00      	nop
 8003236:	371c      	adds	r7, #28
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003254:	2302      	movs	r3, #2
 8003256:	e05a      	b.n	800330e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a21      	ldr	r2, [pc, #132]	; (800331c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d022      	beq.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a4:	d01d      	beq.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d018      	beq.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1b      	ldr	r2, [pc, #108]	; (8003324 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1a      	ldr	r2, [pc, #104]	; (8003328 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00e      	beq.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a18      	ldr	r2, [pc, #96]	; (800332c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a17      	ldr	r2, [pc, #92]	; (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d004      	beq.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a15      	ldr	r2, [pc, #84]	; (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d10c      	bne.n	80032fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40010000 	.word	0x40010000
 8003320:	40000400 	.word	0x40000400
 8003324:	40000800 	.word	0x40000800
 8003328:	40000c00 	.word	0x40000c00
 800332c:	40010400 	.word	0x40010400
 8003330:	40014000 	.word	0x40014000
 8003334:	40001800 	.word	0x40001800

08003338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e03f      	b.n	80033f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f004 fb56 	bl	8007a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2224      	movs	r2, #36	; 0x24
 8003390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 fbb5 	bl	8003b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	4613      	mov	r3, r2
 8003406:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b20      	cmp	r3, #32
 8003412:	d140      	bne.n	8003496 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_UART_Receive_IT+0x26>
 800341a:	88fb      	ldrh	r3, [r7, #6]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e039      	b.n	8003498 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_UART_Receive_IT+0x38>
 800342e:	2302      	movs	r3, #2
 8003430:	e032      	b.n	8003498 <HAL_UART_Receive_IT+0x9e>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	88fa      	ldrh	r2, [r7, #6]
 8003444:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	88fa      	ldrh	r2, [r7, #6]
 800344a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2222      	movs	r2, #34	; 0x22
 8003456:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003470:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0201 	orr.w	r2, r2, #1
 8003480:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0220 	orr.w	r2, r2, #32
 8003490:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
  }
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	4613      	mov	r3, r2
 80034b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d153      	bne.n	8003566 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <HAL_UART_Transmit_DMA+0x26>
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e04c      	b.n	8003568 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_UART_Transmit_DMA+0x38>
 80034d8:	2302      	movs	r3, #2
 80034da:	e045      	b.n	8003568 <HAL_UART_Transmit_DMA+0xc4>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	88fa      	ldrh	r2, [r7, #6]
 80034ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	88fa      	ldrh	r2, [r7, #6]
 80034f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2221      	movs	r2, #33	; 0x21
 8003500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	4a19      	ldr	r2, [pc, #100]	; (8003570 <HAL_UART_Transmit_DMA+0xcc>)
 800350a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	4a18      	ldr	r2, [pc, #96]	; (8003574 <HAL_UART_Transmit_DMA+0xd0>)
 8003512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	4a17      	ldr	r2, [pc, #92]	; (8003578 <HAL_UART_Transmit_DMA+0xd4>)
 800351a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	2200      	movs	r2, #0
 8003522:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003524:	f107 0308 	add.w	r3, r7, #8
 8003528:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	6819      	ldr	r1, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3304      	adds	r3, #4
 8003538:	461a      	mov	r2, r3
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	f7fd febc 	bl	80012b8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003548:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003560:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	e000      	b.n	8003568 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003566:	2302      	movs	r3, #2
  }
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	080037a5 	.word	0x080037a5
 8003574:	080037f7 	.word	0x080037f7
 8003578:	08003813 	.word	0x08003813

0800357c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10d      	bne.n	80035ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_UART_IRQHandler+0x52>
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fa23 	bl	8003a12 <UART_Receive_IT>
      return;
 80035cc:	e0d0      	b.n	8003770 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 80b0 	beq.w	8003736 <HAL_UART_IRQHandler+0x1ba>
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d105      	bne.n	80035ec <HAL_UART_IRQHandler+0x70>
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80a5 	beq.w	8003736 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_UART_IRQHandler+0x90>
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003604:	f043 0201 	orr.w	r2, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_UART_IRQHandler+0xb0>
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	f043 0202 	orr.w	r2, r3, #2
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_UART_IRQHandler+0xd0>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003644:	f043 0204 	orr.w	r2, r3, #4
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00f      	beq.n	8003676 <HAL_UART_IRQHandler+0xfa>
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d104      	bne.n	800366a <HAL_UART_IRQHandler+0xee>
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366e:	f043 0208 	orr.w	r2, r3, #8
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d077      	beq.n	800376e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <HAL_UART_IRQHandler+0x11c>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f9bd 	bl	8003a12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	2b40      	cmp	r3, #64	; 0x40
 80036a4:	bf0c      	ite	eq
 80036a6:	2301      	moveq	r3, #1
 80036a8:	2300      	movne	r3, #0
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <HAL_UART_IRQHandler+0x144>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d031      	beq.n	8003724 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f906 	bl	80038d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d0:	2b40      	cmp	r3, #64	; 0x40
 80036d2:	d123      	bne.n	800371c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036e2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d013      	beq.n	8003714 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f0:	4a21      	ldr	r2, [pc, #132]	; (8003778 <HAL_UART_IRQHandler+0x1fc>)
 80036f2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fd fe35 	bl	8001368 <HAL_DMA_Abort_IT>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d016      	beq.n	8003732 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800370e:	4610      	mov	r0, r2
 8003710:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003712:	e00e      	b.n	8003732 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f83b 	bl	8003790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800371a:	e00a      	b.n	8003732 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f837 	bl	8003790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003722:	e006      	b.n	8003732 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f833 	bl	8003790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003730:	e01d      	b.n	800376e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003732:	bf00      	nop
    return;
 8003734:	e01b      	b.n	800376e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_UART_IRQHandler+0x1d6>
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f8f3 	bl	8003936 <UART_Transmit_IT>
    return;
 8003750:	e00e      	b.n	8003770 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d009      	beq.n	8003770 <HAL_UART_IRQHandler+0x1f4>
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d004      	beq.n	8003770 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f93b 	bl	80039e2 <UART_EndTransmit_IT>
    return;
 800376c:	e000      	b.n	8003770 <HAL_UART_IRQHandler+0x1f4>
    return;
 800376e:	bf00      	nop
  }
}
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	0800390f 	.word	0x0800390f

0800377c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d113      	bne.n	80037e8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695a      	ldr	r2, [r3, #20]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037d4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037e4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80037e6:	e002      	b.n	80037ee <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f004 f829 	bl	8007840 <HAL_UART_TxCpltCallback>
}
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f7ff ffb9 	bl	800377c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	2b80      	cmp	r3, #128	; 0x80
 8003830:	bf0c      	ite	eq
 8003832:	2301      	moveq	r3, #1
 8003834:	2300      	movne	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b21      	cmp	r3, #33	; 0x21
 8003844:	d108      	bne.n	8003858 <UART_DMAError+0x46>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2200      	movs	r2, #0
 8003850:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003852:	68b8      	ldr	r0, [r7, #8]
 8003854:	f000 f827 	bl	80038a6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b40      	cmp	r3, #64	; 0x40
 8003864:	bf0c      	ite	eq
 8003866:	2301      	moveq	r3, #1
 8003868:	2300      	movne	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b22      	cmp	r3, #34	; 0x22
 8003878:	d108      	bne.n	800388c <UART_DMAError+0x7a>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2200      	movs	r2, #0
 8003884:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003886:	68b8      	ldr	r0, [r7, #8]
 8003888:	f000 f823 	bl	80038d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003890:	f043 0210 	orr.w	r2, r3, #16
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003898:	68b8      	ldr	r0, [r7, #8]
 800389a:	f7ff ff79 	bl	8003790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80038bc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038e8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0201 	bic.w	r2, r2, #1
 80038f8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f7ff ff31 	bl	8003790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003936:	b480      	push	{r7}
 8003938:	b085      	sub	sp, #20
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b21      	cmp	r3, #33	; 0x21
 8003948:	d144      	bne.n	80039d4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003952:	d11a      	bne.n	800398a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003968:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d105      	bne.n	800397e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	1c9a      	adds	r2, r3, #2
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	621a      	str	r2, [r3, #32]
 800397c:	e00e      	b.n	800399c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	621a      	str	r2, [r3, #32]
 8003988:	e008      	b.n	800399c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	1c59      	adds	r1, r3, #1
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6211      	str	r1, [r2, #32]
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	4619      	mov	r1, r3
 80039aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10f      	bne.n	80039d0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e000      	b.n	80039d6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
  }
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f003 ff1c 	bl	8007840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b22      	cmp	r3, #34	; 0x22
 8003a24:	d171      	bne.n	8003b0a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2e:	d123      	bne.n	8003a78 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10e      	bne.n	8003a5c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	1c9a      	adds	r2, r3, #2
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	629a      	str	r2, [r3, #40]	; 0x28
 8003a5a:	e029      	b.n	8003ab0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	629a      	str	r2, [r3, #40]	; 0x28
 8003a76:	e01b      	b.n	8003ab0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6858      	ldr	r0, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	1c59      	adds	r1, r3, #1
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6291      	str	r1, [r2, #40]	; 0x28
 8003a90:	b2c2      	uxtb	r2, r0
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	e00c      	b.n	8003ab0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	1c58      	adds	r0, r3, #1
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	6288      	str	r0, [r1, #40]	; 0x28
 8003aa8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4619      	mov	r1, r3
 8003abe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d120      	bne.n	8003b06 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0220 	bic.w	r2, r2, #32
 8003ad2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f003 fd35 	bl	800756c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e002      	b.n	8003b0c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	e000      	b.n	8003b0c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
  }
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b18:	b0bd      	sub	sp, #244	; 0xf4
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b30:	68d9      	ldr	r1, [r3, #12]
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	ea40 0301 	orr.w	r3, r0, r1
 8003b3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b6c:	f021 010c 	bic.w	r1, r1, #12
 8003b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8e:	6999      	ldr	r1, [r3, #24]
 8003b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	ea40 0301 	orr.w	r3, r0, r1
 8003b9a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba6:	f040 81a5 	bne.w	8003ef4 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4bcd      	ldr	r3, [pc, #820]	; (8003ee8 <UART_SetConfig+0x3d4>)
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d006      	beq.n	8003bc4 <UART_SetConfig+0xb0>
 8003bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4bcb      	ldr	r3, [pc, #812]	; (8003eec <UART_SetConfig+0x3d8>)
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	f040 80cb 	bne.w	8003d5a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bc4:	f7fe f928 	bl	8001e18 <HAL_RCC_GetPCLK2Freq>
 8003bc8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003bd0:	461c      	mov	r4, r3
 8003bd2:	f04f 0500 	mov.w	r5, #0
 8003bd6:	4622      	mov	r2, r4
 8003bd8:	462b      	mov	r3, r5
 8003bda:	1891      	adds	r1, r2, r2
 8003bdc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003be0:	415b      	adcs	r3, r3
 8003be2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003be6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003bea:	1912      	adds	r2, r2, r4
 8003bec:	eb45 0303 	adc.w	r3, r5, r3
 8003bf0:	f04f 0000 	mov.w	r0, #0
 8003bf4:	f04f 0100 	mov.w	r1, #0
 8003bf8:	00d9      	lsls	r1, r3, #3
 8003bfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bfe:	00d0      	lsls	r0, r2, #3
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	1911      	adds	r1, r2, r4
 8003c06:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8003c0a:	416b      	adcs	r3, r5
 8003c0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	461a      	mov	r2, r3
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	1891      	adds	r1, r2, r2
 8003c1e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003c22:	415b      	adcs	r3, r3
 8003c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c28:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003c2c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003c30:	f7fc fb46 	bl	80002c0 <__aeabi_uldivmod>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4bad      	ldr	r3, [pc, #692]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	011e      	lsls	r6, r3, #4
 8003c42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c46:	461c      	mov	r4, r3
 8003c48:	f04f 0500 	mov.w	r5, #0
 8003c4c:	4622      	mov	r2, r4
 8003c4e:	462b      	mov	r3, r5
 8003c50:	1891      	adds	r1, r2, r2
 8003c52:	67b9      	str	r1, [r7, #120]	; 0x78
 8003c54:	415b      	adcs	r3, r3
 8003c56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c58:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003c5c:	1912      	adds	r2, r2, r4
 8003c5e:	eb45 0303 	adc.w	r3, r5, r3
 8003c62:	f04f 0000 	mov.w	r0, #0
 8003c66:	f04f 0100 	mov.w	r1, #0
 8003c6a:	00d9      	lsls	r1, r3, #3
 8003c6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c70:	00d0      	lsls	r0, r2, #3
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	1911      	adds	r1, r2, r4
 8003c78:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003c7c:	416b      	adcs	r3, r5
 8003c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	1891      	adds	r1, r2, r2
 8003c90:	6739      	str	r1, [r7, #112]	; 0x70
 8003c92:	415b      	adcs	r3, r3
 8003c94:	677b      	str	r3, [r7, #116]	; 0x74
 8003c96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c9a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003c9e:	f7fc fb0f 	bl	80002c0 <__aeabi_uldivmod>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4b92      	ldr	r3, [pc, #584]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	2164      	movs	r1, #100	; 0x64
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	3332      	adds	r3, #50	; 0x32
 8003cba:	4a8d      	ldr	r2, [pc, #564]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cc8:	441e      	add	r6, r3
 8003cca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	1894      	adds	r4, r2, r2
 8003cda:	66bc      	str	r4, [r7, #104]	; 0x68
 8003cdc:	415b      	adcs	r3, r3
 8003cde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ce0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003ce4:	1812      	adds	r2, r2, r0
 8003ce6:	eb41 0303 	adc.w	r3, r1, r3
 8003cea:	f04f 0400 	mov.w	r4, #0
 8003cee:	f04f 0500 	mov.w	r5, #0
 8003cf2:	00dd      	lsls	r5, r3, #3
 8003cf4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cf8:	00d4      	lsls	r4, r2, #3
 8003cfa:	4622      	mov	r2, r4
 8003cfc:	462b      	mov	r3, r5
 8003cfe:	1814      	adds	r4, r2, r0
 8003d00:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003d04:	414b      	adcs	r3, r1
 8003d06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	461a      	mov	r2, r3
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	1891      	adds	r1, r2, r2
 8003d18:	6639      	str	r1, [r7, #96]	; 0x60
 8003d1a:	415b      	adcs	r3, r3
 8003d1c:	667b      	str	r3, [r7, #100]	; 0x64
 8003d1e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003d22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d26:	f7fc facb 	bl	80002c0 <__aeabi_uldivmod>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4b70      	ldr	r3, [pc, #448]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003d30:	fba3 1302 	umull	r1, r3, r3, r2
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	2164      	movs	r1, #100	; 0x64
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	3332      	adds	r3, #50	; 0x32
 8003d42:	4a6b      	ldr	r2, [pc, #428]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003d44:	fba2 2303 	umull	r2, r3, r2, r3
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	f003 0207 	and.w	r2, r3, #7
 8003d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4432      	add	r2, r6
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	e26d      	b.n	8004236 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d5a:	f7fe f849 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 8003d5e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003d66:	461c      	mov	r4, r3
 8003d68:	f04f 0500 	mov.w	r5, #0
 8003d6c:	4622      	mov	r2, r4
 8003d6e:	462b      	mov	r3, r5
 8003d70:	1891      	adds	r1, r2, r2
 8003d72:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d74:	415b      	adcs	r3, r3
 8003d76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d7c:	1912      	adds	r2, r2, r4
 8003d7e:	eb45 0303 	adc.w	r3, r5, r3
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f04f 0100 	mov.w	r1, #0
 8003d8a:	00d9      	lsls	r1, r3, #3
 8003d8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d90:	00d0      	lsls	r0, r2, #3
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	1911      	adds	r1, r2, r4
 8003d98:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003d9c:	416b      	adcs	r3, r5
 8003d9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	461a      	mov	r2, r3
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	1891      	adds	r1, r2, r2
 8003db0:	6539      	str	r1, [r7, #80]	; 0x50
 8003db2:	415b      	adcs	r3, r3
 8003db4:	657b      	str	r3, [r7, #84]	; 0x54
 8003db6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003dba:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003dbe:	f7fc fa7f 	bl	80002c0 <__aeabi_uldivmod>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4b4a      	ldr	r3, [pc, #296]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	011e      	lsls	r6, r3, #4
 8003dd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003dd4:	461c      	mov	r4, r3
 8003dd6:	f04f 0500 	mov.w	r5, #0
 8003dda:	4622      	mov	r2, r4
 8003ddc:	462b      	mov	r3, r5
 8003dde:	1891      	adds	r1, r2, r2
 8003de0:	64b9      	str	r1, [r7, #72]	; 0x48
 8003de2:	415b      	adcs	r3, r3
 8003de4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003de6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003dea:	1912      	adds	r2, r2, r4
 8003dec:	eb45 0303 	adc.w	r3, r5, r3
 8003df0:	f04f 0000 	mov.w	r0, #0
 8003df4:	f04f 0100 	mov.w	r1, #0
 8003df8:	00d9      	lsls	r1, r3, #3
 8003dfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dfe:	00d0      	lsls	r0, r2, #3
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	1911      	adds	r1, r2, r4
 8003e06:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8003e0a:	416b      	adcs	r3, r5
 8003e0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	1891      	adds	r1, r2, r2
 8003e1e:	6439      	str	r1, [r7, #64]	; 0x40
 8003e20:	415b      	adcs	r3, r3
 8003e22:	647b      	str	r3, [r7, #68]	; 0x44
 8003e24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e28:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003e2c:	f7fc fa48 	bl	80002c0 <__aeabi_uldivmod>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4b2e      	ldr	r3, [pc, #184]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003e36:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2164      	movs	r1, #100	; 0x64
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	3332      	adds	r3, #50	; 0x32
 8003e48:	4a29      	ldr	r2, [pc, #164]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e56:	441e      	add	r6, r3
 8003e58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f04f 0100 	mov.w	r1, #0
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	1894      	adds	r4, r2, r2
 8003e68:	63bc      	str	r4, [r7, #56]	; 0x38
 8003e6a:	415b      	adcs	r3, r3
 8003e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e6e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e72:	1812      	adds	r2, r2, r0
 8003e74:	eb41 0303 	adc.w	r3, r1, r3
 8003e78:	f04f 0400 	mov.w	r4, #0
 8003e7c:	f04f 0500 	mov.w	r5, #0
 8003e80:	00dd      	lsls	r5, r3, #3
 8003e82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e86:	00d4      	lsls	r4, r2, #3
 8003e88:	4622      	mov	r2, r4
 8003e8a:	462b      	mov	r3, r5
 8003e8c:	1814      	adds	r4, r2, r0
 8003e8e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8003e92:	414b      	adcs	r3, r1
 8003e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	1891      	adds	r1, r2, r2
 8003ea6:	6339      	str	r1, [r7, #48]	; 0x30
 8003ea8:	415b      	adcs	r3, r3
 8003eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8003eac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003eb0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003eb4:	f7fc fa04 	bl	80002c0 <__aeabi_uldivmod>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	2164      	movs	r1, #100	; 0x64
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	3332      	adds	r3, #50	; 0x32
 8003ed0:	4a07      	ldr	r2, [pc, #28]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	f003 0207 	and.w	r2, r3, #7
 8003edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4432      	add	r2, r6
 8003ee4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003ee6:	e1a6      	b.n	8004236 <UART_SetConfig+0x722>
 8003ee8:	40011000 	.word	0x40011000
 8003eec:	40011400 	.word	0x40011400
 8003ef0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4bd1      	ldr	r3, [pc, #836]	; (8004240 <UART_SetConfig+0x72c>)
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d006      	beq.n	8003f0e <UART_SetConfig+0x3fa>
 8003f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4bcf      	ldr	r3, [pc, #828]	; (8004244 <UART_SetConfig+0x730>)
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	f040 80ca 	bne.w	80040a2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f0e:	f7fd ff83 	bl	8001e18 <HAL_RCC_GetPCLK2Freq>
 8003f12:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f1a:	461c      	mov	r4, r3
 8003f1c:	f04f 0500 	mov.w	r5, #0
 8003f20:	4622      	mov	r2, r4
 8003f22:	462b      	mov	r3, r5
 8003f24:	1891      	adds	r1, r2, r2
 8003f26:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f28:	415b      	adcs	r3, r3
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f30:	1912      	adds	r2, r2, r4
 8003f32:	eb45 0303 	adc.w	r3, r5, r3
 8003f36:	f04f 0000 	mov.w	r0, #0
 8003f3a:	f04f 0100 	mov.w	r1, #0
 8003f3e:	00d9      	lsls	r1, r3, #3
 8003f40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f44:	00d0      	lsls	r0, r2, #3
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	eb12 0a04 	adds.w	sl, r2, r4
 8003f4e:	eb43 0b05 	adc.w	fp, r3, r5
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f04f 0100 	mov.w	r1, #0
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	008b      	lsls	r3, r1, #2
 8003f68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f6c:	0082      	lsls	r2, r0, #2
 8003f6e:	4650      	mov	r0, sl
 8003f70:	4659      	mov	r1, fp
 8003f72:	f7fc f9a5 	bl	80002c0 <__aeabi_uldivmod>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4bb3      	ldr	r3, [pc, #716]	; (8004248 <UART_SetConfig+0x734>)
 8003f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	011e      	lsls	r6, r3, #4
 8003f84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f04f 0100 	mov.w	r1, #0
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	1894      	adds	r4, r2, r2
 8003f94:	623c      	str	r4, [r7, #32]
 8003f96:	415b      	adcs	r3, r3
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f9e:	1812      	adds	r2, r2, r0
 8003fa0:	eb41 0303 	adc.w	r3, r1, r3
 8003fa4:	f04f 0400 	mov.w	r4, #0
 8003fa8:	f04f 0500 	mov.w	r5, #0
 8003fac:	00dd      	lsls	r5, r3, #3
 8003fae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fb2:	00d4      	lsls	r4, r2, #3
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	462b      	mov	r3, r5
 8003fb8:	1814      	adds	r4, r2, r0
 8003fba:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003fbe:	414b      	adcs	r3, r1
 8003fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f04f 0100 	mov.w	r1, #0
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	008b      	lsls	r3, r1, #2
 8003fda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fde:	0082      	lsls	r2, r0, #2
 8003fe0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8003fe4:	f7fc f96c 	bl	80002c0 <__aeabi_uldivmod>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4b96      	ldr	r3, [pc, #600]	; (8004248 <UART_SetConfig+0x734>)
 8003fee:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	2164      	movs	r1, #100	; 0x64
 8003ff6:	fb01 f303 	mul.w	r3, r1, r3
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	3332      	adds	r3, #50	; 0x32
 8004000:	4a91      	ldr	r2, [pc, #580]	; (8004248 <UART_SetConfig+0x734>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800400c:	441e      	add	r6, r3
 800400e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004012:	4618      	mov	r0, r3
 8004014:	f04f 0100 	mov.w	r1, #0
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	1894      	adds	r4, r2, r2
 800401e:	61bc      	str	r4, [r7, #24]
 8004020:	415b      	adcs	r3, r3
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004028:	1812      	adds	r2, r2, r0
 800402a:	eb41 0303 	adc.w	r3, r1, r3
 800402e:	f04f 0400 	mov.w	r4, #0
 8004032:	f04f 0500 	mov.w	r5, #0
 8004036:	00dd      	lsls	r5, r3, #3
 8004038:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800403c:	00d4      	lsls	r4, r2, #3
 800403e:	4622      	mov	r2, r4
 8004040:	462b      	mov	r3, r5
 8004042:	1814      	adds	r4, r2, r0
 8004044:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004048:	414b      	adcs	r3, r1
 800404a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800404e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4618      	mov	r0, r3
 8004056:	f04f 0100 	mov.w	r1, #0
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	008b      	lsls	r3, r1, #2
 8004064:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004068:	0082      	lsls	r2, r0, #2
 800406a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800406e:	f7fc f927 	bl	80002c0 <__aeabi_uldivmod>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4b74      	ldr	r3, [pc, #464]	; (8004248 <UART_SetConfig+0x734>)
 8004078:	fba3 1302 	umull	r1, r3, r3, r2
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	2164      	movs	r1, #100	; 0x64
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	3332      	adds	r3, #50	; 0x32
 800408a:	4a6f      	ldr	r2, [pc, #444]	; (8004248 <UART_SetConfig+0x734>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	f003 020f 	and.w	r2, r3, #15
 8004096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4432      	add	r2, r6
 800409e:	609a      	str	r2, [r3, #8]
 80040a0:	e0c9      	b.n	8004236 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80040a2:	f7fd fea5 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 80040a6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040ae:	461c      	mov	r4, r3
 80040b0:	f04f 0500 	mov.w	r5, #0
 80040b4:	4622      	mov	r2, r4
 80040b6:	462b      	mov	r3, r5
 80040b8:	1891      	adds	r1, r2, r2
 80040ba:	6139      	str	r1, [r7, #16]
 80040bc:	415b      	adcs	r3, r3
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040c4:	1912      	adds	r2, r2, r4
 80040c6:	eb45 0303 	adc.w	r3, r5, r3
 80040ca:	f04f 0000 	mov.w	r0, #0
 80040ce:	f04f 0100 	mov.w	r1, #0
 80040d2:	00d9      	lsls	r1, r3, #3
 80040d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040d8:	00d0      	lsls	r0, r2, #3
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	eb12 0804 	adds.w	r8, r2, r4
 80040e2:	eb43 0905 	adc.w	r9, r3, r5
 80040e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f04f 0100 	mov.w	r1, #0
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	008b      	lsls	r3, r1, #2
 80040fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004100:	0082      	lsls	r2, r0, #2
 8004102:	4640      	mov	r0, r8
 8004104:	4649      	mov	r1, r9
 8004106:	f7fc f8db 	bl	80002c0 <__aeabi_uldivmod>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4b4e      	ldr	r3, [pc, #312]	; (8004248 <UART_SetConfig+0x734>)
 8004110:	fba3 2302 	umull	r2, r3, r3, r2
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	011e      	lsls	r6, r3, #4
 8004118:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800411c:	4618      	mov	r0, r3
 800411e:	f04f 0100 	mov.w	r1, #0
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	1894      	adds	r4, r2, r2
 8004128:	60bc      	str	r4, [r7, #8]
 800412a:	415b      	adcs	r3, r3
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004132:	1812      	adds	r2, r2, r0
 8004134:	eb41 0303 	adc.w	r3, r1, r3
 8004138:	f04f 0400 	mov.w	r4, #0
 800413c:	f04f 0500 	mov.w	r5, #0
 8004140:	00dd      	lsls	r5, r3, #3
 8004142:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004146:	00d4      	lsls	r4, r2, #3
 8004148:	4622      	mov	r2, r4
 800414a:	462b      	mov	r3, r5
 800414c:	1814      	adds	r4, r2, r0
 800414e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004152:	414b      	adcs	r3, r1
 8004154:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4618      	mov	r0, r3
 8004160:	f04f 0100 	mov.w	r1, #0
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	008b      	lsls	r3, r1, #2
 800416e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004172:	0082      	lsls	r2, r0, #2
 8004174:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004178:	f7fc f8a2 	bl	80002c0 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4b31      	ldr	r3, [pc, #196]	; (8004248 <UART_SetConfig+0x734>)
 8004182:	fba3 1302 	umull	r1, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2164      	movs	r1, #100	; 0x64
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	3332      	adds	r3, #50	; 0x32
 8004194:	4a2c      	ldr	r2, [pc, #176]	; (8004248 <UART_SetConfig+0x734>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a0:	441e      	add	r6, r3
 80041a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041a6:	4618      	mov	r0, r3
 80041a8:	f04f 0100 	mov.w	r1, #0
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	1894      	adds	r4, r2, r2
 80041b2:	603c      	str	r4, [r7, #0]
 80041b4:	415b      	adcs	r3, r3
 80041b6:	607b      	str	r3, [r7, #4]
 80041b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041bc:	1812      	adds	r2, r2, r0
 80041be:	eb41 0303 	adc.w	r3, r1, r3
 80041c2:	f04f 0400 	mov.w	r4, #0
 80041c6:	f04f 0500 	mov.w	r5, #0
 80041ca:	00dd      	lsls	r5, r3, #3
 80041cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041d0:	00d4      	lsls	r4, r2, #3
 80041d2:	4622      	mov	r2, r4
 80041d4:	462b      	mov	r3, r5
 80041d6:	1814      	adds	r4, r2, r0
 80041d8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80041dc:	414b      	adcs	r3, r1
 80041de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	008b      	lsls	r3, r1, #2
 80041f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041fc:	0082      	lsls	r2, r0, #2
 80041fe:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004202:	f7fc f85d 	bl	80002c0 <__aeabi_uldivmod>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <UART_SetConfig+0x734>)
 800420c:	fba3 1302 	umull	r1, r3, r3, r2
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	2164      	movs	r1, #100	; 0x64
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	3332      	adds	r3, #50	; 0x32
 800421e:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <UART_SetConfig+0x734>)
 8004220:	fba2 2303 	umull	r2, r3, r2, r3
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	f003 020f 	and.w	r2, r3, #15
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4432      	add	r2, r6
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	e7ff      	b.n	8004236 <UART_SetConfig+0x722>
 8004236:	bf00      	nop
 8004238:	37f4      	adds	r7, #244	; 0xf4
 800423a:	46bd      	mov	sp, r7
 800423c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004240:	40011000 	.word	0x40011000
 8004244:	40011400 	.word	0x40011400
 8004248:	51eb851f 	.word	0x51eb851f

0800424c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800425a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800425e:	2b84      	cmp	r3, #132	; 0x84
 8004260:	d005      	beq.n	800426e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004262:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4413      	add	r3, r2
 800426a:	3303      	adds	r3, #3
 800426c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800426e:	68fb      	ldr	r3, [r7, #12]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004280:	f001 f980 	bl	8005584 <vTaskStartScheduler>
  
  return osOK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	bd80      	pop	{r7, pc}

0800428a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800428a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800428c:	b089      	sub	sp, #36	; 0x24
 800428e:	af04      	add	r7, sp, #16
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d020      	beq.n	80042de <osThreadCreate+0x54>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01c      	beq.n	80042de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685c      	ldr	r4, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681d      	ldr	r5, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691e      	ldr	r6, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff ffc8 	bl	800424c <makeFreeRtosPriority>
 80042bc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042c6:	9202      	str	r2, [sp, #8]
 80042c8:	9301      	str	r3, [sp, #4]
 80042ca:	9100      	str	r1, [sp, #0]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	4632      	mov	r2, r6
 80042d0:	4629      	mov	r1, r5
 80042d2:	4620      	mov	r0, r4
 80042d4:	f000 fde0 	bl	8004e98 <xTaskCreateStatic>
 80042d8:	4603      	mov	r3, r0
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	e01c      	b.n	8004318 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685c      	ldr	r4, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042ea:	b29e      	uxth	r6, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff ffaa 	bl	800424c <makeFreeRtosPriority>
 80042f8:	4602      	mov	r2, r0
 80042fa:	f107 030c 	add.w	r3, r7, #12
 80042fe:	9301      	str	r3, [sp, #4]
 8004300:	9200      	str	r2, [sp, #0]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	4632      	mov	r2, r6
 8004306:	4629      	mov	r1, r5
 8004308:	4620      	mov	r0, r4
 800430a:	f000 fe22 	bl	8004f52 <xTaskCreate>
 800430e:	4603      	mov	r3, r0
 8004310:	2b01      	cmp	r3, #1
 8004312:	d001      	beq.n	8004318 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004314:	2300      	movs	r3, #0
 8004316:	e000      	b.n	800431a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004318:	68fb      	ldr	r3, [r7, #12]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004322 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <osDelay+0x16>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	e000      	b.n	800433a <osDelay+0x18>
 8004338:	2301      	movs	r3, #1
 800433a:	4618      	mov	r0, r3
 800433c:	f000 ff52 	bl	80051e4 <vTaskDelay>
  
  return osOK;
 8004340:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800434a:	b590      	push	{r4, r7, lr}
 800434c:	b085      	sub	sp, #20
 800434e:	af02      	add	r7, sp, #8
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d011      	beq.n	8004380 <osMessageCreate+0x36>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00d      	beq.n	8004380 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6859      	ldr	r1, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	2400      	movs	r4, #0
 8004376:	9400      	str	r4, [sp, #0]
 8004378:	f000 f92c 	bl	80045d4 <xQueueGenericCreateStatic>
 800437c:	4603      	mov	r3, r0
 800437e:	e008      	b.n	8004392 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	4619      	mov	r1, r3
 800438c:	f000 f99a 	bl	80046c4 <xQueueGenericCreate>
 8004390:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004392:	4618      	mov	r0, r3
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	bd90      	pop	{r4, r7, pc}

0800439a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f103 0208 	add.w	r2, r3, #8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f04f 32ff 	mov.w	r2, #4294967295
 80043b2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f103 0208 	add.w	r2, r3, #8
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f103 0208 	add.w	r2, r3, #8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	601a      	str	r2, [r3, #0]
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004452:	d103      	bne.n	800445c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	e00c      	b.n	8004476 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3308      	adds	r3, #8
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	e002      	b.n	800446a <vListInsert+0x2e>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	429a      	cmp	r2, r3
 8004474:	d2f6      	bcs.n	8004464 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	601a      	str	r2, [r3, #0]
}
 80044a2:	bf00      	nop
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044ae:	b480      	push	{r7}
 80044b0:	b085      	sub	sp, #20
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6892      	ldr	r2, [r2, #8]
 80044c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6852      	ldr	r2, [r2, #4]
 80044ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d103      	bne.n	80044e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	1e5a      	subs	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800452a:	bf00      	nop
 800452c:	e7fe      	b.n	800452c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800452e:	f002 fa31 	bl	8006994 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453a:	68f9      	ldr	r1, [r7, #12]
 800453c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	441a      	add	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455e:	3b01      	subs	r3, #1
 8004560:	68f9      	ldr	r1, [r7, #12]
 8004562:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	441a      	add	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	22ff      	movs	r2, #255	; 0xff
 8004572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	22ff      	movs	r2, #255	; 0xff
 800457a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d114      	bne.n	80045ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01a      	beq.n	80045c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3310      	adds	r3, #16
 8004590:	4618      	mov	r0, r3
 8004592:	f001 fae5 	bl	8005b60 <xTaskRemoveFromEventList>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d012      	beq.n	80045c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800459c:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <xQueueGenericReset+0xcc>)
 800459e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	e009      	b.n	80045c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3310      	adds	r3, #16
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff fef1 	bl	800439a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3324      	adds	r3, #36	; 0x24
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff feec 	bl	800439a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045c2:	f002 fa17 	bl	80069f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045c6:	2301      	movs	r3, #1
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	e000ed04 	.word	0xe000ed04

080045d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08e      	sub	sp, #56	; 0x38
 80045d8:	af02      	add	r7, sp, #8
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10a      	bne.n	80045fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045fa:	bf00      	nop
 80045fc:	e7fe      	b.n	80045fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10a      	bne.n	800461a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004616:	bf00      	nop
 8004618:	e7fe      	b.n	8004618 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <xQueueGenericCreateStatic+0x52>
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <xQueueGenericCreateStatic+0x56>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <xQueueGenericCreateStatic+0x58>
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	623b      	str	r3, [r7, #32]
}
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d102      	bne.n	8004652 <xQueueGenericCreateStatic+0x7e>
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <xQueueGenericCreateStatic+0x82>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <xQueueGenericCreateStatic+0x84>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	61fb      	str	r3, [r7, #28]
}
 800466e:	bf00      	nop
 8004670:	e7fe      	b.n	8004670 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004672:	2350      	movs	r3, #80	; 0x50
 8004674:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b50      	cmp	r3, #80	; 0x50
 800467a:	d00a      	beq.n	8004692 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	61bb      	str	r3, [r7, #24]
}
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004692:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00d      	beq.n	80046ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80046aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	4613      	mov	r3, r2
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f845 	bl	8004744 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046bc:	4618      	mov	r0, r3
 80046be:	3730      	adds	r7, #48	; 0x30
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08a      	sub	sp, #40	; 0x28
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	4613      	mov	r3, r2
 80046d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <xQueueGenericCreate+0x2a>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	613b      	str	r3, [r7, #16]
}
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d102      	bne.n	80046fa <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61fb      	str	r3, [r7, #28]
 80046f8:	e004      	b.n	8004704 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	fb02 f303 	mul.w	r3, r2, r3
 8004702:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	3350      	adds	r3, #80	; 0x50
 8004708:	4618      	mov	r0, r3
 800470a:	f002 fa65 	bl	8006bd8 <pvPortMalloc>
 800470e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d011      	beq.n	800473a <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	3350      	adds	r3, #80	; 0x50
 800471e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004728:	79fa      	ldrb	r2, [r7, #7]
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	4613      	mov	r3, r2
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	68b9      	ldr	r1, [r7, #8]
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 f805 	bl	8004744 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800473a:	69bb      	ldr	r3, [r7, #24]
	}
 800473c:	4618      	mov	r0, r3
 800473e:	3720      	adds	r7, #32
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d103      	bne.n	8004760 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e002      	b.n	8004766 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004772:	2101      	movs	r1, #1
 8004774:	69b8      	ldr	r0, [r7, #24]
 8004776:	f7ff fec5 	bl	8004504 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	78fa      	ldrb	r2, [r7, #3]
 800477e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004782:	bf00      	nop
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08e      	sub	sp, #56	; 0x38
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800479a:	2300      	movs	r3, #0
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10a      	bne.n	80047be <xQueueGenericSend+0x32>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047ba:	bf00      	nop
 80047bc:	e7fe      	b.n	80047bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d103      	bne.n	80047cc <xQueueGenericSend+0x40>
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <xQueueGenericSend+0x44>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <xQueueGenericSend+0x46>
 80047d0:	2300      	movs	r3, #0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10a      	bne.n	80047ec <xQueueGenericSend+0x60>
	__asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047e8:	bf00      	nop
 80047ea:	e7fe      	b.n	80047ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d103      	bne.n	80047fa <xQueueGenericSend+0x6e>
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <xQueueGenericSend+0x72>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <xQueueGenericSend+0x74>
 80047fe:	2300      	movs	r3, #0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10a      	bne.n	800481a <xQueueGenericSend+0x8e>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	623b      	str	r3, [r7, #32]
}
 8004816:	bf00      	nop
 8004818:	e7fe      	b.n	8004818 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800481a:	f001 fc5d 	bl	80060d8 <xTaskGetSchedulerState>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d102      	bne.n	800482a <xQueueGenericSend+0x9e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <xQueueGenericSend+0xa2>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <xQueueGenericSend+0xa4>
 800482e:	2300      	movs	r3, #0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <xQueueGenericSend+0xbe>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	61fb      	str	r3, [r7, #28]
}
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800484a:	f002 f8a3 	bl	8006994 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004856:	429a      	cmp	r2, r3
 8004858:	d302      	bcc.n	8004860 <xQueueGenericSend+0xd4>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b02      	cmp	r3, #2
 800485e:	d129      	bne.n	80048b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004866:	f000 fa07 	bl	8004c78 <prvCopyDataToQueue>
 800486a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	2b00      	cmp	r3, #0
 8004872:	d010      	beq.n	8004896 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	3324      	adds	r3, #36	; 0x24
 8004878:	4618      	mov	r0, r3
 800487a:	f001 f971 	bl	8005b60 <xTaskRemoveFromEventList>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d013      	beq.n	80048ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004884:	4b3f      	ldr	r3, [pc, #252]	; (8004984 <xQueueGenericSend+0x1f8>)
 8004886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	e00a      	b.n	80048ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d007      	beq.n	80048ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800489c:	4b39      	ldr	r3, [pc, #228]	; (8004984 <xQueueGenericSend+0x1f8>)
 800489e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048ac:	f002 f8a2 	bl	80069f4 <vPortExitCritical>
				return pdPASS;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e063      	b.n	800497c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d103      	bne.n	80048c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048ba:	f002 f89b 	bl	80069f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048be:	2300      	movs	r3, #0
 80048c0:	e05c      	b.n	800497c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d106      	bne.n	80048d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	4618      	mov	r0, r3
 80048ce:	f001 f9a9 	bl	8005c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048d2:	2301      	movs	r3, #1
 80048d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048d6:	f002 f88d 	bl	80069f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048da:	f000 feb5 	bl	8005648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048de:	f002 f859 	bl	8006994 <vPortEnterCritical>
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048e8:	b25b      	sxtb	r3, r3
 80048ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ee:	d103      	bne.n	80048f8 <xQueueGenericSend+0x16c>
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048fe:	b25b      	sxtb	r3, r3
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d103      	bne.n	800490e <xQueueGenericSend+0x182>
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800490e:	f002 f871 	bl	80069f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004912:	1d3a      	adds	r2, r7, #4
 8004914:	f107 0314 	add.w	r3, r7, #20
 8004918:	4611      	mov	r1, r2
 800491a:	4618      	mov	r0, r3
 800491c:	f001 f998 	bl	8005c50 <xTaskCheckForTimeOut>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d124      	bne.n	8004970 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004928:	f000 fa9e 	bl	8004e68 <prvIsQueueFull>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d018      	beq.n	8004964 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	3310      	adds	r3, #16
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	4611      	mov	r1, r2
 800493a:	4618      	mov	r0, r3
 800493c:	f001 f8ec 	bl	8005b18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004942:	f000 fa29 	bl	8004d98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004946:	f000 fe8d 	bl	8005664 <xTaskResumeAll>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	f47f af7c 	bne.w	800484a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004952:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <xQueueGenericSend+0x1f8>)
 8004954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	e772      	b.n	800484a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004966:	f000 fa17 	bl	8004d98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800496a:	f000 fe7b 	bl	8005664 <xTaskResumeAll>
 800496e:	e76c      	b.n	800484a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004972:	f000 fa11 	bl	8004d98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004976:	f000 fe75 	bl	8005664 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800497a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800497c:	4618      	mov	r0, r3
 800497e:	3738      	adds	r7, #56	; 0x38
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	e000ed04 	.word	0xe000ed04

08004988 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08e      	sub	sp, #56	; 0x38
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049b2:	bf00      	nop
 80049b4:	e7fe      	b.n	80049b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d103      	bne.n	80049c4 <xQueueGenericSendFromISR+0x3c>
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <xQueueGenericSendFromISR+0x40>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <xQueueGenericSendFromISR+0x42>
 80049c8:	2300      	movs	r3, #0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	623b      	str	r3, [r7, #32]
}
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d103      	bne.n	80049f2 <xQueueGenericSendFromISR+0x6a>
 80049ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <xQueueGenericSendFromISR+0x6e>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <xQueueGenericSendFromISR+0x70>
 80049f6:	2300      	movs	r3, #0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10a      	bne.n	8004a12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	61fb      	str	r3, [r7, #28]
}
 8004a0e:	bf00      	nop
 8004a10:	e7fe      	b.n	8004a10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a12:	f002 f8a1 	bl	8006b58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a16:	f3ef 8211 	mrs	r2, BASEPRI
 8004a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	61ba      	str	r2, [r7, #24]
 8004a2c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a2e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d302      	bcc.n	8004a44 <xQueueGenericSendFromISR+0xbc>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d12c      	bne.n	8004a9e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a54:	f000 f910 	bl	8004c78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a58:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d112      	bne.n	8004a88 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d016      	beq.n	8004a98 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	3324      	adds	r3, #36	; 0x24
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 f876 	bl	8005b60 <xTaskRemoveFromEventList>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00e      	beq.n	8004a98 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00b      	beq.n	8004a98 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e007      	b.n	8004a98 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	b25a      	sxtb	r2, r3
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004a9c:	e001      	b.n	8004aa2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004aac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3738      	adds	r7, #56	; 0x38
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08c      	sub	sp, #48	; 0x30
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10a      	bne.n	8004ae8 <xQueueReceive+0x30>
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	623b      	str	r3, [r7, #32]
}
 8004ae4:	bf00      	nop
 8004ae6:	e7fe      	b.n	8004ae6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d103      	bne.n	8004af6 <xQueueReceive+0x3e>
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <xQueueReceive+0x42>
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <xQueueReceive+0x44>
 8004afa:	2300      	movs	r3, #0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10a      	bne.n	8004b16 <xQueueReceive+0x5e>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	61fb      	str	r3, [r7, #28]
}
 8004b12:	bf00      	nop
 8004b14:	e7fe      	b.n	8004b14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b16:	f001 fadf 	bl	80060d8 <xTaskGetSchedulerState>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d102      	bne.n	8004b26 <xQueueReceive+0x6e>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <xQueueReceive+0x72>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <xQueueReceive+0x74>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <xQueueReceive+0x8e>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	61bb      	str	r3, [r7, #24]
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b46:	f001 ff25 	bl	8006994 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01f      	beq.n	8004b96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b56:	68b9      	ldr	r1, [r7, #8]
 8004b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b5a:	f000 f8f7 	bl	8004d4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	1e5a      	subs	r2, r3, #1
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00f      	beq.n	8004b8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	3310      	adds	r3, #16
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fff4 	bl	8005b60 <xTaskRemoveFromEventList>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d007      	beq.n	8004b8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b7e:	4b3d      	ldr	r3, [pc, #244]	; (8004c74 <xQueueReceive+0x1bc>)
 8004b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b8e:	f001 ff31 	bl	80069f4 <vPortExitCritical>
				return pdPASS;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e069      	b.n	8004c6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d103      	bne.n	8004ba4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b9c:	f001 ff2a 	bl	80069f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e062      	b.n	8004c6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d106      	bne.n	8004bb8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004baa:	f107 0310 	add.w	r3, r7, #16
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f001 f838 	bl	8005c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bb8:	f001 ff1c 	bl	80069f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bbc:	f000 fd44 	bl	8005648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bc0:	f001 fee8 	bl	8006994 <vPortEnterCritical>
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bca:	b25b      	sxtb	r3, r3
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd0:	d103      	bne.n	8004bda <xQueueReceive+0x122>
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004be0:	b25b      	sxtb	r3, r3
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	d103      	bne.n	8004bf0 <xQueueReceive+0x138>
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bf0:	f001 ff00 	bl	80069f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bf4:	1d3a      	adds	r2, r7, #4
 8004bf6:	f107 0310 	add.w	r3, r7, #16
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f001 f827 	bl	8005c50 <xTaskCheckForTimeOut>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d123      	bne.n	8004c50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c0a:	f000 f917 	bl	8004e3c <prvIsQueueEmpty>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d017      	beq.n	8004c44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	3324      	adds	r3, #36	; 0x24
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 ff7b 	bl	8005b18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c24:	f000 f8b8 	bl	8004d98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c28:	f000 fd1c 	bl	8005664 <xTaskResumeAll>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d189      	bne.n	8004b46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004c32:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <xQueueReceive+0x1bc>)
 8004c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	e780      	b.n	8004b46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c46:	f000 f8a7 	bl	8004d98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c4a:	f000 fd0b 	bl	8005664 <xTaskResumeAll>
 8004c4e:	e77a      	b.n	8004b46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c52:	f000 f8a1 	bl	8004d98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c56:	f000 fd05 	bl	8005664 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c5c:	f000 f8ee 	bl	8004e3c <prvIsQueueEmpty>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f43f af6f 	beq.w	8004b46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3730      	adds	r7, #48	; 0x30
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	e000ed04 	.word	0xe000ed04

08004c78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10d      	bne.n	8004cb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d14d      	bne.n	8004d3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 fa36 	bl	8006114 <xTaskPriorityDisinherit>
 8004ca8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	609a      	str	r2, [r3, #8]
 8004cb0:	e043      	b.n	8004d3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d119      	bne.n	8004cec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6858      	ldr	r0, [r3, #4]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	f003 f8cc 	bl	8007e60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	441a      	add	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d32b      	bcc.n	8004d3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	605a      	str	r2, [r3, #4]
 8004cea:	e026      	b.n	8004d3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	68d8      	ldr	r0, [r3, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	f003 f8b2 	bl	8007e60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	425b      	negs	r3, r3
 8004d06:	441a      	add	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d207      	bcs.n	8004d28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	425b      	negs	r3, r3
 8004d22:	441a      	add	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d105      	bne.n	8004d3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d42:	697b      	ldr	r3, [r7, #20]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d018      	beq.n	8004d90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	441a      	add	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d303      	bcc.n	8004d80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68d9      	ldr	r1, [r3, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	461a      	mov	r2, r3
 8004d8a:	6838      	ldr	r0, [r7, #0]
 8004d8c:	f003 f868 	bl	8007e60 <memcpy>
	}
}
 8004d90:	bf00      	nop
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004da0:	f001 fdf8 	bl	8006994 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004daa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dac:	e011      	b.n	8004dd2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d012      	beq.n	8004ddc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3324      	adds	r3, #36	; 0x24
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fed0 	bl	8005b60 <xTaskRemoveFromEventList>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004dc6:	f000 ffb5 	bl	8005d34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	dce9      	bgt.n	8004dae <prvUnlockQueue+0x16>
 8004dda:	e000      	b.n	8004dde <prvUnlockQueue+0x46>
					break;
 8004ddc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	22ff      	movs	r2, #255	; 0xff
 8004de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004de6:	f001 fe05 	bl	80069f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004dea:	f001 fdd3 	bl	8006994 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004df4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004df6:	e011      	b.n	8004e1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d012      	beq.n	8004e26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3310      	adds	r3, #16
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 feab 	bl	8005b60 <xTaskRemoveFromEventList>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e10:	f000 ff90 	bl	8005d34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e14:	7bbb      	ldrb	r3, [r7, #14]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	dce9      	bgt.n	8004df8 <prvUnlockQueue+0x60>
 8004e24:	e000      	b.n	8004e28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	22ff      	movs	r2, #255	; 0xff
 8004e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e30:	f001 fde0 	bl	80069f4 <vPortExitCritical>
}
 8004e34:	bf00      	nop
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e44:	f001 fda6 	bl	8006994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e50:	2301      	movs	r3, #1
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	e001      	b.n	8004e5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e5a:	f001 fdcb 	bl	80069f4 <vPortExitCritical>

	return xReturn;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e70:	f001 fd90 	bl	8006994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d102      	bne.n	8004e86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e80:	2301      	movs	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	e001      	b.n	8004e8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e8a:	f001 fdb3 	bl	80069f4 <vPortExitCritical>

	return xReturn;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08e      	sub	sp, #56	; 0x38
 8004e9c:	af04      	add	r7, sp, #16
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10a      	bne.n	8004ec2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	623b      	str	r3, [r7, #32]
}
 8004ebe:	bf00      	nop
 8004ec0:	e7fe      	b.n	8004ec0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <xTaskCreateStatic+0x46>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	61fb      	str	r3, [r7, #28]
}
 8004eda:	bf00      	nop
 8004edc:	e7fe      	b.n	8004edc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ede:	2360      	movs	r3, #96	; 0x60
 8004ee0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	2b60      	cmp	r3, #96	; 0x60
 8004ee6:	d00a      	beq.n	8004efe <xTaskCreateStatic+0x66>
	__asm volatile
 8004ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	61bb      	str	r3, [r7, #24]
}
 8004efa:	bf00      	nop
 8004efc:	e7fe      	b.n	8004efc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004efe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d01e      	beq.n	8004f44 <xTaskCreateStatic+0xac>
 8004f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01b      	beq.n	8004f44 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	2202      	movs	r2, #2
 8004f1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f1e:	2300      	movs	r3, #0
 8004f20:	9303      	str	r3, [sp, #12]
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	9302      	str	r3, [sp, #8]
 8004f26:	f107 0314 	add.w	r3, r7, #20
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f850 	bl	8004fdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f3e:	f000 f8e3 	bl	8005108 <prvAddNewTaskToReadyList>
 8004f42:	e001      	b.n	8004f48 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f48:	697b      	ldr	r3, [r7, #20]
	}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3728      	adds	r7, #40	; 0x28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b08c      	sub	sp, #48	; 0x30
 8004f56:	af04      	add	r7, sp, #16
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f62:	88fb      	ldrh	r3, [r7, #6]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4618      	mov	r0, r3
 8004f68:	f001 fe36 	bl	8006bd8 <pvPortMalloc>
 8004f6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00e      	beq.n	8004f92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f74:	2060      	movs	r0, #96	; 0x60
 8004f76:	f001 fe2f 	bl	8006bd8 <pvPortMalloc>
 8004f7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	631a      	str	r2, [r3, #48]	; 0x30
 8004f88:	e005      	b.n	8004f96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f8a:	6978      	ldr	r0, [r7, #20]
 8004f8c:	f001 fee8 	bl	8006d60 <vPortFree>
 8004f90:	e001      	b.n	8004f96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d017      	beq.n	8004fcc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fa4:	88fa      	ldrh	r2, [r7, #6]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9303      	str	r3, [sp, #12]
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	9302      	str	r3, [sp, #8]
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 f80e 	bl	8004fdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fc0:	69f8      	ldr	r0, [r7, #28]
 8004fc2:	f000 f8a1 	bl	8005108 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	e002      	b.n	8004fd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fd2:	69bb      	ldr	r3, [r7, #24]
	}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3720      	adds	r7, #32
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	21a5      	movs	r1, #165	; 0xa5
 8004ff6:	f002 ff41 	bl	8007e7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005004:	3b01      	subs	r3, #1
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	f023 0307 	bic.w	r3, r3, #7
 8005012:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <prvInitialiseNewTask+0x58>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	617b      	str	r3, [r7, #20]
}
 8005030:	bf00      	nop
 8005032:	e7fe      	b.n	8005032 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d01f      	beq.n	800507a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800503a:	2300      	movs	r3, #0
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	e012      	b.n	8005066 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	4413      	add	r3, r2
 8005046:	7819      	ldrb	r1, [r3, #0]
 8005048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	4413      	add	r3, r2
 800504e:	3334      	adds	r3, #52	; 0x34
 8005050:	460a      	mov	r2, r1
 8005052:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	4413      	add	r3, r2
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d006      	beq.n	800506e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	3301      	adds	r3, #1
 8005064:	61fb      	str	r3, [r7, #28]
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	2b0f      	cmp	r3, #15
 800506a:	d9e9      	bls.n	8005040 <prvInitialiseNewTask+0x64>
 800506c:	e000      	b.n	8005070 <prvInitialiseNewTask+0x94>
			{
				break;
 800506e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005078:	e003      	b.n	8005082 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	2b06      	cmp	r3, #6
 8005086:	d901      	bls.n	800508c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005088:	2306      	movs	r3, #6
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005090:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005096:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	2200      	movs	r2, #0
 800509c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	3304      	adds	r3, #4
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff f999 	bl	80043da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	3318      	adds	r3, #24
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff f994 	bl	80043da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	f1c3 0207 	rsb	r2, r3, #7
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	2200      	movs	r2, #0
 80050cc:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	2200      	movs	r2, #0
 80050d2:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	68f9      	ldr	r1, [r7, #12]
 80050e8:	69b8      	ldr	r0, [r7, #24]
 80050ea:	f001 fb29 	bl	8006740 <pxPortInitialiseStack>
 80050ee:	4602      	mov	r2, r0
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005100:	bf00      	nop
 8005102:	3720      	adds	r7, #32
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005110:	f001 fc40 	bl	8006994 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005114:	4b2c      	ldr	r3, [pc, #176]	; (80051c8 <prvAddNewTaskToReadyList+0xc0>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3301      	adds	r3, #1
 800511a:	4a2b      	ldr	r2, [pc, #172]	; (80051c8 <prvAddNewTaskToReadyList+0xc0>)
 800511c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800511e:	4b2b      	ldr	r3, [pc, #172]	; (80051cc <prvAddNewTaskToReadyList+0xc4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005126:	4a29      	ldr	r2, [pc, #164]	; (80051cc <prvAddNewTaskToReadyList+0xc4>)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800512c:	4b26      	ldr	r3, [pc, #152]	; (80051c8 <prvAddNewTaskToReadyList+0xc0>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d110      	bne.n	8005156 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005134:	f000 fe22 	bl	8005d7c <prvInitialiseTaskLists>
 8005138:	e00d      	b.n	8005156 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800513a:	4b25      	ldr	r3, [pc, #148]	; (80051d0 <prvAddNewTaskToReadyList+0xc8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d109      	bne.n	8005156 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005142:	4b22      	ldr	r3, [pc, #136]	; (80051cc <prvAddNewTaskToReadyList+0xc4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	429a      	cmp	r2, r3
 800514e:	d802      	bhi.n	8005156 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005150:	4a1e      	ldr	r2, [pc, #120]	; (80051cc <prvAddNewTaskToReadyList+0xc4>)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005156:	4b1f      	ldr	r3, [pc, #124]	; (80051d4 <prvAddNewTaskToReadyList+0xcc>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3301      	adds	r3, #1
 800515c:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <prvAddNewTaskToReadyList+0xcc>)
 800515e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005160:	4b1c      	ldr	r3, [pc, #112]	; (80051d4 <prvAddNewTaskToReadyList+0xcc>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	2201      	movs	r2, #1
 800516e:	409a      	lsls	r2, r3
 8005170:	4b19      	ldr	r3, [pc, #100]	; (80051d8 <prvAddNewTaskToReadyList+0xd0>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4313      	orrs	r3, r2
 8005176:	4a18      	ldr	r2, [pc, #96]	; (80051d8 <prvAddNewTaskToReadyList+0xd0>)
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4a15      	ldr	r2, [pc, #84]	; (80051dc <prvAddNewTaskToReadyList+0xd4>)
 8005188:	441a      	add	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3304      	adds	r3, #4
 800518e:	4619      	mov	r1, r3
 8005190:	4610      	mov	r0, r2
 8005192:	f7ff f92f 	bl	80043f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005196:	f001 fc2d 	bl	80069f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800519a:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <prvAddNewTaskToReadyList+0xc8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00e      	beq.n	80051c0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051a2:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <prvAddNewTaskToReadyList+0xc4>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d207      	bcs.n	80051c0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051b0:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <prvAddNewTaskToReadyList+0xd8>)
 80051b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051c0:	bf00      	nop
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	20000208 	.word	0x20000208
 80051cc:	20000108 	.word	0x20000108
 80051d0:	20000214 	.word	0x20000214
 80051d4:	20000224 	.word	0x20000224
 80051d8:	20000210 	.word	0x20000210
 80051dc:	2000010c 	.word	0x2000010c
 80051e0:	e000ed04 	.word	0xe000ed04

080051e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d017      	beq.n	8005226 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051f6:	4b13      	ldr	r3, [pc, #76]	; (8005244 <vTaskDelay+0x60>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <vTaskDelay+0x30>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	60bb      	str	r3, [r7, #8]
}
 8005210:	bf00      	nop
 8005212:	e7fe      	b.n	8005212 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005214:	f000 fa18 	bl	8005648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005218:	2100      	movs	r1, #0
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f001 fa26 	bl	800666c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005220:	f000 fa20 	bl	8005664 <xTaskResumeAll>
 8005224:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d107      	bne.n	800523c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800522c:	4b06      	ldr	r3, [pc, #24]	; (8005248 <vTaskDelay+0x64>)
 800522e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800523c:	bf00      	nop
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	20000230 	.word	0x20000230
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10a      	bne.n	8005274 <eTaskGetState+0x28>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	60bb      	str	r3, [r7, #8]
}
 8005270:	bf00      	nop
 8005272:	e7fe      	b.n	8005272 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8005274:	4b23      	ldr	r3, [pc, #140]	; (8005304 <eTaskGetState+0xb8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	429a      	cmp	r2, r3
 800527c:	d102      	bne.n	8005284 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800527e:	2300      	movs	r3, #0
 8005280:	77fb      	strb	r3, [r7, #31]
 8005282:	e03a      	b.n	80052fa <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8005284:	f001 fb86 	bl	8006994 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800528e:	4b1e      	ldr	r3, [pc, #120]	; (8005308 <eTaskGetState+0xbc>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8005294:	4b1d      	ldr	r3, [pc, #116]	; (800530c <eTaskGetState+0xc0>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800529a:	f001 fbab 	bl	80069f4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d003      	beq.n	80052ae <eTaskGetState+0x62>
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d102      	bne.n	80052b4 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80052ae:	2302      	movs	r3, #2
 80052b0:	77fb      	strb	r3, [r7, #31]
 80052b2:	e022      	b.n	80052fa <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	4a16      	ldr	r2, [pc, #88]	; (8005310 <eTaskGetState+0xc4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d112      	bne.n	80052e2 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10b      	bne.n	80052dc <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d102      	bne.n	80052d6 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 80052d0:	2302      	movs	r3, #2
 80052d2:	77fb      	strb	r3, [r7, #31]
 80052d4:	e011      	b.n	80052fa <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 80052d6:	2303      	movs	r3, #3
 80052d8:	77fb      	strb	r3, [r7, #31]
 80052da:	e00e      	b.n	80052fa <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80052dc:	2302      	movs	r3, #2
 80052de:	77fb      	strb	r3, [r7, #31]
 80052e0:	e00b      	b.n	80052fa <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	4a0b      	ldr	r2, [pc, #44]	; (8005314 <eTaskGetState+0xc8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d002      	beq.n	80052f0 <eTaskGetState+0xa4>
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d102      	bne.n	80052f6 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80052f0:	2304      	movs	r3, #4
 80052f2:	77fb      	strb	r3, [r7, #31]
 80052f4:	e001      	b.n	80052fa <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80052f6:	2301      	movs	r3, #1
 80052f8:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80052fa:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80052fc:	4618      	mov	r0, r3
 80052fe:	3720      	adds	r7, #32
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20000108 	.word	0x20000108
 8005308:	200001c0 	.word	0x200001c0
 800530c:	200001c4 	.word	0x200001c4
 8005310:	200001f4 	.word	0x200001f4
 8005314:	200001dc 	.word	0x200001dc

08005318 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005320:	f001 fb38 	bl	8006994 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d102      	bne.n	8005330 <vTaskSuspend+0x18>
 800532a:	4b3c      	ldr	r3, [pc, #240]	; (800541c <vTaskSuspend+0x104>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	e000      	b.n	8005332 <vTaskSuspend+0x1a>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3304      	adds	r3, #4
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff f8b8 	bl	80044ae <uxListRemove>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d115      	bne.n	8005370 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005348:	4935      	ldr	r1, [pc, #212]	; (8005420 <vTaskSuspend+0x108>)
 800534a:	4613      	mov	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	440b      	add	r3, r1
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10a      	bne.n	8005370 <vTaskSuspend+0x58>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	2201      	movs	r2, #1
 8005360:	fa02 f303 	lsl.w	r3, r2, r3
 8005364:	43da      	mvns	r2, r3
 8005366:	4b2f      	ldr	r3, [pc, #188]	; (8005424 <vTaskSuspend+0x10c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4013      	ands	r3, r2
 800536c:	4a2d      	ldr	r2, [pc, #180]	; (8005424 <vTaskSuspend+0x10c>)
 800536e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005374:	2b00      	cmp	r3, #0
 8005376:	d004      	beq.n	8005382 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3318      	adds	r3, #24
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff f896 	bl	80044ae <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	3304      	adds	r3, #4
 8005386:	4619      	mov	r1, r3
 8005388:	4827      	ldr	r0, [pc, #156]	; (8005428 <vTaskSuspend+0x110>)
 800538a:	f7ff f833 	bl	80043f4 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b01      	cmp	r3, #1
 8005398:	d103      	bne.n	80053a2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80053a2:	f001 fb27 	bl	80069f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80053a6:	4b21      	ldr	r3, [pc, #132]	; (800542c <vTaskSuspend+0x114>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80053ae:	f001 faf1 	bl	8006994 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80053b2:	f000 fe71 	bl	8006098 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80053b6:	f001 fb1d 	bl	80069f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80053ba:	4b18      	ldr	r3, [pc, #96]	; (800541c <vTaskSuspend+0x104>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d127      	bne.n	8005414 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80053c4:	4b19      	ldr	r3, [pc, #100]	; (800542c <vTaskSuspend+0x114>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d017      	beq.n	80053fc <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80053cc:	4b18      	ldr	r3, [pc, #96]	; (8005430 <vTaskSuspend+0x118>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <vTaskSuspend+0xd2>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	60bb      	str	r3, [r7, #8]
}
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80053ea:	4b12      	ldr	r3, [pc, #72]	; (8005434 <vTaskSuspend+0x11c>)
 80053ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053fa:	e00b      	b.n	8005414 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80053fc:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <vTaskSuspend+0x110>)
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <vTaskSuspend+0x120>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d103      	bne.n	8005410 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8005408:	4b04      	ldr	r3, [pc, #16]	; (800541c <vTaskSuspend+0x104>)
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
	}
 800540e:	e001      	b.n	8005414 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8005410:	f000 fb0c 	bl	8005a2c <vTaskSwitchContext>
	}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20000108 	.word	0x20000108
 8005420:	2000010c 	.word	0x2000010c
 8005424:	20000210 	.word	0x20000210
 8005428:	200001f4 	.word	0x200001f4
 800542c:	20000214 	.word	0x20000214
 8005430:	20000230 	.word	0x20000230
 8005434:	e000ed04 	.word	0xe000ed04
 8005438:	20000208 	.word	0x20000208

0800543c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10a      	bne.n	8005468 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	60fb      	str	r3, [r7, #12]
}
 8005464:	bf00      	nop
 8005466:	e7fe      	b.n	8005466 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	4a0a      	ldr	r2, [pc, #40]	; (8005498 <prvTaskIsTaskSuspended+0x5c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d10a      	bne.n	8005488 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005476:	4a09      	ldr	r2, [pc, #36]	; (800549c <prvTaskIsTaskSuspended+0x60>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d005      	beq.n	8005488 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8005484:	2301      	movs	r3, #1
 8005486:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005488:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800548a:	4618      	mov	r0, r3
 800548c:	371c      	adds	r7, #28
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	200001f4 	.word	0x200001f4
 800549c:	200001c8 	.word	0x200001c8

080054a0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08a      	sub	sp, #40	; 0x28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80054a8:	2300      	movs	r3, #0
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10a      	bne.n	80054cc <xTaskResumeFromISR+0x2c>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	61bb      	str	r3, [r7, #24]
}
 80054c8:	bf00      	nop
 80054ca:	e7fe      	b.n	80054ca <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054cc:	f001 fb44 	bl	8006b58 <vPortValidateInterruptPriority>
	__asm volatile
 80054d0:	f3ef 8211 	mrs	r2, BASEPRI
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	617a      	str	r2, [r7, #20]
 80054e6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80054e8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054ea:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80054ec:	6a38      	ldr	r0, [r7, #32]
 80054ee:	f7ff ffa5 	bl	800543c <prvTaskIsTaskSuspended>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d02f      	beq.n	8005558 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054f8:	4b1d      	ldr	r3, [pc, #116]	; (8005570 <xTaskResumeFromISR+0xd0>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d125      	bne.n	800554c <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005504:	4b1b      	ldr	r3, [pc, #108]	; (8005574 <xTaskResumeFromISR+0xd4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	429a      	cmp	r2, r3
 800550c:	d301      	bcc.n	8005512 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800550e:	2301      	movs	r3, #1
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	3304      	adds	r3, #4
 8005516:	4618      	mov	r0, r3
 8005518:	f7fe ffc9 	bl	80044ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	2201      	movs	r2, #1
 8005522:	409a      	lsls	r2, r3
 8005524:	4b14      	ldr	r3, [pc, #80]	; (8005578 <xTaskResumeFromISR+0xd8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4313      	orrs	r3, r2
 800552a:	4a13      	ldr	r2, [pc, #76]	; (8005578 <xTaskResumeFromISR+0xd8>)
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005532:	4613      	mov	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4a10      	ldr	r2, [pc, #64]	; (800557c <xTaskResumeFromISR+0xdc>)
 800553c:	441a      	add	r2, r3
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	3304      	adds	r3, #4
 8005542:	4619      	mov	r1, r3
 8005544:	4610      	mov	r0, r2
 8005546:	f7fe ff55 	bl	80043f4 <vListInsertEnd>
 800554a:	e005      	b.n	8005558 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	3318      	adds	r3, #24
 8005550:	4619      	mov	r1, r3
 8005552:	480b      	ldr	r0, [pc, #44]	; (8005580 <xTaskResumeFromISR+0xe0>)
 8005554:	f7fe ff4e 	bl	80043f4 <vListInsertEnd>
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f383 8811 	msr	BASEPRI, r3
}
 8005562:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005566:	4618      	mov	r0, r3
 8005568:	3728      	adds	r7, #40	; 0x28
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000230 	.word	0x20000230
 8005574:	20000108 	.word	0x20000108
 8005578:	20000210 	.word	0x20000210
 800557c:	2000010c 	.word	0x2000010c
 8005580:	200001c8 	.word	0x200001c8

08005584 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b08a      	sub	sp, #40	; 0x28
 8005588:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800558a:	2300      	movs	r3, #0
 800558c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800558e:	2300      	movs	r3, #0
 8005590:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005592:	463a      	mov	r2, r7
 8005594:	1d39      	adds	r1, r7, #4
 8005596:	f107 0308 	add.w	r3, r7, #8
 800559a:	4618      	mov	r0, r3
 800559c:	f001 fd10 	bl	8006fc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	9202      	str	r2, [sp, #8]
 80055a8:	9301      	str	r3, [sp, #4]
 80055aa:	2300      	movs	r3, #0
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	2300      	movs	r3, #0
 80055b0:	460a      	mov	r2, r1
 80055b2:	491f      	ldr	r1, [pc, #124]	; (8005630 <vTaskStartScheduler+0xac>)
 80055b4:	481f      	ldr	r0, [pc, #124]	; (8005634 <vTaskStartScheduler+0xb0>)
 80055b6:	f7ff fc6f 	bl	8004e98 <xTaskCreateStatic>
 80055ba:	4603      	mov	r3, r0
 80055bc:	4a1e      	ldr	r2, [pc, #120]	; (8005638 <vTaskStartScheduler+0xb4>)
 80055be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055c0:	4b1d      	ldr	r3, [pc, #116]	; (8005638 <vTaskStartScheduler+0xb4>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055c8:	2301      	movs	r3, #1
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	e001      	b.n	80055d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d118      	bne.n	800560a <vTaskStartScheduler+0x86>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	613b      	str	r3, [r7, #16]
}
 80055ea:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055ec:	4b13      	ldr	r3, [pc, #76]	; (800563c <vTaskStartScheduler+0xb8>)
 80055ee:	f04f 32ff 	mov.w	r2, #4294967295
 80055f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055f4:	4b12      	ldr	r3, [pc, #72]	; (8005640 <vTaskStartScheduler+0xbc>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055fa:	4b12      	ldr	r3, [pc, #72]	; (8005644 <vTaskStartScheduler+0xc0>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8005600:	f001 fcc4 	bl	8006f8c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005604:	f001 f924 	bl	8006850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005608:	e00e      	b.n	8005628 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005610:	d10a      	bne.n	8005628 <vTaskStartScheduler+0xa4>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	60fb      	str	r3, [r7, #12]
}
 8005624:	bf00      	nop
 8005626:	e7fe      	b.n	8005626 <vTaskStartScheduler+0xa2>
}
 8005628:	bf00      	nop
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	080086f4 	.word	0x080086f4
 8005634:	08005d4d 	.word	0x08005d4d
 8005638:	2000022c 	.word	0x2000022c
 800563c:	20000228 	.word	0x20000228
 8005640:	20000214 	.word	0x20000214
 8005644:	2000020c 	.word	0x2000020c

08005648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800564c:	4b04      	ldr	r3, [pc, #16]	; (8005660 <vTaskSuspendAll+0x18>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3301      	adds	r3, #1
 8005652:	4a03      	ldr	r2, [pc, #12]	; (8005660 <vTaskSuspendAll+0x18>)
 8005654:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005656:	bf00      	nop
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	20000230 	.word	0x20000230

08005664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800566e:	2300      	movs	r3, #0
 8005670:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005672:	4b41      	ldr	r3, [pc, #260]	; (8005778 <xTaskResumeAll+0x114>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <xTaskResumeAll+0x2c>
	__asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	603b      	str	r3, [r7, #0]
}
 800568c:	bf00      	nop
 800568e:	e7fe      	b.n	800568e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005690:	f001 f980 	bl	8006994 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005694:	4b38      	ldr	r3, [pc, #224]	; (8005778 <xTaskResumeAll+0x114>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3b01      	subs	r3, #1
 800569a:	4a37      	ldr	r2, [pc, #220]	; (8005778 <xTaskResumeAll+0x114>)
 800569c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800569e:	4b36      	ldr	r3, [pc, #216]	; (8005778 <xTaskResumeAll+0x114>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d161      	bne.n	800576a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056a6:	4b35      	ldr	r3, [pc, #212]	; (800577c <xTaskResumeAll+0x118>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d05d      	beq.n	800576a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056ae:	e02e      	b.n	800570e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b0:	4b33      	ldr	r3, [pc, #204]	; (8005780 <xTaskResumeAll+0x11c>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3318      	adds	r3, #24
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fe fef6 	bl	80044ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3304      	adds	r3, #4
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe fef1 	bl	80044ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d0:	2201      	movs	r2, #1
 80056d2:	409a      	lsls	r2, r3
 80056d4:	4b2b      	ldr	r3, [pc, #172]	; (8005784 <xTaskResumeAll+0x120>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4313      	orrs	r3, r2
 80056da:	4a2a      	ldr	r2, [pc, #168]	; (8005784 <xTaskResumeAll+0x120>)
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4a27      	ldr	r2, [pc, #156]	; (8005788 <xTaskResumeAll+0x124>)
 80056ec:	441a      	add	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3304      	adds	r3, #4
 80056f2:	4619      	mov	r1, r3
 80056f4:	4610      	mov	r0, r2
 80056f6:	f7fe fe7d 	bl	80043f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fe:	4b23      	ldr	r3, [pc, #140]	; (800578c <xTaskResumeAll+0x128>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	429a      	cmp	r2, r3
 8005706:	d302      	bcc.n	800570e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005708:	4b21      	ldr	r3, [pc, #132]	; (8005790 <xTaskResumeAll+0x12c>)
 800570a:	2201      	movs	r2, #1
 800570c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800570e:	4b1c      	ldr	r3, [pc, #112]	; (8005780 <xTaskResumeAll+0x11c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1cc      	bne.n	80056b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800571c:	f000 fcbc 	bl	8006098 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005720:	4b1c      	ldr	r3, [pc, #112]	; (8005794 <xTaskResumeAll+0x130>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d010      	beq.n	800574e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800572c:	f000 f8c6 	bl	80058bc <xTaskIncrementTick>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005736:	4b16      	ldr	r3, [pc, #88]	; (8005790 <xTaskResumeAll+0x12c>)
 8005738:	2201      	movs	r2, #1
 800573a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3b01      	subs	r3, #1
 8005740:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1f1      	bne.n	800572c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005748:	4b12      	ldr	r3, [pc, #72]	; (8005794 <xTaskResumeAll+0x130>)
 800574a:	2200      	movs	r2, #0
 800574c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800574e:	4b10      	ldr	r3, [pc, #64]	; (8005790 <xTaskResumeAll+0x12c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d009      	beq.n	800576a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005756:	2301      	movs	r3, #1
 8005758:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800575a:	4b0f      	ldr	r3, [pc, #60]	; (8005798 <xTaskResumeAll+0x134>)
 800575c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800576a:	f001 f943 	bl	80069f4 <vPortExitCritical>

	return xAlreadyYielded;
 800576e:	68bb      	ldr	r3, [r7, #8]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	20000230 	.word	0x20000230
 800577c:	20000208 	.word	0x20000208
 8005780:	200001c8 	.word	0x200001c8
 8005784:	20000210 	.word	0x20000210
 8005788:	2000010c 	.word	0x2000010c
 800578c:	20000108 	.word	0x20000108
 8005790:	2000021c 	.word	0x2000021c
 8005794:	20000218 	.word	0x20000218
 8005798:	e000ed04 	.word	0xe000ed04

0800579c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80057a8:	2300      	movs	r3, #0
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	2307      	movs	r3, #7
 80057ae:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80057b0:	f7ff ff4a 	bl	8005648 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80057b4:	4b3b      	ldr	r3, [pc, #236]	; (80058a4 <uxTaskGetSystemState+0x108>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d36a      	bcc.n	8005894 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4613      	mov	r3, r2
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	461a      	mov	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	1898      	adds	r0, r3, r2
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4613      	mov	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4a32      	ldr	r2, [pc, #200]	; (80058a8 <uxTaskGetSystemState+0x10c>)
 80057e0:	4413      	add	r3, r2
 80057e2:	2201      	movs	r2, #1
 80057e4:	4619      	mov	r1, r3
 80057e6:	f000 fb9d 	bl	8005f24 <prvListTasksWithinSingleList>
 80057ea:	4602      	mov	r2, r0
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	4413      	add	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e2      	bne.n	80057be <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4613      	mov	r3, r2
 80057fc:	00db      	lsls	r3, r3, #3
 80057fe:	4413      	add	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	461a      	mov	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	4a28      	ldr	r2, [pc, #160]	; (80058ac <uxTaskGetSystemState+0x110>)
 800580a:	6811      	ldr	r1, [r2, #0]
 800580c:	2202      	movs	r2, #2
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fb88 	bl	8005f24 <prvListTasksWithinSingleList>
 8005814:	4602      	mov	r2, r0
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	4413      	add	r3, r2
 800581a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	4613      	mov	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	461a      	mov	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4413      	add	r3, r2
 800582c:	4a20      	ldr	r2, [pc, #128]	; (80058b0 <uxTaskGetSystemState+0x114>)
 800582e:	6811      	ldr	r1, [r2, #0]
 8005830:	2202      	movs	r2, #2
 8005832:	4618      	mov	r0, r3
 8005834:	f000 fb76 	bl	8005f24 <prvListTasksWithinSingleList>
 8005838:	4602      	mov	r2, r0
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	4413      	add	r3, r2
 800583e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4613      	mov	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	461a      	mov	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4413      	add	r3, r2
 8005850:	2204      	movs	r2, #4
 8005852:	4918      	ldr	r1, [pc, #96]	; (80058b4 <uxTaskGetSystemState+0x118>)
 8005854:	4618      	mov	r0, r3
 8005856:	f000 fb65 	bl	8005f24 <prvListTasksWithinSingleList>
 800585a:	4602      	mov	r2, r0
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	4413      	add	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4613      	mov	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	461a      	mov	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4413      	add	r3, r2
 8005872:	2203      	movs	r2, #3
 8005874:	4910      	ldr	r1, [pc, #64]	; (80058b8 <uxTaskGetSystemState+0x11c>)
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fb54 	bl	8005f24 <prvListTasksWithinSingleList>
 800587c:	4602      	mov	r2, r0
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	4413      	add	r3, r2
 8005882:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d004      	beq.n	8005894 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800588a:	f001 fb87 	bl	8006f9c <getRunTimeCounterValue>
 800588e:	4602      	mov	r2, r0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8005894:	f7ff fee6 	bl	8005664 <xTaskResumeAll>

		return uxTask;
 8005898:	697b      	ldr	r3, [r7, #20]
	}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20000208 	.word	0x20000208
 80058a8:	2000010c 	.word	0x2000010c
 80058ac:	200001c0 	.word	0x200001c0
 80058b0:	200001c4 	.word	0x200001c4
 80058b4:	200001dc 	.word	0x200001dc
 80058b8:	200001f4 	.word	0x200001f4

080058bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c6:	4b4e      	ldr	r3, [pc, #312]	; (8005a00 <xTaskIncrementTick+0x144>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f040 8088 	bne.w	80059e0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058d0:	4b4c      	ldr	r3, [pc, #304]	; (8005a04 <xTaskIncrementTick+0x148>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3301      	adds	r3, #1
 80058d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058d8:	4a4a      	ldr	r2, [pc, #296]	; (8005a04 <xTaskIncrementTick+0x148>)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d120      	bne.n	8005926 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80058e4:	4b48      	ldr	r3, [pc, #288]	; (8005a08 <xTaskIncrementTick+0x14c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <xTaskIncrementTick+0x48>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	603b      	str	r3, [r7, #0]
}
 8005900:	bf00      	nop
 8005902:	e7fe      	b.n	8005902 <xTaskIncrementTick+0x46>
 8005904:	4b40      	ldr	r3, [pc, #256]	; (8005a08 <xTaskIncrementTick+0x14c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	4b40      	ldr	r3, [pc, #256]	; (8005a0c <xTaskIncrementTick+0x150>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a3e      	ldr	r2, [pc, #248]	; (8005a08 <xTaskIncrementTick+0x14c>)
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	4a3e      	ldr	r2, [pc, #248]	; (8005a0c <xTaskIncrementTick+0x150>)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	4b3d      	ldr	r3, [pc, #244]	; (8005a10 <xTaskIncrementTick+0x154>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3301      	adds	r3, #1
 800591e:	4a3c      	ldr	r2, [pc, #240]	; (8005a10 <xTaskIncrementTick+0x154>)
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	f000 fbb9 	bl	8006098 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005926:	4b3b      	ldr	r3, [pc, #236]	; (8005a14 <xTaskIncrementTick+0x158>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	429a      	cmp	r2, r3
 800592e:	d348      	bcc.n	80059c2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005930:	4b35      	ldr	r3, [pc, #212]	; (8005a08 <xTaskIncrementTick+0x14c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d104      	bne.n	8005944 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800593a:	4b36      	ldr	r3, [pc, #216]	; (8005a14 <xTaskIncrementTick+0x158>)
 800593c:	f04f 32ff 	mov.w	r2, #4294967295
 8005940:	601a      	str	r2, [r3, #0]
					break;
 8005942:	e03e      	b.n	80059c2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005944:	4b30      	ldr	r3, [pc, #192]	; (8005a08 <xTaskIncrementTick+0x14c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	429a      	cmp	r2, r3
 800595a:	d203      	bcs.n	8005964 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800595c:	4a2d      	ldr	r2, [pc, #180]	; (8005a14 <xTaskIncrementTick+0x158>)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005962:	e02e      	b.n	80059c2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	3304      	adds	r3, #4
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe fda0 	bl	80044ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	2b00      	cmp	r3, #0
 8005974:	d004      	beq.n	8005980 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	3318      	adds	r3, #24
 800597a:	4618      	mov	r0, r3
 800597c:	f7fe fd97 	bl	80044ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	2201      	movs	r2, #1
 8005986:	409a      	lsls	r2, r3
 8005988:	4b23      	ldr	r3, [pc, #140]	; (8005a18 <xTaskIncrementTick+0x15c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4313      	orrs	r3, r2
 800598e:	4a22      	ldr	r2, [pc, #136]	; (8005a18 <xTaskIncrementTick+0x15c>)
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4a1f      	ldr	r2, [pc, #124]	; (8005a1c <xTaskIncrementTick+0x160>)
 80059a0:	441a      	add	r2, r3
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	3304      	adds	r3, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f7fe fd23 	bl	80043f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b2:	4b1b      	ldr	r3, [pc, #108]	; (8005a20 <xTaskIncrementTick+0x164>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d3b9      	bcc.n	8005930 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80059bc:	2301      	movs	r3, #1
 80059be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c0:	e7b6      	b.n	8005930 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059c2:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <xTaskIncrementTick+0x164>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c8:	4914      	ldr	r1, [pc, #80]	; (8005a1c <xTaskIncrementTick+0x160>)
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	440b      	add	r3, r1
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d907      	bls.n	80059ea <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80059da:	2301      	movs	r3, #1
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	e004      	b.n	80059ea <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80059e0:	4b10      	ldr	r3, [pc, #64]	; (8005a24 <xTaskIncrementTick+0x168>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3301      	adds	r3, #1
 80059e6:	4a0f      	ldr	r2, [pc, #60]	; (8005a24 <xTaskIncrementTick+0x168>)
 80059e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80059ea:	4b0f      	ldr	r3, [pc, #60]	; (8005a28 <xTaskIncrementTick+0x16c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80059f2:	2301      	movs	r3, #1
 80059f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80059f6:	697b      	ldr	r3, [r7, #20]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	20000230 	.word	0x20000230
 8005a04:	2000020c 	.word	0x2000020c
 8005a08:	200001c0 	.word	0x200001c0
 8005a0c:	200001c4 	.word	0x200001c4
 8005a10:	20000220 	.word	0x20000220
 8005a14:	20000228 	.word	0x20000228
 8005a18:	20000210 	.word	0x20000210
 8005a1c:	2000010c 	.word	0x2000010c
 8005a20:	20000108 	.word	0x20000108
 8005a24:	20000218 	.word	0x20000218
 8005a28:	2000021c 	.word	0x2000021c

08005a2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a32:	4b32      	ldr	r3, [pc, #200]	; (8005afc <vTaskSwitchContext+0xd0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a3a:	4b31      	ldr	r3, [pc, #196]	; (8005b00 <vTaskSwitchContext+0xd4>)
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a40:	e058      	b.n	8005af4 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 8005a42:	4b2f      	ldr	r3, [pc, #188]	; (8005b00 <vTaskSwitchContext+0xd4>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005a48:	f001 faa8 	bl	8006f9c <getRunTimeCounterValue>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	4a2d      	ldr	r2, [pc, #180]	; (8005b04 <vTaskSwitchContext+0xd8>)
 8005a50:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8005a52:	4b2c      	ldr	r3, [pc, #176]	; (8005b04 <vTaskSwitchContext+0xd8>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	4b2c      	ldr	r3, [pc, #176]	; (8005b08 <vTaskSwitchContext+0xdc>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d909      	bls.n	8005a72 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005a5e:	4b2b      	ldr	r3, [pc, #172]	; (8005b0c <vTaskSwitchContext+0xe0>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a64:	4a27      	ldr	r2, [pc, #156]	; (8005b04 <vTaskSwitchContext+0xd8>)
 8005a66:	6810      	ldr	r0, [r2, #0]
 8005a68:	4a27      	ldr	r2, [pc, #156]	; (8005b08 <vTaskSwitchContext+0xdc>)
 8005a6a:	6812      	ldr	r2, [r2, #0]
 8005a6c:	1a82      	subs	r2, r0, r2
 8005a6e:	440a      	add	r2, r1
 8005a70:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8005a72:	4b24      	ldr	r3, [pc, #144]	; (8005b04 <vTaskSwitchContext+0xd8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a24      	ldr	r2, [pc, #144]	; (8005b08 <vTaskSwitchContext+0xdc>)
 8005a78:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a7a:	4b25      	ldr	r3, [pc, #148]	; (8005b10 <vTaskSwitchContext+0xe4>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	fab3 f383 	clz	r3, r3
 8005a86:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005a88:	7afb      	ldrb	r3, [r7, #11]
 8005a8a:	f1c3 031f 	rsb	r3, r3, #31
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	4920      	ldr	r1, [pc, #128]	; (8005b14 <vTaskSwitchContext+0xe8>)
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4613      	mov	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10a      	bne.n	8005aba <vTaskSwitchContext+0x8e>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	607b      	str	r3, [r7, #4]
}
 8005ab6:	bf00      	nop
 8005ab8:	e7fe      	b.n	8005ab8 <vTaskSwitchContext+0x8c>
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <vTaskSwitchContext+0xe8>)
 8005ac6:	4413      	add	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	605a      	str	r2, [r3, #4]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	3308      	adds	r3, #8
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d104      	bne.n	8005aea <vTaskSwitchContext+0xbe>
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	605a      	str	r2, [r3, #4]
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	4a06      	ldr	r2, [pc, #24]	; (8005b0c <vTaskSwitchContext+0xe0>)
 8005af2:	6013      	str	r3, [r2, #0]
}
 8005af4:	bf00      	nop
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20000230 	.word	0x20000230
 8005b00:	2000021c 	.word	0x2000021c
 8005b04:	20000238 	.word	0x20000238
 8005b08:	20000234 	.word	0x20000234
 8005b0c:	20000108 	.word	0x20000108
 8005b10:	20000210 	.word	0x20000210
 8005b14:	2000010c 	.word	0x2000010c

08005b18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	60fb      	str	r3, [r7, #12]
}
 8005b3a:	bf00      	nop
 8005b3c:	e7fe      	b.n	8005b3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b3e:	4b07      	ldr	r3, [pc, #28]	; (8005b5c <vTaskPlaceOnEventList+0x44>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3318      	adds	r3, #24
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fe fc78 	bl	800443c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	6838      	ldr	r0, [r7, #0]
 8005b50:	f000 fd8c 	bl	800666c <prvAddCurrentTaskToDelayedList>
}
 8005b54:	bf00      	nop
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20000108 	.word	0x20000108

08005b60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10a      	bne.n	8005b8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	60fb      	str	r3, [r7, #12]
}
 8005b88:	bf00      	nop
 8005b8a:	e7fe      	b.n	8005b8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	3318      	adds	r3, #24
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fe fc8c 	bl	80044ae <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b96:	4b1d      	ldr	r3, [pc, #116]	; (8005c0c <xTaskRemoveFromEventList+0xac>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d11c      	bne.n	8005bd8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe fc83 	bl	80044ae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	2201      	movs	r2, #1
 8005bae:	409a      	lsls	r2, r3
 8005bb0:	4b17      	ldr	r3, [pc, #92]	; (8005c10 <xTaskRemoveFromEventList+0xb0>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	4a16      	ldr	r2, [pc, #88]	; (8005c10 <xTaskRemoveFromEventList+0xb0>)
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4a13      	ldr	r2, [pc, #76]	; (8005c14 <xTaskRemoveFromEventList+0xb4>)
 8005bc8:	441a      	add	r2, r3
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	f7fe fc0f 	bl	80043f4 <vListInsertEnd>
 8005bd6:	e005      	b.n	8005be4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	3318      	adds	r3, #24
 8005bdc:	4619      	mov	r1, r3
 8005bde:	480e      	ldr	r0, [pc, #56]	; (8005c18 <xTaskRemoveFromEventList+0xb8>)
 8005be0:	f7fe fc08 	bl	80043f4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be8:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <xTaskRemoveFromEventList+0xbc>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d905      	bls.n	8005bfe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <xTaskRemoveFromEventList+0xc0>)
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	e001      	b.n	8005c02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c02:	697b      	ldr	r3, [r7, #20]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	20000230 	.word	0x20000230
 8005c10:	20000210 	.word	0x20000210
 8005c14:	2000010c 	.word	0x2000010c
 8005c18:	200001c8 	.word	0x200001c8
 8005c1c:	20000108 	.word	0x20000108
 8005c20:	2000021c 	.word	0x2000021c

08005c24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c2c:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <vTaskInternalSetTimeOutState+0x24>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c34:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <vTaskInternalSetTimeOutState+0x28>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	605a      	str	r2, [r3, #4]
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	20000220 	.word	0x20000220
 8005c4c:	2000020c 	.word	0x2000020c

08005c50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10a      	bne.n	8005c76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	613b      	str	r3, [r7, #16]
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	60fb      	str	r3, [r7, #12]
}
 8005c8e:	bf00      	nop
 8005c90:	e7fe      	b.n	8005c90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c92:	f000 fe7f 	bl	8006994 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c96:	4b24      	ldr	r3, [pc, #144]	; (8005d28 <xTaskCheckForTimeOut+0xd8>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8005ca6:	4b21      	ldr	r3, [pc, #132]	; (8005d2c <xTaskCheckForTimeOut+0xdc>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d007      	beq.n	8005cc2 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8005cb2:	4b1e      	ldr	r3, [pc, #120]	; (8005d2c <xTaskCheckForTimeOut+0xdc>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
				xReturn = pdTRUE;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	61fb      	str	r3, [r7, #28]
 8005cc0:	e02b      	b.n	8005d1a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cca:	d102      	bne.n	8005cd2 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	e023      	b.n	8005d1a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4b16      	ldr	r3, [pc, #88]	; (8005d30 <xTaskCheckForTimeOut+0xe0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d007      	beq.n	8005cee <xTaskCheckForTimeOut+0x9e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d302      	bcc.n	8005cee <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	61fb      	str	r3, [r7, #28]
 8005cec:	e015      	b.n	8005d1a <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d20b      	bcs.n	8005d10 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff ff8d 	bl	8005c24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61fb      	str	r3, [r7, #28]
 8005d0e:	e004      	b.n	8005d1a <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d16:	2301      	movs	r3, #1
 8005d18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d1a:	f000 fe6b 	bl	80069f4 <vPortExitCritical>

	return xReturn;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3720      	adds	r7, #32
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	2000020c 	.word	0x2000020c
 8005d2c:	20000108 	.word	0x20000108
 8005d30:	20000220 	.word	0x20000220

08005d34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d38:	4b03      	ldr	r3, [pc, #12]	; (8005d48 <vTaskMissedYield+0x14>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
}
 8005d3e:	bf00      	nop
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	2000021c 	.word	0x2000021c

08005d4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d54:	f000 f852 	bl	8005dfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d58:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <prvIdleTask+0x28>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d9f9      	bls.n	8005d54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d60:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <prvIdleTask+0x2c>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d70:	e7f0      	b.n	8005d54 <prvIdleTask+0x8>
 8005d72:	bf00      	nop
 8005d74:	2000010c 	.word	0x2000010c
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d82:	2300      	movs	r3, #0
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	e00c      	b.n	8005da2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4a12      	ldr	r2, [pc, #72]	; (8005ddc <prvInitialiseTaskLists+0x60>)
 8005d94:	4413      	add	r3, r2
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fe faff 	bl	800439a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	607b      	str	r3, [r7, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b06      	cmp	r3, #6
 8005da6:	d9ef      	bls.n	8005d88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005da8:	480d      	ldr	r0, [pc, #52]	; (8005de0 <prvInitialiseTaskLists+0x64>)
 8005daa:	f7fe faf6 	bl	800439a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005dae:	480d      	ldr	r0, [pc, #52]	; (8005de4 <prvInitialiseTaskLists+0x68>)
 8005db0:	f7fe faf3 	bl	800439a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005db4:	480c      	ldr	r0, [pc, #48]	; (8005de8 <prvInitialiseTaskLists+0x6c>)
 8005db6:	f7fe faf0 	bl	800439a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dba:	480c      	ldr	r0, [pc, #48]	; (8005dec <prvInitialiseTaskLists+0x70>)
 8005dbc:	f7fe faed 	bl	800439a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005dc0:	480b      	ldr	r0, [pc, #44]	; (8005df0 <prvInitialiseTaskLists+0x74>)
 8005dc2:	f7fe faea 	bl	800439a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <prvInitialiseTaskLists+0x78>)
 8005dc8:	4a05      	ldr	r2, [pc, #20]	; (8005de0 <prvInitialiseTaskLists+0x64>)
 8005dca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dcc:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <prvInitialiseTaskLists+0x7c>)
 8005dce:	4a05      	ldr	r2, [pc, #20]	; (8005de4 <prvInitialiseTaskLists+0x68>)
 8005dd0:	601a      	str	r2, [r3, #0]
}
 8005dd2:	bf00      	nop
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	2000010c 	.word	0x2000010c
 8005de0:	20000198 	.word	0x20000198
 8005de4:	200001ac 	.word	0x200001ac
 8005de8:	200001c8 	.word	0x200001c8
 8005dec:	200001dc 	.word	0x200001dc
 8005df0:	200001f4 	.word	0x200001f4
 8005df4:	200001c0 	.word	0x200001c0
 8005df8:	200001c4 	.word	0x200001c4

08005dfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e02:	e019      	b.n	8005e38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e04:	f000 fdc6 	bl	8006994 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e08:	4b10      	ldr	r3, [pc, #64]	; (8005e4c <prvCheckTasksWaitingTermination+0x50>)
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3304      	adds	r3, #4
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fe fb4a 	bl	80044ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e1a:	4b0d      	ldr	r3, [pc, #52]	; (8005e50 <prvCheckTasksWaitingTermination+0x54>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	4a0b      	ldr	r2, [pc, #44]	; (8005e50 <prvCheckTasksWaitingTermination+0x54>)
 8005e22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e24:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <prvCheckTasksWaitingTermination+0x58>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	4a0a      	ldr	r2, [pc, #40]	; (8005e54 <prvCheckTasksWaitingTermination+0x58>)
 8005e2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e2e:	f000 fde1 	bl	80069f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f900 	bl	8006038 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e38:	4b06      	ldr	r3, [pc, #24]	; (8005e54 <prvCheckTasksWaitingTermination+0x58>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e1      	bne.n	8005e04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e40:	bf00      	nop
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	200001dc 	.word	0x200001dc
 8005e50:	20000208 	.word	0x20000208
 8005e54:	200001f0 	.word	0x200001f0

08005e58 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d102      	bne.n	8005e72 <vTaskGetInfo+0x1a>
 8005e6c:	4b2c      	ldr	r3, [pc, #176]	; (8005f20 <vTaskGetInfo+0xc8>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	e000      	b.n	8005e74 <vTaskGetInfo+0x1c>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	2b05      	cmp	r3, #5
 8005eb2:	d01a      	beq.n	8005eea <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8005eb4:	4b1a      	ldr	r3, [pc, #104]	; (8005f20 <vTaskGetInfo+0xc8>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d103      	bne.n	8005ec6 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	731a      	strb	r2, [r3, #12]
 8005ec4:	e018      	b.n	8005ef8 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	78fa      	ldrb	r2, [r7, #3]
 8005eca:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d112      	bne.n	8005ef8 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8005ed2:	f7ff fbb9 	bl	8005648 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8005ee4:	f7ff fbbe 	bl	8005664 <xTaskResumeAll>
 8005ee8:	e006      	b.n	8005ef8 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8005eea:	6978      	ldr	r0, [r7, #20]
 8005eec:	f7ff f9ae 	bl	800524c <eTaskGetState>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d009      	beq.n	8005f12 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 f860 	bl	8005fc8 <prvTaskCheckFreeStackSpace>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8005f10:	e002      	b.n	8005f18 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2200      	movs	r2, #0
 8005f16:	841a      	strh	r2, [r3, #32]
	}
 8005f18:	bf00      	nop
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20000108 	.word	0x20000108

08005f24 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08a      	sub	sp, #40	; 0x28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d03f      	beq.n	8005fbe <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	623b      	str	r3, [r7, #32]
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	605a      	str	r2, [r3, #4]
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	3308      	adds	r3, #8
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d104      	bne.n	8005f62 <prvListTasksWithinSingleList+0x3e>
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	605a      	str	r2, [r3, #4]
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	61bb      	str	r3, [r7, #24]
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	605a      	str	r2, [r3, #4]
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d104      	bne.n	8005f8e <prvListTasksWithinSingleList+0x6a>
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	605a      	str	r2, [r3, #4]
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8005f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f98:	4613      	mov	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	1899      	adds	r1, r3, r2
 8005fa6:	79fb      	ldrb	r3, [r7, #7]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	6978      	ldr	r0, [r7, #20]
 8005fac:	f7ff ff54 	bl	8005e58 <vTaskGetInfo>
				uxTask++;
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d1d5      	bne.n	8005f6a <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3728      	adds	r7, #40	; 0x28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005fd4:	e005      	b.n	8005fe2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2ba5      	cmp	r3, #165	; 0xa5
 8005fe8:	d0f5      	beq.n	8005fd6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	089b      	lsrs	r3, r3, #2
 8005fee:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	b29b      	uxth	r3, r3
	}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d102      	bne.n	8006014 <uxTaskGetStackHighWaterMark+0x14>
 800600e:	4b09      	ldr	r3, [pc, #36]	; (8006034 <uxTaskGetStackHighWaterMark+0x34>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	e000      	b.n	8006016 <uxTaskGetStackHighWaterMark+0x16>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800601e:	6938      	ldr	r0, [r7, #16]
 8006020:	f7ff ffd2 	bl	8005fc8 <prvTaskCheckFreeStackSpace>
 8006024:	4603      	mov	r3, r0
 8006026:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8006028:	68fb      	ldr	r3, [r7, #12]
	}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000108 	.word	0x20000108

08006038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006046:	2b00      	cmp	r3, #0
 8006048:	d108      	bne.n	800605c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fe86 	bl	8006d60 <vPortFree>
				vPortFree( pxTCB );
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fe83 	bl	8006d60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800605a:	e018      	b.n	800608e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006062:	2b01      	cmp	r3, #1
 8006064:	d103      	bne.n	800606e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fe7a 	bl	8006d60 <vPortFree>
	}
 800606c:	e00f      	b.n	800608e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006074:	2b02      	cmp	r3, #2
 8006076:	d00a      	beq.n	800608e <prvDeleteTCB+0x56>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	60fb      	str	r3, [r7, #12]
}
 800608a:	bf00      	nop
 800608c:	e7fe      	b.n	800608c <prvDeleteTCB+0x54>
	}
 800608e:	bf00      	nop
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800609e:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <prvResetNextTaskUnblockTime+0x38>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d104      	bne.n	80060b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060a8:	4b0a      	ldr	r3, [pc, #40]	; (80060d4 <prvResetNextTaskUnblockTime+0x3c>)
 80060aa:	f04f 32ff 	mov.w	r2, #4294967295
 80060ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060b0:	e008      	b.n	80060c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060b2:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <prvResetNextTaskUnblockTime+0x38>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	4a04      	ldr	r2, [pc, #16]	; (80060d4 <prvResetNextTaskUnblockTime+0x3c>)
 80060c2:	6013      	str	r3, [r2, #0]
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	200001c0 	.word	0x200001c0
 80060d4:	20000228 	.word	0x20000228

080060d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060de:	4b0b      	ldr	r3, [pc, #44]	; (800610c <xTaskGetSchedulerState+0x34>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d102      	bne.n	80060ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060e6:	2301      	movs	r3, #1
 80060e8:	607b      	str	r3, [r7, #4]
 80060ea:	e008      	b.n	80060fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ec:	4b08      	ldr	r3, [pc, #32]	; (8006110 <xTaskGetSchedulerState+0x38>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d102      	bne.n	80060fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060f4:	2302      	movs	r3, #2
 80060f6:	607b      	str	r3, [r7, #4]
 80060f8:	e001      	b.n	80060fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060fa:	2300      	movs	r3, #0
 80060fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060fe:	687b      	ldr	r3, [r7, #4]
	}
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	20000214 	.word	0x20000214
 8006110:	20000230 	.word	0x20000230

08006114 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d06e      	beq.n	8006208 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800612a:	4b3a      	ldr	r3, [pc, #232]	; (8006214 <xTaskPriorityDisinherit+0x100>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	429a      	cmp	r2, r3
 8006132:	d00a      	beq.n	800614a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	60fb      	str	r3, [r7, #12]
}
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10a      	bne.n	8006168 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60bb      	str	r3, [r7, #8]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616c:	1e5a      	subs	r2, r3, #1
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800617a:	429a      	cmp	r2, r3
 800617c:	d044      	beq.n	8006208 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006182:	2b00      	cmp	r3, #0
 8006184:	d140      	bne.n	8006208 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	3304      	adds	r3, #4
 800618a:	4618      	mov	r0, r3
 800618c:	f7fe f98f 	bl	80044ae <uxListRemove>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d115      	bne.n	80061c2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619a:	491f      	ldr	r1, [pc, #124]	; (8006218 <xTaskPriorityDisinherit+0x104>)
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10a      	bne.n	80061c2 <xTaskPriorityDisinherit+0xae>
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	2201      	movs	r2, #1
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	43da      	mvns	r2, r3
 80061b8:	4b18      	ldr	r3, [pc, #96]	; (800621c <xTaskPriorityDisinherit+0x108>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4013      	ands	r3, r2
 80061be:	4a17      	ldr	r2, [pc, #92]	; (800621c <xTaskPriorityDisinherit+0x108>)
 80061c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ce:	f1c3 0207 	rsb	r2, r3, #7
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061da:	2201      	movs	r2, #1
 80061dc:	409a      	lsls	r2, r3
 80061de:	4b0f      	ldr	r3, [pc, #60]	; (800621c <xTaskPriorityDisinherit+0x108>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	4a0d      	ldr	r2, [pc, #52]	; (800621c <xTaskPriorityDisinherit+0x108>)
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4a08      	ldr	r2, [pc, #32]	; (8006218 <xTaskPriorityDisinherit+0x104>)
 80061f6:	441a      	add	r2, r3
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	3304      	adds	r3, #4
 80061fc:	4619      	mov	r1, r3
 80061fe:	4610      	mov	r0, r2
 8006200:	f7fe f8f8 	bl	80043f4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006204:	2301      	movs	r3, #1
 8006206:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006208:	697b      	ldr	r3, [r7, #20]
	}
 800620a:	4618      	mov	r0, r3
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000108 	.word	0x20000108
 8006218:	2000010c 	.word	0x2000010c
 800621c:	20000210 	.word	0x20000210

08006220 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 fe4d 	bl	8007ecc <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7f9 ffec 	bl	8000210 <strlen>
 8006238:	60f8      	str	r0, [r7, #12]
 800623a:	e007      	b.n	800624c <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4413      	add	r3, r2
 8006242:	2220      	movs	r2, #32
 8006244:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3301      	adds	r3, #1
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b0e      	cmp	r3, #14
 8006250:	d9f4      	bls.n	800623c <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4413      	add	r3, r2
 8006258:	2200      	movs	r2, #0
 800625a:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
	}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800627a:	4b3a      	ldr	r3, [pc, #232]	; (8006364 <vTaskGetRunTimeStats+0xf8>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8006280:	4b38      	ldr	r3, [pc, #224]	; (8006364 <vTaskGetRunTimeStats+0xf8>)
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	4613      	mov	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	4413      	add	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4618      	mov	r0, r3
 800628e:	f000 fca3 	bl	8006bd8 <pvPortMalloc>
 8006292:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d05f      	beq.n	800635a <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800629a:	f107 030c 	add.w	r3, r7, #12
 800629e:	461a      	mov	r2, r3
 80062a0:	69b9      	ldr	r1, [r7, #24]
 80062a2:	6978      	ldr	r0, [r7, #20]
 80062a4:	f7ff fa7a 	bl	800579c <uxTaskGetSystemState>
 80062a8:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4a2e      	ldr	r2, [pc, #184]	; (8006368 <vTaskGetRunTimeStats+0xfc>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d04b      	beq.n	8006354 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 80062bc:	2300      	movs	r3, #0
 80062be:	61fb      	str	r3, [r7, #28]
 80062c0:	e044      	b.n	800634c <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 80062c2:	69fa      	ldr	r2, [r7, #28]
 80062c4:	4613      	mov	r3, r2
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	4413      	add	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	461a      	mov	r2, r3
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	4413      	add	r3, r2
 80062d2:	699a      	ldr	r2, [r3, #24]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062da:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80062dc:	69fa      	ldr	r2, [r7, #28]
 80062de:	4613      	mov	r3, r2
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	461a      	mov	r2, r3
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	4413      	add	r3, r2
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff ff95 	bl	8006220 <prvWriteNameToBuffer>
 80062f6:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00e      	beq.n	800631c <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80062fe:	69fa      	ldr	r2, [r7, #28]
 8006300:	4613      	mov	r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	4413      	add	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	461a      	mov	r2, r3
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	4413      	add	r3, r2
 800630e:	699a      	ldr	r2, [r3, #24]
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	4916      	ldr	r1, [pc, #88]	; (800636c <vTaskGetRunTimeStats+0x100>)
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 fdb9 	bl	8007e8c <siprintf>
 800631a:	e00d      	b.n	8006338 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800631c:	69fa      	ldr	r2, [r7, #28]
 800631e:	4613      	mov	r3, r2
 8006320:	00db      	lsls	r3, r3, #3
 8006322:	4413      	add	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	461a      	mov	r2, r3
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	4413      	add	r3, r2
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	461a      	mov	r2, r3
 8006330:	490f      	ldr	r1, [pc, #60]	; (8006370 <vTaskGetRunTimeStats+0x104>)
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 fdaa 	bl	8007e8c <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7f9 ff69 	bl	8000210 <strlen>
 800633e:	4602      	mov	r2, r0
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4413      	add	r3, r2
 8006344:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	3301      	adds	r3, #1
 800634a:	61fb      	str	r3, [r7, #28]
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	429a      	cmp	r2, r3
 8006352:	d3b6      	bcc.n	80062c2 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8006354:	6978      	ldr	r0, [r7, #20]
 8006356:	f000 fd03 	bl	8006d60 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800635a:	bf00      	nop
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20000208 	.word	0x20000208
 8006368:	51eb851f 	.word	0x51eb851f
 800636c:	0800870c 	.word	0x0800870c
 8006370:	08008718 	.word	0x08008718

08006374 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800637e:	f000 fb09 	bl	8006994 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006382:	4b1e      	ldr	r3, [pc, #120]	; (80063fc <ulTaskNotifyTake+0x88>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006388:	2b00      	cmp	r3, #0
 800638a:	d113      	bne.n	80063b4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800638c:	4b1b      	ldr	r3, [pc, #108]	; (80063fc <ulTaskNotifyTake+0x88>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				if( xTicksToWait > ( TickType_t ) 0 )
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00b      	beq.n	80063b4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800639c:	2101      	movs	r1, #1
 800639e:	6838      	ldr	r0, [r7, #0]
 80063a0:	f000 f964 	bl	800666c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80063a4:	4b16      	ldr	r3, [pc, #88]	; (8006400 <ulTaskNotifyTake+0x8c>)
 80063a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80063b4:	f000 fb1e 	bl	80069f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80063b8:	f000 faec 	bl	8006994 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80063bc:	4b0f      	ldr	r3, [pc, #60]	; (80063fc <ulTaskNotifyTake+0x88>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00c      	beq.n	80063e4 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d004      	beq.n	80063da <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80063d0:	4b0a      	ldr	r3, [pc, #40]	; (80063fc <ulTaskNotifyTake+0x88>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2200      	movs	r2, #0
 80063d6:	659a      	str	r2, [r3, #88]	; 0x58
 80063d8:	e004      	b.n	80063e4 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80063da:	4b08      	ldr	r3, [pc, #32]	; (80063fc <ulTaskNotifyTake+0x88>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	3a01      	subs	r2, #1
 80063e2:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <ulTaskNotifyTake+0x88>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		}
		taskEXIT_CRITICAL();
 80063ee:	f000 fb01 	bl	80069f4 <vPortExitCritical>

		return ulReturn;
 80063f2:	68fb      	ldr	r3, [r7, #12]
	}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20000108 	.word	0x20000108
 8006400:	e000ed04 	.word	0xe000ed04

08006404 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006412:	f000 fabf 	bl	8006994 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006416:	4b26      	ldr	r3, [pc, #152]	; (80064b0 <xTaskNotifyWait+0xac>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d01a      	beq.n	800645a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006424:	4b22      	ldr	r3, [pc, #136]	; (80064b0 <xTaskNotifyWait+0xac>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	43d2      	mvns	r2, r2
 800642e:	400a      	ands	r2, r1
 8006430:	659a      	str	r2, [r3, #88]	; 0x58

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006432:	4b1f      	ldr	r3, [pc, #124]	; (80064b0 <xTaskNotifyWait+0xac>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

				if( xTicksToWait > ( TickType_t ) 0 )
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00b      	beq.n	800645a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006442:	2101      	movs	r1, #1
 8006444:	6838      	ldr	r0, [r7, #0]
 8006446:	f000 f911 	bl	800666c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800644a:	4b1a      	ldr	r3, [pc, #104]	; (80064b4 <xTaskNotifyWait+0xb0>)
 800644c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800645a:	f000 facb 	bl	80069f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800645e:	f000 fa99 	bl	8006994 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006468:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <xTaskNotifyWait+0xac>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006472:	4b0f      	ldr	r3, [pc, #60]	; (80064b0 <xTaskNotifyWait+0xac>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d002      	beq.n	8006486 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006480:	2300      	movs	r3, #0
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	e008      	b.n	8006498 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006486:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <xTaskNotifyWait+0xac>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	43d2      	mvns	r2, r2
 8006490:	400a      	ands	r2, r1
 8006492:	659a      	str	r2, [r3, #88]	; 0x58
				xReturn = pdTRUE;
 8006494:	2301      	movs	r3, #1
 8006496:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006498:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <xTaskNotifyWait+0xac>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		}
		taskEXIT_CRITICAL();
 80064a2:	f000 faa7 	bl	80069f4 <vPortExitCritical>

		return xReturn;
 80064a6:	697b      	ldr	r3, [r7, #20]
	}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20000108 	.word	0x20000108
 80064b4:	e000ed04 	.word	0xe000ed04

080064b8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08e      	sub	sp, #56	; 0x38
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	4613      	mov	r3, r2
 80064c6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80064c8:	2301      	movs	r3, #1
 80064ca:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064e8:	f000 fb36 	bl	8006b58 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80064f0:	f3ef 8211 	mrs	r2, BASEPRI
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	623a      	str	r2, [r7, #32]
 8006506:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006508:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006514:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006526:	2202      	movs	r2, #2
 8006528:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

			switch( eAction )
 800652c:	79fb      	ldrb	r3, [r7, #7]
 800652e:	2b04      	cmp	r3, #4
 8006530:	d828      	bhi.n	8006584 <xTaskGenericNotifyFromISR+0xcc>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <xTaskGenericNotifyFromISR+0x80>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	080065a5 	.word	0x080065a5
 800653c:	0800654d 	.word	0x0800654d
 8006540:	0800655b 	.word	0x0800655b
 8006544:	08006567 	.word	0x08006567
 8006548:	0800656f 	.word	0x0800656f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	431a      	orrs	r2, r3
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8006558:	e027      	b.n	80065aa <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 8006564:	e021      	b.n	80065aa <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	659a      	str	r2, [r3, #88]	; 0x58
					break;
 800656c:	e01d      	b.n	80065aa <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800656e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006572:	2b02      	cmp	r3, #2
 8006574:	d003      	beq.n	800657e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	659a      	str	r2, [r3, #88]	; 0x58
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800657c:	e015      	b.n	80065aa <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800657e:	2300      	movs	r3, #0
 8006580:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8006582:	e012      	b.n	80065aa <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658c:	d00c      	beq.n	80065a8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	61bb      	str	r3, [r7, #24]
}
 80065a0:	bf00      	nop
 80065a2:	e7fe      	b.n	80065a2 <xTaskGenericNotifyFromISR+0xea>
					break;
 80065a4:	bf00      	nop
 80065a6:	e000      	b.n	80065aa <xTaskGenericNotifyFromISR+0xf2>
					break;
 80065a8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80065aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d145      	bne.n	800663e <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	617b      	str	r3, [r7, #20]
}
 80065cc:	bf00      	nop
 80065ce:	e7fe      	b.n	80065ce <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065d0:	4b20      	ldr	r3, [pc, #128]	; (8006654 <xTaskGenericNotifyFromISR+0x19c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d11c      	bne.n	8006612 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	3304      	adds	r3, #4
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fd ff66 	bl	80044ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e6:	2201      	movs	r2, #1
 80065e8:	409a      	lsls	r2, r3
 80065ea:	4b1b      	ldr	r3, [pc, #108]	; (8006658 <xTaskGenericNotifyFromISR+0x1a0>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	4a19      	ldr	r2, [pc, #100]	; (8006658 <xTaskGenericNotifyFromISR+0x1a0>)
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f8:	4613      	mov	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4a16      	ldr	r2, [pc, #88]	; (800665c <xTaskGenericNotifyFromISR+0x1a4>)
 8006602:	441a      	add	r2, r3
 8006604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006606:	3304      	adds	r3, #4
 8006608:	4619      	mov	r1, r3
 800660a:	4610      	mov	r0, r2
 800660c:	f7fd fef2 	bl	80043f4 <vListInsertEnd>
 8006610:	e005      	b.n	800661e <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	3318      	adds	r3, #24
 8006616:	4619      	mov	r1, r3
 8006618:	4811      	ldr	r0, [pc, #68]	; (8006660 <xTaskGenericNotifyFromISR+0x1a8>)
 800661a:	f7fd feeb 	bl	80043f4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006622:	4b10      	ldr	r3, [pc, #64]	; (8006664 <xTaskGenericNotifyFromISR+0x1ac>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	429a      	cmp	r2, r3
 800662a:	d908      	bls.n	800663e <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800662c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006634:	2201      	movs	r2, #1
 8006636:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006638:	4b0b      	ldr	r3, [pc, #44]	; (8006668 <xTaskGenericNotifyFromISR+0x1b0>)
 800663a:	2201      	movs	r2, #1
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006640:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f383 8811 	msr	BASEPRI, r3
}
 8006648:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800664a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800664c:	4618      	mov	r0, r3
 800664e:	3738      	adds	r7, #56	; 0x38
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	20000230 	.word	0x20000230
 8006658:	20000210 	.word	0x20000210
 800665c:	2000010c 	.word	0x2000010c
 8006660:	200001c8 	.word	0x200001c8
 8006664:	20000108 	.word	0x20000108
 8006668:	2000021c 	.word	0x2000021c

0800666c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006676:	4b2b      	ldr	r3, [pc, #172]	; (8006724 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800667c:	4b2a      	ldr	r3, [pc, #168]	; (8006728 <prvAddCurrentTaskToDelayedList+0xbc>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006686:	4b28      	ldr	r3, [pc, #160]	; (8006728 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3304      	adds	r3, #4
 800668c:	4618      	mov	r0, r3
 800668e:	f7fd ff0e 	bl	80044ae <uxListRemove>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10b      	bne.n	80066b0 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006698:	4b23      	ldr	r3, [pc, #140]	; (8006728 <prvAddCurrentTaskToDelayedList+0xbc>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669e:	2201      	movs	r2, #1
 80066a0:	fa02 f303 	lsl.w	r3, r2, r3
 80066a4:	43da      	mvns	r2, r3
 80066a6:	4b21      	ldr	r3, [pc, #132]	; (800672c <prvAddCurrentTaskToDelayedList+0xc0>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4013      	ands	r3, r2
 80066ac:	4a1f      	ldr	r2, [pc, #124]	; (800672c <prvAddCurrentTaskToDelayedList+0xc0>)
 80066ae:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b6:	d10a      	bne.n	80066ce <prvAddCurrentTaskToDelayedList+0x62>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066be:	4b1a      	ldr	r3, [pc, #104]	; (8006728 <prvAddCurrentTaskToDelayedList+0xbc>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4619      	mov	r1, r3
 80066c6:	481a      	ldr	r0, [pc, #104]	; (8006730 <prvAddCurrentTaskToDelayedList+0xc4>)
 80066c8:	f7fd fe94 	bl	80043f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066cc:	e026      	b.n	800671c <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4413      	add	r3, r2
 80066d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066d6:	4b14      	ldr	r3, [pc, #80]	; (8006728 <prvAddCurrentTaskToDelayedList+0xbc>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d209      	bcs.n	80066fa <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066e6:	4b13      	ldr	r3, [pc, #76]	; (8006734 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	4b0f      	ldr	r3, [pc, #60]	; (8006728 <prvAddCurrentTaskToDelayedList+0xbc>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3304      	adds	r3, #4
 80066f0:	4619      	mov	r1, r3
 80066f2:	4610      	mov	r0, r2
 80066f4:	f7fd fea2 	bl	800443c <vListInsert>
}
 80066f8:	e010      	b.n	800671c <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066fa:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <prvAddCurrentTaskToDelayedList+0xcc>)
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3304      	adds	r3, #4
 8006704:	4619      	mov	r1, r3
 8006706:	4610      	mov	r0, r2
 8006708:	f7fd fe98 	bl	800443c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <prvAddCurrentTaskToDelayedList+0xd0>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	429a      	cmp	r2, r3
 8006714:	d202      	bcs.n	800671c <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 8006716:	4a09      	ldr	r2, [pc, #36]	; (800673c <prvAddCurrentTaskToDelayedList+0xd0>)
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6013      	str	r3, [r2, #0]
}
 800671c:	bf00      	nop
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	2000020c 	.word	0x2000020c
 8006728:	20000108 	.word	0x20000108
 800672c:	20000210 	.word	0x20000210
 8006730:	200001f4 	.word	0x200001f4
 8006734:	200001c4 	.word	0x200001c4
 8006738:	200001c0 	.word	0x200001c0
 800673c:	20000228 	.word	0x20000228

08006740 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3b04      	subs	r3, #4
 8006750:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3b04      	subs	r3, #4
 800675e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f023 0201 	bic.w	r2, r3, #1
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3b04      	subs	r3, #4
 800676e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006770:	4a0c      	ldr	r2, [pc, #48]	; (80067a4 <pxPortInitialiseStack+0x64>)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3b14      	subs	r3, #20
 800677a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3b04      	subs	r3, #4
 8006786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f06f 0202 	mvn.w	r2, #2
 800678e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3b20      	subs	r3, #32
 8006794:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006796:	68fb      	ldr	r3, [r7, #12]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	080067a9 	.word	0x080067a9

080067a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067b2:	4b12      	ldr	r3, [pc, #72]	; (80067fc <prvTaskExitError+0x54>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ba:	d00a      	beq.n	80067d2 <prvTaskExitError+0x2a>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	60fb      	str	r3, [r7, #12]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <prvTaskExitError+0x28>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	60bb      	str	r3, [r7, #8]
}
 80067e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067e6:	bf00      	nop
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0fc      	beq.n	80067e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067ee:	bf00      	nop
 80067f0:	bf00      	nop
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	20000008 	.word	0x20000008

08006800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006800:	4b07      	ldr	r3, [pc, #28]	; (8006820 <pxCurrentTCBConst2>)
 8006802:	6819      	ldr	r1, [r3, #0]
 8006804:	6808      	ldr	r0, [r1, #0]
 8006806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680a:	f380 8809 	msr	PSP, r0
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f04f 0000 	mov.w	r0, #0
 8006816:	f380 8811 	msr	BASEPRI, r0
 800681a:	4770      	bx	lr
 800681c:	f3af 8000 	nop.w

08006820 <pxCurrentTCBConst2>:
 8006820:	20000108 	.word	0x20000108
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop

08006828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006828:	4808      	ldr	r0, [pc, #32]	; (800684c <prvPortStartFirstTask+0x24>)
 800682a:	6800      	ldr	r0, [r0, #0]
 800682c:	6800      	ldr	r0, [r0, #0]
 800682e:	f380 8808 	msr	MSP, r0
 8006832:	f04f 0000 	mov.w	r0, #0
 8006836:	f380 8814 	msr	CONTROL, r0
 800683a:	b662      	cpsie	i
 800683c:	b661      	cpsie	f
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	df00      	svc	0
 8006848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800684a:	bf00      	nop
 800684c:	e000ed08 	.word	0xe000ed08

08006850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006856:	4b46      	ldr	r3, [pc, #280]	; (8006970 <xPortStartScheduler+0x120>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a46      	ldr	r2, [pc, #280]	; (8006974 <xPortStartScheduler+0x124>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d10a      	bne.n	8006876 <xPortStartScheduler+0x26>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	613b      	str	r3, [r7, #16]
}
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006876:	4b3e      	ldr	r3, [pc, #248]	; (8006970 <xPortStartScheduler+0x120>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a3f      	ldr	r2, [pc, #252]	; (8006978 <xPortStartScheduler+0x128>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d10a      	bne.n	8006896 <xPortStartScheduler+0x46>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	60fb      	str	r3, [r7, #12]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006896:	4b39      	ldr	r3, [pc, #228]	; (800697c <xPortStartScheduler+0x12c>)
 8006898:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	22ff      	movs	r2, #255	; 0xff
 80068a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	4b31      	ldr	r3, [pc, #196]	; (8006980 <xPortStartScheduler+0x130>)
 80068bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068be:	4b31      	ldr	r3, [pc, #196]	; (8006984 <xPortStartScheduler+0x134>)
 80068c0:	2207      	movs	r2, #7
 80068c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068c4:	e009      	b.n	80068da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80068c6:	4b2f      	ldr	r3, [pc, #188]	; (8006984 <xPortStartScheduler+0x134>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	4a2d      	ldr	r2, [pc, #180]	; (8006984 <xPortStartScheduler+0x134>)
 80068ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068d0:	78fb      	ldrb	r3, [r7, #3]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e2:	2b80      	cmp	r3, #128	; 0x80
 80068e4:	d0ef      	beq.n	80068c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068e6:	4b27      	ldr	r3, [pc, #156]	; (8006984 <xPortStartScheduler+0x134>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f1c3 0307 	rsb	r3, r3, #7
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d00a      	beq.n	8006908 <xPortStartScheduler+0xb8>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	60bb      	str	r3, [r7, #8]
}
 8006904:	bf00      	nop
 8006906:	e7fe      	b.n	8006906 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006908:	4b1e      	ldr	r3, [pc, #120]	; (8006984 <xPortStartScheduler+0x134>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	4a1d      	ldr	r2, [pc, #116]	; (8006984 <xPortStartScheduler+0x134>)
 8006910:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006912:	4b1c      	ldr	r3, [pc, #112]	; (8006984 <xPortStartScheduler+0x134>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800691a:	4a1a      	ldr	r2, [pc, #104]	; (8006984 <xPortStartScheduler+0x134>)
 800691c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	b2da      	uxtb	r2, r3
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006926:	4b18      	ldr	r3, [pc, #96]	; (8006988 <xPortStartScheduler+0x138>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a17      	ldr	r2, [pc, #92]	; (8006988 <xPortStartScheduler+0x138>)
 800692c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006930:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006932:	4b15      	ldr	r3, [pc, #84]	; (8006988 <xPortStartScheduler+0x138>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a14      	ldr	r2, [pc, #80]	; (8006988 <xPortStartScheduler+0x138>)
 8006938:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800693c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800693e:	f000 f8dd 	bl	8006afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006942:	4b12      	ldr	r3, [pc, #72]	; (800698c <xPortStartScheduler+0x13c>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006948:	f000 f8fc 	bl	8006b44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800694c:	4b10      	ldr	r3, [pc, #64]	; (8006990 <xPortStartScheduler+0x140>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a0f      	ldr	r2, [pc, #60]	; (8006990 <xPortStartScheduler+0x140>)
 8006952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006956:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006958:	f7ff ff66 	bl	8006828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800695c:	f7ff f866 	bl	8005a2c <vTaskSwitchContext>
	prvTaskExitError();
 8006960:	f7ff ff22 	bl	80067a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	e000ed00 	.word	0xe000ed00
 8006974:	410fc271 	.word	0x410fc271
 8006978:	410fc270 	.word	0x410fc270
 800697c:	e000e400 	.word	0xe000e400
 8006980:	2000023c 	.word	0x2000023c
 8006984:	20000240 	.word	0x20000240
 8006988:	e000ed20 	.word	0xe000ed20
 800698c:	20000008 	.word	0x20000008
 8006990:	e000ef34 	.word	0xe000ef34

08006994 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	607b      	str	r3, [r7, #4]
}
 80069ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069ae:	4b0f      	ldr	r3, [pc, #60]	; (80069ec <vPortEnterCritical+0x58>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	4a0d      	ldr	r2, [pc, #52]	; (80069ec <vPortEnterCritical+0x58>)
 80069b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069b8:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <vPortEnterCritical+0x58>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d10f      	bne.n	80069e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069c0:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <vPortEnterCritical+0x5c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	603b      	str	r3, [r7, #0]
}
 80069dc:	bf00      	nop
 80069de:	e7fe      	b.n	80069de <vPortEnterCritical+0x4a>
	}
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	20000008 	.word	0x20000008
 80069f0:	e000ed04 	.word	0xe000ed04

080069f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069fa:	4b12      	ldr	r3, [pc, #72]	; (8006a44 <vPortExitCritical+0x50>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <vPortExitCritical+0x24>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	607b      	str	r3, [r7, #4]
}
 8006a14:	bf00      	nop
 8006a16:	e7fe      	b.n	8006a16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a18:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <vPortExitCritical+0x50>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	4a09      	ldr	r2, [pc, #36]	; (8006a44 <vPortExitCritical+0x50>)
 8006a20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a22:	4b08      	ldr	r3, [pc, #32]	; (8006a44 <vPortExitCritical+0x50>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d105      	bne.n	8006a36 <vPortExitCritical+0x42>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	f383 8811 	msr	BASEPRI, r3
}
 8006a34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	20000008 	.word	0x20000008
	...

08006a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a50:	f3ef 8009 	mrs	r0, PSP
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	4b15      	ldr	r3, [pc, #84]	; (8006ab0 <pxCurrentTCBConst>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	f01e 0f10 	tst.w	lr, #16
 8006a60:	bf08      	it	eq
 8006a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6a:	6010      	str	r0, [r2, #0]
 8006a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a74:	f380 8811 	msr	BASEPRI, r0
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f7fe ffd4 	bl	8005a2c <vTaskSwitchContext>
 8006a84:	f04f 0000 	mov.w	r0, #0
 8006a88:	f380 8811 	msr	BASEPRI, r0
 8006a8c:	bc09      	pop	{r0, r3}
 8006a8e:	6819      	ldr	r1, [r3, #0]
 8006a90:	6808      	ldr	r0, [r1, #0]
 8006a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a96:	f01e 0f10 	tst.w	lr, #16
 8006a9a:	bf08      	it	eq
 8006a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006aa0:	f380 8809 	msr	PSP, r0
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	f3af 8000 	nop.w

08006ab0 <pxCurrentTCBConst>:
 8006ab0:	20000108 	.word	0x20000108
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop

08006ab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	607b      	str	r3, [r7, #4]
}
 8006ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ad2:	f7fe fef3 	bl	80058bc <xTaskIncrementTick>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <SysTick_Handler+0x40>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	f383 8811 	msr	BASEPRI, r3
}
 8006aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006af0:	bf00      	nop
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	e000ed04 	.word	0xe000ed04

08006afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b00:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <vPortSetupTimerInterrupt+0x34>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b06:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <vPortSetupTimerInterrupt+0x38>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <vPortSetupTimerInterrupt+0x3c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <vPortSetupTimerInterrupt+0x40>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	099b      	lsrs	r3, r3, #6
 8006b18:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <vPortSetupTimerInterrupt+0x44>)
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b1e:	4b04      	ldr	r3, [pc, #16]	; (8006b30 <vPortSetupTimerInterrupt+0x34>)
 8006b20:	2207      	movs	r2, #7
 8006b22:	601a      	str	r2, [r3, #0]
}
 8006b24:	bf00      	nop
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	e000e010 	.word	0xe000e010
 8006b34:	e000e018 	.word	0xe000e018
 8006b38:	20000084 	.word	0x20000084
 8006b3c:	10624dd3 	.word	0x10624dd3
 8006b40:	e000e014 	.word	0xe000e014

08006b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b54 <vPortEnableVFP+0x10>
 8006b48:	6801      	ldr	r1, [r0, #0]
 8006b4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b4e:	6001      	str	r1, [r0, #0]
 8006b50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b52:	bf00      	nop
 8006b54:	e000ed88 	.word	0xe000ed88

08006b58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b5e:	f3ef 8305 	mrs	r3, IPSR
 8006b62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b0f      	cmp	r3, #15
 8006b68:	d914      	bls.n	8006b94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b6a:	4a17      	ldr	r2, [pc, #92]	; (8006bc8 <vPortValidateInterruptPriority+0x70>)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b74:	4b15      	ldr	r3, [pc, #84]	; (8006bcc <vPortValidateInterruptPriority+0x74>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	7afa      	ldrb	r2, [r7, #11]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d20a      	bcs.n	8006b94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	607b      	str	r3, [r7, #4]
}
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b94:	4b0e      	ldr	r3, [pc, #56]	; (8006bd0 <vPortValidateInterruptPriority+0x78>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b9c:	4b0d      	ldr	r3, [pc, #52]	; (8006bd4 <vPortValidateInterruptPriority+0x7c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d90a      	bls.n	8006bba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	603b      	str	r3, [r7, #0]
}
 8006bb6:	bf00      	nop
 8006bb8:	e7fe      	b.n	8006bb8 <vPortValidateInterruptPriority+0x60>
	}
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	e000e3f0 	.word	0xe000e3f0
 8006bcc:	2000023c 	.word	0x2000023c
 8006bd0:	e000ed0c 	.word	0xe000ed0c
 8006bd4:	20000240 	.word	0x20000240

08006bd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08a      	sub	sp, #40	; 0x28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006be4:	f7fe fd30 	bl	8005648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006be8:	4b58      	ldr	r3, [pc, #352]	; (8006d4c <pvPortMalloc+0x174>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bf0:	f000 f910 	bl	8006e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bf4:	4b56      	ldr	r3, [pc, #344]	; (8006d50 <pvPortMalloc+0x178>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f040 808e 	bne.w	8006d1e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01d      	beq.n	8006c44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c08:	2208      	movs	r2, #8
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d014      	beq.n	8006c44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f023 0307 	bic.w	r3, r3, #7
 8006c20:	3308      	adds	r3, #8
 8006c22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <pvPortMalloc+0x6c>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	617b      	str	r3, [r7, #20]
}
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d069      	beq.n	8006d1e <pvPortMalloc+0x146>
 8006c4a:	4b42      	ldr	r3, [pc, #264]	; (8006d54 <pvPortMalloc+0x17c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d864      	bhi.n	8006d1e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c54:	4b40      	ldr	r3, [pc, #256]	; (8006d58 <pvPortMalloc+0x180>)
 8006c56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c58:	4b3f      	ldr	r3, [pc, #252]	; (8006d58 <pvPortMalloc+0x180>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c5e:	e004      	b.n	8006c6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d903      	bls.n	8006c7c <pvPortMalloc+0xa4>
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1f1      	bne.n	8006c60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c7c:	4b33      	ldr	r3, [pc, #204]	; (8006d4c <pvPortMalloc+0x174>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d04b      	beq.n	8006d1e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2208      	movs	r2, #8
 8006c8c:	4413      	add	r3, r2
 8006c8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	1ad2      	subs	r2, r2, r3
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d91f      	bls.n	8006ce8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4413      	add	r3, r2
 8006cae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <pvPortMalloc+0xf8>
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	613b      	str	r3, [r7, #16]
}
 8006ccc:	bf00      	nop
 8006cce:	e7fe      	b.n	8006cce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	1ad2      	subs	r2, r2, r3
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ce2:	69b8      	ldr	r0, [r7, #24]
 8006ce4:	f000 f8f8 	bl	8006ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ce8:	4b1a      	ldr	r3, [pc, #104]	; (8006d54 <pvPortMalloc+0x17c>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	4a18      	ldr	r2, [pc, #96]	; (8006d54 <pvPortMalloc+0x17c>)
 8006cf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cf6:	4b17      	ldr	r3, [pc, #92]	; (8006d54 <pvPortMalloc+0x17c>)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4b18      	ldr	r3, [pc, #96]	; (8006d5c <pvPortMalloc+0x184>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d203      	bcs.n	8006d0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d02:	4b14      	ldr	r3, [pc, #80]	; (8006d54 <pvPortMalloc+0x17c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a15      	ldr	r2, [pc, #84]	; (8006d5c <pvPortMalloc+0x184>)
 8006d08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	4b10      	ldr	r3, [pc, #64]	; (8006d50 <pvPortMalloc+0x178>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	431a      	orrs	r2, r3
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d1e:	f7fe fca1 	bl	8005664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00a      	beq.n	8006d42 <pvPortMalloc+0x16a>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	60fb      	str	r3, [r7, #12]
}
 8006d3e:	bf00      	nop
 8006d40:	e7fe      	b.n	8006d40 <pvPortMalloc+0x168>
	return pvReturn;
 8006d42:	69fb      	ldr	r3, [r7, #28]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3728      	adds	r7, #40	; 0x28
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	20003e4c 	.word	0x20003e4c
 8006d50:	20003e58 	.word	0x20003e58
 8006d54:	20003e50 	.word	0x20003e50
 8006d58:	20003e44 	.word	0x20003e44
 8006d5c:	20003e54 	.word	0x20003e54

08006d60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d048      	beq.n	8006e04 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d72:	2308      	movs	r3, #8
 8006d74:	425b      	negs	r3, r3
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	4413      	add	r3, r2
 8006d7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	4b21      	ldr	r3, [pc, #132]	; (8006e0c <vPortFree+0xac>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4013      	ands	r3, r2
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10a      	bne.n	8006da4 <vPortFree+0x44>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	60fb      	str	r3, [r7, #12]
}
 8006da0:	bf00      	nop
 8006da2:	e7fe      	b.n	8006da2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00a      	beq.n	8006dc2 <vPortFree+0x62>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	60bb      	str	r3, [r7, #8]
}
 8006dbe:	bf00      	nop
 8006dc0:	e7fe      	b.n	8006dc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	4b11      	ldr	r3, [pc, #68]	; (8006e0c <vPortFree+0xac>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d019      	beq.n	8006e04 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d115      	bne.n	8006e04 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <vPortFree+0xac>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	43db      	mvns	r3, r3
 8006de2:	401a      	ands	r2, r3
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006de8:	f7fe fc2e 	bl	8005648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <vPortFree+0xb0>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4413      	add	r3, r2
 8006df6:	4a06      	ldr	r2, [pc, #24]	; (8006e10 <vPortFree+0xb0>)
 8006df8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dfa:	6938      	ldr	r0, [r7, #16]
 8006dfc:	f000 f86c 	bl	8006ed8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e00:	f7fe fc30 	bl	8005664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e04:	bf00      	nop
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20003e58 	.word	0x20003e58
 8006e10:	20003e50 	.word	0x20003e50

08006e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e20:	4b27      	ldr	r3, [pc, #156]	; (8006ec0 <prvHeapInit+0xac>)
 8006e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00c      	beq.n	8006e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3307      	adds	r3, #7
 8006e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0307 	bic.w	r3, r3, #7
 8006e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	4a1f      	ldr	r2, [pc, #124]	; (8006ec0 <prvHeapInit+0xac>)
 8006e44:	4413      	add	r3, r2
 8006e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <prvHeapInit+0xb0>)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e52:	4b1c      	ldr	r3, [pc, #112]	; (8006ec4 <prvHeapInit+0xb0>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e60:	2208      	movs	r2, #8
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	1a9b      	subs	r3, r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0307 	bic.w	r3, r3, #7
 8006e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e76:	4b14      	ldr	r3, [pc, #80]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e7e:	4b12      	ldr	r3, [pc, #72]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2200      	movs	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	1ad2      	subs	r2, r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e94:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	4a0a      	ldr	r2, [pc, #40]	; (8006ecc <prvHeapInit+0xb8>)
 8006ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	4a09      	ldr	r2, [pc, #36]	; (8006ed0 <prvHeapInit+0xbc>)
 8006eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006eac:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <prvHeapInit+0xc0>)
 8006eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006eb2:	601a      	str	r2, [r3, #0]
}
 8006eb4:	bf00      	nop
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	20000244 	.word	0x20000244
 8006ec4:	20003e44 	.word	0x20003e44
 8006ec8:	20003e4c 	.word	0x20003e4c
 8006ecc:	20003e54 	.word	0x20003e54
 8006ed0:	20003e50 	.word	0x20003e50
 8006ed4:	20003e58 	.word	0x20003e58

08006ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ee0:	4b28      	ldr	r3, [pc, #160]	; (8006f84 <prvInsertBlockIntoFreeList+0xac>)
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	e002      	b.n	8006eec <prvInsertBlockIntoFreeList+0x14>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d8f7      	bhi.n	8006ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	4413      	add	r3, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d108      	bne.n	8006f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	441a      	add	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	441a      	add	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d118      	bne.n	8006f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <prvInsertBlockIntoFreeList+0xb0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d00d      	beq.n	8006f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	441a      	add	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	e008      	b.n	8006f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f56:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <prvInsertBlockIntoFreeList+0xb0>)
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	e003      	b.n	8006f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d002      	beq.n	8006f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f76:	bf00      	nop
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20003e44 	.word	0x20003e44
 8006f88:	20003e4c 	.word	0x20003e4c

08006f8c <configureTimerForRunTimeStats>:
uint32_t tim4_ov_counter=0;
extern TIM_HandleTypeDef htim4;

/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0

}
 8006f90:	bf00      	nop
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
	return ((tim4_ov_counter << 16) + (uint32_t)__HAL_TIM_GET_COUNTER(&htim4));
 8006fa0:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <getRunTimeCounterValue+0x1c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	041a      	lsls	r2, r3, #16
 8006fa6:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <getRunTimeCounterValue+0x20>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fac:	4413      	add	r3, r2
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	20003e5c 	.word	0x20003e5c
 8006fbc:	20004134 	.word	0x20004134

08006fc0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4a07      	ldr	r2, [pc, #28]	; (8006fec <vApplicationGetIdleTaskMemory+0x2c>)
 8006fd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	4a06      	ldr	r2, [pc, #24]	; (8006ff0 <vApplicationGetIdleTaskMemory+0x30>)
 8006fd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2280      	movs	r2, #128	; 0x80
 8006fdc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8006fde:	bf00      	nop
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	20003e60 	.word	0x20003e60
 8006ff0:	20003ec0 	.word	0x20003ec0

08006ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006ff4:	b5b0      	push	{r4, r5, r7, lr}
 8006ff6:	b0a0      	sub	sp, #128	; 0x80
 8006ff8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006ffa:	f7f9 fadd 	bl	80005b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006ffe:	f000 f889 	bl	8007114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007002:	f000 fa27 	bl	8007454 <MX_GPIO_Init>
  MX_DMA_Init();
 8007006:	f000 f9e7 	bl	80073d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800700a:	f000 f9bb 	bl	8007384 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800700e:	f000 f8ef 	bl	80071f0 <MX_ADC1_Init>
  MX_TIM4_Init();
 8007012:	f000 f941 	bl	8007298 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)buf, buf_len);
 8007016:	2301      	movs	r3, #1
 8007018:	461a      	mov	r2, r3
 800701a:	4931      	ldr	r1, [pc, #196]	; (80070e0 <main+0xec>)
 800701c:	4831      	ldr	r0, [pc, #196]	; (80070e4 <main+0xf0>)
 800701e:	f7fc f9ec 	bl	80033fa <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim4);
 8007022:	4831      	ldr	r0, [pc, #196]	; (80070e8 <main+0xf4>)
 8007024:	f7fb fb75 	bl	8002712 <HAL_TIM_Base_Start_IT>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of uartTxQueue */
  osMessageQDef(uartTxQueue, 10, uint8_t *);
 8007028:	4b30      	ldr	r3, [pc, #192]	; (80070ec <main+0xf8>)
 800702a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800702e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007030:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uartTxQueueHandle = osMessageCreate(osMessageQ(uartTxQueue), NULL);
 8007034:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007038:	2100      	movs	r1, #0
 800703a:	4618      	mov	r0, r3
 800703c:	f7fd f985 	bl	800434a <osMessageCreate>
 8007040:	4603      	mov	r3, r0
 8007042:	4a2b      	ldr	r2, [pc, #172]	; (80070f0 <main+0xfc>)
 8007044:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8007046:	4b2b      	ldr	r3, [pc, #172]	; (80070f4 <main+0x100>)
 8007048:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800704c:	461d      	mov	r5, r3
 800704e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007052:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007056:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800705a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800705e:	2100      	movs	r1, #0
 8007060:	4618      	mov	r0, r3
 8007062:	f7fd f912 	bl	800428a <osThreadCreate>
 8007066:	4603      	mov	r3, r0
 8007068:	4a23      	ldr	r2, [pc, #140]	; (80070f8 <main+0x104>)
 800706a:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartTxTask */
  osThreadDef(uartTxTask, StartUartTxTask, osPriorityNormal, 0, 128);
 800706c:	4b23      	ldr	r3, [pc, #140]	; (80070fc <main+0x108>)
 800706e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8007072:	461d      	mov	r5, r3
 8007074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007078:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800707c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTxTaskHandle = osThreadCreate(osThread(uartTxTask), NULL);
 8007080:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007084:	2100      	movs	r1, #0
 8007086:	4618      	mov	r0, r3
 8007088:	f7fd f8ff 	bl	800428a <osThreadCreate>
 800708c:	4603      	mov	r3, r0
 800708e:	4a1c      	ldr	r2, [pc, #112]	; (8007100 <main+0x10c>)
 8007090:	6013      	str	r3, [r2, #0]

  /* definition and creation of statsTask */
  osThreadDef(statsTask, StartStatsTask, osPriorityIdle, 0, 260);
 8007092:	4b1c      	ldr	r3, [pc, #112]	; (8007104 <main+0x110>)
 8007094:	f107 041c 	add.w	r4, r7, #28
 8007098:	461d      	mov	r5, r3
 800709a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800709c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800709e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80070a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  statsTaskHandle = osThreadCreate(osThread(statsTask), NULL);
 80070a6:	f107 031c 	add.w	r3, r7, #28
 80070aa:	2100      	movs	r1, #0
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fd f8ec 	bl	800428a <osThreadCreate>
 80070b2:	4603      	mov	r3, r0
 80070b4:	4a14      	ldr	r2, [pc, #80]	; (8007108 <main+0x114>)
 80070b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of ADCTask */
  osThreadDef(ADCTask, StartADCTask, osPriorityNormal, 0, 128);
 80070b8:	4b14      	ldr	r3, [pc, #80]	; (800710c <main+0x118>)
 80070ba:	463c      	mov	r4, r7
 80070bc:	461d      	mov	r5, r3
 80070be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80070c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADCTaskHandle = osThreadCreate(osThread(ADCTask), NULL);
 80070ca:	463b      	mov	r3, r7
 80070cc:	2100      	movs	r1, #0
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fd f8db 	bl	800428a <osThreadCreate>
 80070d4:	4603      	mov	r3, r0
 80070d6:	4a0e      	ldr	r2, [pc, #56]	; (8007110 <main+0x11c>)
 80070d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80070da:	f7fd f8cf 	bl	800427c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80070de:	e7fe      	b.n	80070de <main+0xea>
 80070e0:	20004288 	.word	0x20004288
 80070e4:	2000428c 	.word	0x2000428c
 80070e8:	20004134 	.word	0x20004134
 80070ec:	08008750 	.word	0x08008750
 80070f0:	20004280 	.word	0x20004280
 80070f4:	08008760 	.word	0x08008760
 80070f8:	200040d0 	.word	0x200040d0
 80070fc:	0800877c 	.word	0x0800877c
 8007100:	200042cc 	.word	0x200042cc
 8007104:	08008798 	.word	0x08008798
 8007108:	20004284 	.word	0x20004284
 800710c:	080087b4 	.word	0x080087b4
 8007110:	2000421c 	.word	0x2000421c

08007114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b094      	sub	sp, #80	; 0x50
 8007118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800711a:	f107 031c 	add.w	r3, r7, #28
 800711e:	2234      	movs	r2, #52	; 0x34
 8007120:	2100      	movs	r1, #0
 8007122:	4618      	mov	r0, r3
 8007124:	f000 feaa 	bl	8007e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007128:	f107 0308 	add.w	r3, r7, #8
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	605a      	str	r2, [r3, #4]
 8007132:	609a      	str	r2, [r3, #8]
 8007134:	60da      	str	r2, [r3, #12]
 8007136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007138:	2300      	movs	r3, #0
 800713a:	607b      	str	r3, [r7, #4]
 800713c:	4b2a      	ldr	r3, [pc, #168]	; (80071e8 <SystemClock_Config+0xd4>)
 800713e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007140:	4a29      	ldr	r2, [pc, #164]	; (80071e8 <SystemClock_Config+0xd4>)
 8007142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007146:	6413      	str	r3, [r2, #64]	; 0x40
 8007148:	4b27      	ldr	r3, [pc, #156]	; (80071e8 <SystemClock_Config+0xd4>)
 800714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007150:	607b      	str	r3, [r7, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8007154:	2300      	movs	r3, #0
 8007156:	603b      	str	r3, [r7, #0]
 8007158:	4b24      	ldr	r3, [pc, #144]	; (80071ec <SystemClock_Config+0xd8>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007160:	4a22      	ldr	r2, [pc, #136]	; (80071ec <SystemClock_Config+0xd8>)
 8007162:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	4b20      	ldr	r3, [pc, #128]	; (80071ec <SystemClock_Config+0xd8>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007170:	603b      	str	r3, [r7, #0]
 8007172:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007174:	2302      	movs	r3, #2
 8007176:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007178:	2301      	movs	r3, #1
 800717a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800717c:	2310      	movs	r3, #16
 800717e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007180:	2302      	movs	r3, #2
 8007182:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007184:	2300      	movs	r3, #0
 8007186:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8007188:	2310      	movs	r3, #16
 800718a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800718c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8007190:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8007192:	2304      	movs	r3, #4
 8007194:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8007196:	2302      	movs	r3, #2
 8007198:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800719a:	2302      	movs	r3, #2
 800719c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800719e:	f107 031c 	add.w	r3, r7, #28
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fb f830 	bl	8002208 <HAL_RCC_OscConfig>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80071ae:	f000 fb3f 	bl	8007830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80071b2:	230f      	movs	r3, #15
 80071b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80071b6:	2302      	movs	r3, #2
 80071b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80071ba:	2300      	movs	r3, #0
 80071bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80071be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80071c4:	2300      	movs	r3, #0
 80071c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80071c8:	f107 0308 	add.w	r3, r7, #8
 80071cc:	2102      	movs	r1, #2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fa fd1c 	bl	8001c0c <HAL_RCC_ClockConfig>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80071da:	f000 fb29 	bl	8007830 <Error_Handler>
  }
}
 80071de:	bf00      	nop
 80071e0:	3750      	adds	r7, #80	; 0x50
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	40023800 	.word	0x40023800
 80071ec:	40007000 	.word	0x40007000

080071f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80071f6:	463b      	mov	r3, r7
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	605a      	str	r2, [r3, #4]
 80071fe:	609a      	str	r2, [r3, #8]
 8007200:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8007202:	4b21      	ldr	r3, [pc, #132]	; (8007288 <MX_ADC1_Init+0x98>)
 8007204:	4a21      	ldr	r2, [pc, #132]	; (800728c <MX_ADC1_Init+0x9c>)
 8007206:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8007208:	4b1f      	ldr	r3, [pc, #124]	; (8007288 <MX_ADC1_Init+0x98>)
 800720a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800720e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007210:	4b1d      	ldr	r3, [pc, #116]	; (8007288 <MX_ADC1_Init+0x98>)
 8007212:	2200      	movs	r2, #0
 8007214:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007216:	4b1c      	ldr	r3, [pc, #112]	; (8007288 <MX_ADC1_Init+0x98>)
 8007218:	2200      	movs	r2, #0
 800721a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800721c:	4b1a      	ldr	r3, [pc, #104]	; (8007288 <MX_ADC1_Init+0x98>)
 800721e:	2201      	movs	r2, #1
 8007220:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007222:	4b19      	ldr	r3, [pc, #100]	; (8007288 <MX_ADC1_Init+0x98>)
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800722a:	4b17      	ldr	r3, [pc, #92]	; (8007288 <MX_ADC1_Init+0x98>)
 800722c:	2200      	movs	r2, #0
 800722e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007230:	4b15      	ldr	r3, [pc, #84]	; (8007288 <MX_ADC1_Init+0x98>)
 8007232:	4a17      	ldr	r2, [pc, #92]	; (8007290 <MX_ADC1_Init+0xa0>)
 8007234:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007236:	4b14      	ldr	r3, [pc, #80]	; (8007288 <MX_ADC1_Init+0x98>)
 8007238:	2200      	movs	r2, #0
 800723a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800723c:	4b12      	ldr	r3, [pc, #72]	; (8007288 <MX_ADC1_Init+0x98>)
 800723e:	2201      	movs	r2, #1
 8007240:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007242:	4b11      	ldr	r3, [pc, #68]	; (8007288 <MX_ADC1_Init+0x98>)
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800724a:	4b0f      	ldr	r3, [pc, #60]	; (8007288 <MX_ADC1_Init+0x98>)
 800724c:	2201      	movs	r2, #1
 800724e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007250:	480d      	ldr	r0, [pc, #52]	; (8007288 <MX_ADC1_Init+0x98>)
 8007252:	f7f9 f9f3 	bl	800063c <HAL_ADC_Init>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800725c:	f000 fae8 	bl	8007830 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8007260:	4b0c      	ldr	r3, [pc, #48]	; (8007294 <MX_ADC1_Init+0xa4>)
 8007262:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007264:	2301      	movs	r3, #1
 8007266:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007268:	2300      	movs	r3, #0
 800726a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800726c:	463b      	mov	r3, r7
 800726e:	4619      	mov	r1, r3
 8007270:	4805      	ldr	r0, [pc, #20]	; (8007288 <MX_ADC1_Init+0x98>)
 8007272:	f7f9 fc59 	bl	8000b28 <HAL_ADC_ConfigChannel>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800727c:	f000 fad8 	bl	8007830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007280:	bf00      	nop
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	20004174 	.word	0x20004174
 800728c:	40012000 	.word	0x40012000
 8007290:	0f000001 	.word	0x0f000001
 8007294:	10000012 	.word	0x10000012

08007298 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08e      	sub	sp, #56	; 0x38
 800729c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800729e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	605a      	str	r2, [r3, #4]
 80072a8:	609a      	str	r2, [r3, #8]
 80072aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80072ac:	f107 0320 	add.w	r3, r7, #32
 80072b0:	2200      	movs	r2, #0
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80072b6:	1d3b      	adds	r3, r7, #4
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	605a      	str	r2, [r3, #4]
 80072be:	609a      	str	r2, [r3, #8]
 80072c0:	60da      	str	r2, [r3, #12]
 80072c2:	611a      	str	r2, [r3, #16]
 80072c4:	615a      	str	r2, [r3, #20]
 80072c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80072c8:	4b2c      	ldr	r3, [pc, #176]	; (800737c <MX_TIM4_Init+0xe4>)
 80072ca:	4a2d      	ldr	r2, [pc, #180]	; (8007380 <MX_TIM4_Init+0xe8>)
 80072cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80072ce:	4b2b      	ldr	r3, [pc, #172]	; (800737c <MX_TIM4_Init+0xe4>)
 80072d0:	2253      	movs	r2, #83	; 0x53
 80072d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072d4:	4b29      	ldr	r3, [pc, #164]	; (800737c <MX_TIM4_Init+0xe4>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80072da:	4b28      	ldr	r3, [pc, #160]	; (800737c <MX_TIM4_Init+0xe4>)
 80072dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80072e2:	4b26      	ldr	r3, [pc, #152]	; (800737c <MX_TIM4_Init+0xe4>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80072e8:	4b24      	ldr	r3, [pc, #144]	; (800737c <MX_TIM4_Init+0xe4>)
 80072ea:	2280      	movs	r2, #128	; 0x80
 80072ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80072ee:	4823      	ldr	r0, [pc, #140]	; (800737c <MX_TIM4_Init+0xe4>)
 80072f0:	f7fb f9e4 	bl	80026bc <HAL_TIM_Base_Init>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80072fa:	f000 fa99 	bl	8007830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80072fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007302:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007304:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007308:	4619      	mov	r1, r3
 800730a:	481c      	ldr	r0, [pc, #112]	; (800737c <MX_TIM4_Init+0xe4>)
 800730c:	f7fb fbc2 	bl	8002a94 <HAL_TIM_ConfigClockSource>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8007316:	f000 fa8b 	bl	8007830 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800731a:	4818      	ldr	r0, [pc, #96]	; (800737c <MX_TIM4_Init+0xe4>)
 800731c:	f7fb fa1d 	bl	800275a <HAL_TIM_OC_Init>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8007326:	f000 fa83 	bl	8007830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800732a:	2300      	movs	r3, #0
 800732c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800732e:	2300      	movs	r3, #0
 8007330:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007332:	f107 0320 	add.w	r3, r7, #32
 8007336:	4619      	mov	r1, r3
 8007338:	4810      	ldr	r0, [pc, #64]	; (800737c <MX_TIM4_Init+0xe4>)
 800733a:	f7fb ff81 	bl	8003240 <HAL_TIMEx_MasterConfigSynchronization>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8007344:	f000 fa74 	bl	8007830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8007348:	2330      	movs	r3, #48	; 0x30
 800734a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 800734c:	230a      	movs	r3, #10
 800734e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007350:	2300      	movs	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007358:	1d3b      	adds	r3, r7, #4
 800735a:	2200      	movs	r2, #0
 800735c:	4619      	mov	r1, r3
 800735e:	4807      	ldr	r0, [pc, #28]	; (800737c <MX_TIM4_Init+0xe4>)
 8007360:	f7fb fb38 	bl	80029d4 <HAL_TIM_OC_ConfigChannel>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800736a:	f000 fa61 	bl	8007830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800736e:	4803      	ldr	r0, [pc, #12]	; (800737c <MX_TIM4_Init+0xe4>)
 8007370:	f000 fb28 	bl	80079c4 <HAL_TIM_MspPostInit>

}
 8007374:	bf00      	nop
 8007376:	3738      	adds	r7, #56	; 0x38
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20004134 	.word	0x20004134
 8007380:	40000800 	.word	0x40000800

08007384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007388:	4b11      	ldr	r3, [pc, #68]	; (80073d0 <MX_USART2_UART_Init+0x4c>)
 800738a:	4a12      	ldr	r2, [pc, #72]	; (80073d4 <MX_USART2_UART_Init+0x50>)
 800738c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800738e:	4b10      	ldr	r3, [pc, #64]	; (80073d0 <MX_USART2_UART_Init+0x4c>)
 8007390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007396:	4b0e      	ldr	r3, [pc, #56]	; (80073d0 <MX_USART2_UART_Init+0x4c>)
 8007398:	2200      	movs	r2, #0
 800739a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800739c:	4b0c      	ldr	r3, [pc, #48]	; (80073d0 <MX_USART2_UART_Init+0x4c>)
 800739e:	2200      	movs	r2, #0
 80073a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80073a2:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <MX_USART2_UART_Init+0x4c>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80073a8:	4b09      	ldr	r3, [pc, #36]	; (80073d0 <MX_USART2_UART_Init+0x4c>)
 80073aa:	220c      	movs	r2, #12
 80073ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80073ae:	4b08      	ldr	r3, [pc, #32]	; (80073d0 <MX_USART2_UART_Init+0x4c>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80073b4:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <MX_USART2_UART_Init+0x4c>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80073ba:	4805      	ldr	r0, [pc, #20]	; (80073d0 <MX_USART2_UART_Init+0x4c>)
 80073bc:	f7fb ffd0 	bl	8003360 <HAL_UART_Init>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80073c6:	f000 fa33 	bl	8007830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80073ca:	bf00      	nop
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	2000428c 	.word	0x2000428c
 80073d4:	40004400 	.word	0x40004400

080073d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80073de:	2300      	movs	r3, #0
 80073e0:	607b      	str	r3, [r7, #4]
 80073e2:	4b1b      	ldr	r3, [pc, #108]	; (8007450 <MX_DMA_Init+0x78>)
 80073e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e6:	4a1a      	ldr	r2, [pc, #104]	; (8007450 <MX_DMA_Init+0x78>)
 80073e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073ec:	6313      	str	r3, [r2, #48]	; 0x30
 80073ee:	4b18      	ldr	r3, [pc, #96]	; (8007450 <MX_DMA_Init+0x78>)
 80073f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073f6:	607b      	str	r3, [r7, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80073fa:	2300      	movs	r3, #0
 80073fc:	603b      	str	r3, [r7, #0]
 80073fe:	4b14      	ldr	r3, [pc, #80]	; (8007450 <MX_DMA_Init+0x78>)
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	4a13      	ldr	r2, [pc, #76]	; (8007450 <MX_DMA_Init+0x78>)
 8007404:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007408:	6313      	str	r3, [r2, #48]	; 0x30
 800740a:	4b11      	ldr	r3, [pc, #68]	; (8007450 <MX_DMA_Init+0x78>)
 800740c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007412:	603b      	str	r3, [r7, #0]
 8007414:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8007416:	2200      	movs	r2, #0
 8007418:	2105      	movs	r1, #5
 800741a:	2010      	movs	r0, #16
 800741c:	f7f9 fe74 	bl	8001108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8007420:	2010      	movs	r0, #16
 8007422:	f7f9 fe8d 	bl	8001140 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8007426:	2200      	movs	r2, #0
 8007428:	2105      	movs	r1, #5
 800742a:	2011      	movs	r0, #17
 800742c:	f7f9 fe6c 	bl	8001108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8007430:	2011      	movs	r0, #17
 8007432:	f7f9 fe85 	bl	8001140 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8007436:	2200      	movs	r2, #0
 8007438:	2105      	movs	r1, #5
 800743a:	203c      	movs	r0, #60	; 0x3c
 800743c:	f7f9 fe64 	bl	8001108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8007440:	203c      	movs	r0, #60	; 0x3c
 8007442:	f7f9 fe7d 	bl	8001140 <HAL_NVIC_EnableIRQ>

}
 8007446:	bf00      	nop
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	40023800 	.word	0x40023800

08007454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08a      	sub	sp, #40	; 0x28
 8007458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800745a:	f107 0314 	add.w	r3, r7, #20
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	605a      	str	r2, [r3, #4]
 8007464:	609a      	str	r2, [r3, #8]
 8007466:	60da      	str	r2, [r3, #12]
 8007468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800746a:	2300      	movs	r3, #0
 800746c:	613b      	str	r3, [r7, #16]
 800746e:	4b3b      	ldr	r3, [pc, #236]	; (800755c <MX_GPIO_Init+0x108>)
 8007470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007472:	4a3a      	ldr	r2, [pc, #232]	; (800755c <MX_GPIO_Init+0x108>)
 8007474:	f043 0304 	orr.w	r3, r3, #4
 8007478:	6313      	str	r3, [r2, #48]	; 0x30
 800747a:	4b38      	ldr	r3, [pc, #224]	; (800755c <MX_GPIO_Init+0x108>)
 800747c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747e:	f003 0304 	and.w	r3, r3, #4
 8007482:	613b      	str	r3, [r7, #16]
 8007484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007486:	2300      	movs	r3, #0
 8007488:	60fb      	str	r3, [r7, #12]
 800748a:	4b34      	ldr	r3, [pc, #208]	; (800755c <MX_GPIO_Init+0x108>)
 800748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748e:	4a33      	ldr	r2, [pc, #204]	; (800755c <MX_GPIO_Init+0x108>)
 8007490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007494:	6313      	str	r3, [r2, #48]	; 0x30
 8007496:	4b31      	ldr	r3, [pc, #196]	; (800755c <MX_GPIO_Init+0x108>)
 8007498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074a2:	2300      	movs	r3, #0
 80074a4:	60bb      	str	r3, [r7, #8]
 80074a6:	4b2d      	ldr	r3, [pc, #180]	; (800755c <MX_GPIO_Init+0x108>)
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074aa:	4a2c      	ldr	r2, [pc, #176]	; (800755c <MX_GPIO_Init+0x108>)
 80074ac:	f043 0301 	orr.w	r3, r3, #1
 80074b0:	6313      	str	r3, [r2, #48]	; 0x30
 80074b2:	4b2a      	ldr	r3, [pc, #168]	; (800755c <MX_GPIO_Init+0x108>)
 80074b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	60bb      	str	r3, [r7, #8]
 80074bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074be:	2300      	movs	r3, #0
 80074c0:	607b      	str	r3, [r7, #4]
 80074c2:	4b26      	ldr	r3, [pc, #152]	; (800755c <MX_GPIO_Init+0x108>)
 80074c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c6:	4a25      	ldr	r2, [pc, #148]	; (800755c <MX_GPIO_Init+0x108>)
 80074c8:	f043 0302 	orr.w	r3, r3, #2
 80074cc:	6313      	str	r3, [r2, #48]	; 0x30
 80074ce:	4b23      	ldr	r3, [pc, #140]	; (800755c <MX_GPIO_Init+0x108>)
 80074d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	607b      	str	r3, [r7, #4]
 80074d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Test_pin_Pin|Event_1_Pin|Event_2_Pin, GPIO_PIN_RESET);
 80074da:	2200      	movs	r2, #0
 80074dc:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80074e0:	481f      	ldr	r0, [pc, #124]	; (8007560 <MX_GPIO_Init+0x10c>)
 80074e2:	f7fa fb61 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80074e6:	2200      	movs	r2, #0
 80074e8:	2120      	movs	r1, #32
 80074ea:	481e      	ldr	r0, [pc, #120]	; (8007564 <MX_GPIO_Init+0x110>)
 80074ec:	f7fa fb5c 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80074f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80074f6:	4b1c      	ldr	r3, [pc, #112]	; (8007568 <MX_GPIO_Init+0x114>)
 80074f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80074fe:	f107 0314 	add.w	r3, r7, #20
 8007502:	4619      	mov	r1, r3
 8007504:	4816      	ldr	r0, [pc, #88]	; (8007560 <MX_GPIO_Init+0x10c>)
 8007506:	f7fa f9bb 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : Test_pin_Pin Event_1_Pin Event_2_Pin */
  GPIO_InitStruct.Pin = Test_pin_Pin|Event_1_Pin|Event_2_Pin;
 800750a:	f44f 73a1 	mov.w	r3, #322	; 0x142
 800750e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007510:	2301      	movs	r3, #1
 8007512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007514:	2300      	movs	r3, #0
 8007516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007518:	2300      	movs	r3, #0
 800751a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800751c:	f107 0314 	add.w	r3, r7, #20
 8007520:	4619      	mov	r1, r3
 8007522:	480f      	ldr	r0, [pc, #60]	; (8007560 <MX_GPIO_Init+0x10c>)
 8007524:	f7fa f9ac 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8007528:	2320      	movs	r3, #32
 800752a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800752c:	2301      	movs	r3, #1
 800752e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007530:	2300      	movs	r3, #0
 8007532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007534:	2300      	movs	r3, #0
 8007536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8007538:	f107 0314 	add.w	r3, r7, #20
 800753c:	4619      	mov	r1, r3
 800753e:	4809      	ldr	r0, [pc, #36]	; (8007564 <MX_GPIO_Init+0x110>)
 8007540:	f7fa f99e 	bl	8001880 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8007544:	2200      	movs	r2, #0
 8007546:	2105      	movs	r1, #5
 8007548:	2028      	movs	r0, #40	; 0x28
 800754a:	f7f9 fddd 	bl	8001108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800754e:	2028      	movs	r0, #40	; 0x28
 8007550:	f7f9 fdf6 	bl	8001140 <HAL_NVIC_EnableIRQ>

}
 8007554:	bf00      	nop
 8007556:	3728      	adds	r7, #40	; 0x28
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	40023800 	.word	0x40023800
 8007560:	40020800 	.word	0x40020800
 8007564:	40020000 	.word	0x40020000
 8007568:	10210000 	.word	0x10210000

0800756c <HAL_UART_RxCpltCallback>:
#define LED_G_PORT GPIOA
#define LED_G_PIN	GPIO_PIN_5


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
	//BaseType_t xYieldRequired;
	if ((buf[0]=='t')||(buf[0] == 'T'))
 8007574:	4b17      	ldr	r3, [pc, #92]	; (80075d4 <HAL_UART_RxCpltCallback+0x68>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b74      	cmp	r3, #116	; 0x74
 800757c:	d004      	beq.n	8007588 <HAL_UART_RxCpltCallback+0x1c>
 800757e:	4b15      	ldr	r3, [pc, #84]	; (80075d4 <HAL_UART_RxCpltCallback+0x68>)
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b54      	cmp	r3, #84	; 0x54
 8007586:	d104      	bne.n	8007592 <HAL_UART_RxCpltCallback+0x26>
	{
		// Start temperature reading from ADC
		//HAL_ADC_Start_IT(&hadc1);
		xTaskResumeFromISR( ADCTaskHandle );
 8007588:	4b13      	ldr	r3, [pc, #76]	; (80075d8 <HAL_UART_RxCpltCallback+0x6c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4618      	mov	r0, r3
 800758e:	f7fd ff87 	bl	80054a0 <xTaskResumeFromISR>

	}
	if ((buf[0]=='h')||(buf[0]=='H')||(buf[0] == '?'))
 8007592:	4b10      	ldr	r3, [pc, #64]	; (80075d4 <HAL_UART_RxCpltCallback+0x68>)
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b68      	cmp	r3, #104	; 0x68
 800759a:	d009      	beq.n	80075b0 <HAL_UART_RxCpltCallback+0x44>
 800759c:	4b0d      	ldr	r3, [pc, #52]	; (80075d4 <HAL_UART_RxCpltCallback+0x68>)
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b48      	cmp	r3, #72	; 0x48
 80075a4:	d004      	beq.n	80075b0 <HAL_UART_RxCpltCallback+0x44>
 80075a6:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <HAL_UART_RxCpltCallback+0x68>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b3f      	cmp	r3, #63	; 0x3f
 80075ae:	d106      	bne.n	80075be <HAL_UART_RxCpltCallback+0x52>
	{
		xQueueGenericSendFromISR(uartTxQueueHandle, &msg_help, 10, queueSEND_TO_BACK);
 80075b0:	4b0a      	ldr	r3, [pc, #40]	; (80075dc <HAL_UART_RxCpltCallback+0x70>)
 80075b2:	6818      	ldr	r0, [r3, #0]
 80075b4:	2300      	movs	r3, #0
 80075b6:	220a      	movs	r2, #10
 80075b8:	4909      	ldr	r1, [pc, #36]	; (80075e0 <HAL_UART_RxCpltCallback+0x74>)
 80075ba:	f7fd f9e5 	bl	8004988 <xQueueGenericSendFromISR>
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*)buf, buf_len);
 80075be:	2301      	movs	r3, #1
 80075c0:	461a      	mov	r2, r3
 80075c2:	4904      	ldr	r1, [pc, #16]	; (80075d4 <HAL_UART_RxCpltCallback+0x68>)
 80075c4:	4807      	ldr	r0, [pc, #28]	; (80075e4 <HAL_UART_RxCpltCallback+0x78>)
 80075c6:	f7fb ff18 	bl	80033fa <HAL_UART_Receive_IT>
 }
 80075ca:	bf00      	nop
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	20004288 	.word	0x20004288
 80075d8:	2000421c 	.word	0x2000421c
 80075dc:	20004280 	.word	0x20004280
 80075e0:	20000078 	.word	0x20000078
 80075e4:	2000428c 	.word	0x2000428c

080075e8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b09c      	sub	sp, #112	; 0x70
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	6078      	str	r0, [r7, #4]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
  //if (huart == huart2)
  {
	  BaseType_t xHigherPriorityTaskWoken = pdFALSE, xResult;
 80075f0:	2300      	movs	r3, #0
 80075f2:	667b      	str	r3, [r7, #100]	; 0x64
	  //	// ADC ready
	  uint32_t temp = HAL_ADC_GetValue(&hadc1);
 80075f4:	4812      	ldr	r0, [pc, #72]	; (8007640 <HAL_ADC_ConvCpltCallback+0x58>)
 80075f6:	f7f9 fa76 	bl	8000ae6 <HAL_ADC_GetValue>
 80075fa:	6638      	str	r0, [r7, #96]	; 0x60
	  uint8_t msg_buffer[80];
	  uint8_t *pTxBuff = NULL;
 80075fc:	2300      	movs	r3, #0
 80075fe:	65fb      	str	r3, [r7, #92]	; 0x5c
	  sprintf((char*)msg_buffer, "T:%d\n\r", temp);
 8007600:	f107 030c 	add.w	r3, r7, #12
 8007604:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007606:	490f      	ldr	r1, [pc, #60]	; (8007644 <HAL_ADC_ConvCpltCallback+0x5c>)
 8007608:	4618      	mov	r0, r3
 800760a:	f000 fc3f 	bl	8007e8c <siprintf>
	  pTxBuff = msg_buffer;
 800760e:	f107 030c 	add.w	r3, r7, #12
 8007612:	65fb      	str	r3, [r7, #92]	; 0x5c
	  xQueueGenericSendFromISR(uartTxQueueHandle, &pTxBuff, 10, queueSEND_TO_BACK);
 8007614:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <HAL_ADC_ConvCpltCallback+0x60>)
 8007616:	6818      	ldr	r0, [r3, #0]
 8007618:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800761c:	2300      	movs	r3, #0
 800761e:	220a      	movs	r2, #10
 8007620:	f7fd f9b2 	bl	8004988 <xQueueGenericSendFromISR>
	  //xResult = xTaskNotifyFromISR( ADCTaskHandle, temp, 0,0);
	  xTaskGenericNotifyFromISR(ADCTaskHandle, temp, eIncrement, NULL, NULL);
 8007624:	4b09      	ldr	r3, [pc, #36]	; (800764c <HAL_ADC_ConvCpltCallback+0x64>)
 8007626:	6818      	ldr	r0, [r3, #0]
 8007628:	2300      	movs	r3, #0
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	2300      	movs	r3, #0
 800762e:	2202      	movs	r2, #2
 8007630:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007632:	f7fe ff41 	bl	80064b8 <xTaskGenericNotifyFromISR>
  }
}
 8007636:	bf00      	nop
 8007638:	3768      	adds	r7, #104	; 0x68
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20004174 	.word	0x20004174
 8007644:	080087d0 	.word	0x080087d0
 8007648:	20004280 	.word	0x20004280
 800764c:	2000421c 	.word	0x2000421c

08007650 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	4603      	mov	r3, r0
 8007658:	80fb      	strh	r3, [r7, #6]
	if(LED_delay > LED_speedup ) LED_delay -= LED_speedup; else LED_delay=1000;
 800765a:	4b0f      	ldr	r3, [pc, #60]	; (8007698 <HAL_GPIO_EXTI_Callback+0x48>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	4b0e      	ldr	r3, [pc, #56]	; (800769c <HAL_GPIO_EXTI_Callback+0x4c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	429a      	cmp	r2, r3
 8007666:	d207      	bcs.n	8007678 <HAL_GPIO_EXTI_Callback+0x28>
 8007668:	4b0c      	ldr	r3, [pc, #48]	; (800769c <HAL_GPIO_EXTI_Callback+0x4c>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a0a      	ldr	r2, [pc, #40]	; (8007698 <HAL_GPIO_EXTI_Callback+0x48>)
 800766e:	7812      	ldrb	r2, [r2, #0]
 8007670:	1a9b      	subs	r3, r3, r2
 8007672:	4a0a      	ldr	r2, [pc, #40]	; (800769c <HAL_GPIO_EXTI_Callback+0x4c>)
 8007674:	6013      	str	r3, [r2, #0]
 8007676:	e003      	b.n	8007680 <HAL_GPIO_EXTI_Callback+0x30>
 8007678:	4b08      	ldr	r3, [pc, #32]	; (800769c <HAL_GPIO_EXTI_Callback+0x4c>)
 800767a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800767e:	601a      	str	r2, [r3, #0]
	//HAL_UART_Transmit(&huart2, msg1, strlen((char*)msg1), 5);
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
	xQueueGenericSendFromISR(uartTxQueueHandle, &msg1, 10, queueSEND_TO_BACK);
 8007680:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x50>)
 8007682:	6818      	ldr	r0, [r3, #0]
 8007684:	2300      	movs	r3, #0
 8007686:	220a      	movs	r2, #10
 8007688:	4906      	ldr	r1, [pc, #24]	; (80076a4 <HAL_GPIO_EXTI_Callback+0x54>)
 800768a:	f7fd f97d 	bl	8004988 <xQueueGenericSendFromISR>
}
 800768e:	bf00      	nop
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	20000080 	.word	0x20000080
 800769c:	2000007c 	.word	0x2000007c
 80076a0:	20004280 	.word	0x20004280
 80076a4:	20000018 	.word	0x20000018

080076a8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b096      	sub	sp, #88	; 0x58
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
	uint8_t *pTxBuff;
  /* Infinite loop */
  for(;;)
  {
		//if (LED_delay < 1000) LED_delay += 100; else LED_delay=1000;
		vTaskDelay(LED_delay); // Ticks
 80076b0:	4b0a      	ldr	r3, [pc, #40]	; (80076dc <StartDefaultTask+0x34>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fd fd95 	bl	80051e4 <vTaskDelay>
		HAL_GPIO_WritePin(LED_G_PORT,LED_G_PIN, 1); //Toggle LED
 80076ba:	2201      	movs	r2, #1
 80076bc:	2120      	movs	r1, #32
 80076be:	4808      	ldr	r0, [pc, #32]	; (80076e0 <StartDefaultTask+0x38>)
 80076c0:	f7fa fa72 	bl	8001ba8 <HAL_GPIO_WritePin>
		vTaskDelay(LED_delay);
 80076c4:	4b05      	ldr	r3, [pc, #20]	; (80076dc <StartDefaultTask+0x34>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fd fd8b 	bl	80051e4 <vTaskDelay>
		HAL_GPIO_WritePin(LED_G_PORT, LED_G_PIN, 0); //Toggle LED
 80076ce:	2200      	movs	r2, #0
 80076d0:	2120      	movs	r1, #32
 80076d2:	4803      	ldr	r0, [pc, #12]	; (80076e0 <StartDefaultTask+0x38>)
 80076d4:	f7fa fa68 	bl	8001ba8 <HAL_GPIO_WritePin>
		vTaskDelay(LED_delay); // Ticks
 80076d8:	e7ea      	b.n	80076b0 <StartDefaultTask+0x8>
 80076da:	bf00      	nop
 80076dc:	2000007c 	.word	0x2000007c
 80076e0:	40020000 	.word	0x40020000

080076e4 <StartUartTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTxTask */
void StartUartTxTask(void const * argument)
{
 80076e4:	b590      	push	{r4, r7, lr}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartTxTask */
	uint32_t notification = 1;
 80076ec:	2301      	movs	r3, #1
 80076ee:	60fb      	str	r3, [r7, #12]
	uint8_t *pTxBuff = NULL;
 80076f0:	2300      	movs	r3, #0
 80076f2:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{

		if (notification!=0)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d021      	beq.n	800773e <StartUartTxTask+0x5a>
		{
			while (pdFALSE==xQueueReceive( uartTxQueueHandle, &pTxBuff, portMAX_DELAY ));
 80076fa:	bf00      	nop
 80076fc:	4b14      	ldr	r3, [pc, #80]	; (8007750 <StartUartTxTask+0x6c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f107 0108 	add.w	r1, r7, #8
 8007704:	f04f 32ff 	mov.w	r2, #4294967295
 8007708:	4618      	mov	r0, r3
 800770a:	f7fd f9d5 	bl	8004ab8 <xQueueReceive>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d0f3      	beq.n	80076fc <StartUartTxTask+0x18>
			if (HAL_OK != HAL_UART_Transmit_DMA(&huart2, pTxBuff, strlen((const char*)pTxBuff)))
 8007714:	68bc      	ldr	r4, [r7, #8]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	4618      	mov	r0, r3
 800771a:	f7f8 fd79 	bl	8000210 <strlen>
 800771e:	4603      	mov	r3, r0
 8007720:	b29b      	uxth	r3, r3
 8007722:	461a      	mov	r2, r3
 8007724:	4621      	mov	r1, r4
 8007726:	480b      	ldr	r0, [pc, #44]	; (8007754 <StartUartTxTask+0x70>)
 8007728:	f7fb febc 	bl	80034a4 <HAL_UART_Transmit_DMA>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <StartUartTxTask+0x54>
			{
				notification = 1;
 8007732:	2301      	movs	r3, #1
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	e007      	b.n	8007748 <StartUartTxTask+0x64>
			}
			else
			{
				notification = 0; // wait for ISR/Callback to indicate completion
 8007738:	2300      	movs	r3, #0
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	e004      	b.n	8007748 <StartUartTxTask+0x64>
			}
		}
		else
		{
			notification = ulTaskNotifyTake( pdTRUE, 100 );
 800773e:	2164      	movs	r1, #100	; 0x64
 8007740:	2001      	movs	r0, #1
 8007742:	f7fe fe17 	bl	8006374 <ulTaskNotifyTake>
 8007746:	60f8      	str	r0, [r7, #12]
		}
		osDelay(1);
 8007748:	2001      	movs	r0, #1
 800774a:	f7fc fdea 	bl	8004322 <osDelay>
		if (notification!=0)
 800774e:	e7d1      	b.n	80076f4 <StartUartTxTask+0x10>
 8007750:	20004280 	.word	0x20004280
 8007754:	2000428c 	.word	0x2000428c

08007758 <StartStatsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStatsTask */
void StartStatsTask(void const * argument)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b0c2      	sub	sp, #264	; 0x108
 800775c:	af00      	add	r7, sp, #0
 800775e:	1d3b      	adds	r3, r7, #4
 8007760:	6018      	str	r0, [r3, #0]
	uint8_t *pTxBuff;
  /* Infinite loop */
	  for(;;)
	  {
	    //osDelay(1000); // 1000ms
	    vTaskDelay(1000); // 1000 ticks = 1000 ms
 8007762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007766:	f7fd fd3d 	bl	80051e4 <vTaskDelay>
	    vTaskGetRunTimeStats( (char*) ps_buffer ); // Generate CPU utilization info (human readable)
 800776a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fd7c 	bl	800626c <vTaskGetRunTimeStats>
	    pTxBuff = ps_buffer;
 8007774:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007778:	60fb      	str	r3, [r7, #12]
	    xQueueGenericSend(uartTxQueueHandle, (void *)&pTxBuff, 10, queueSEND_TO_BACK);
 800777a:	4b15      	ldr	r3, [pc, #84]	; (80077d0 <StartStatsTask+0x78>)
 800777c:	6818      	ldr	r0, [r3, #0]
 800777e:	f107 010c 	add.w	r1, r7, #12
 8007782:	2300      	movs	r3, #0
 8007784:	220a      	movs	r2, #10
 8007786:	f7fd f801 	bl	800478c <xQueueGenericSend>

		dstack = uxTaskGetStackHighWaterMark(defaultTaskHandle);
 800778a:	4b12      	ldr	r3, [pc, #72]	; (80077d4 <StartStatsTask+0x7c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe fc36 	bl	8006000 <uxTaskGetStackHighWaterMark>
 8007794:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		t2stack = uxTaskGetStackHighWaterMark(statsTaskHandle);
 8007798:	4b0f      	ldr	r3, [pc, #60]	; (80077d8 <StartStatsTask+0x80>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4618      	mov	r0, r3
 800779e:	f7fe fc2f 	bl	8006000 <uxTaskGetStackHighWaterMark>
 80077a2:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
		sprintf((char*)msg_buffer, "Stack High Mark: T_default=%ld, T_2=%ld\n\r", dstack, t2stack);
 80077a6:	f107 0010 	add.w	r0, r7, #16
 80077aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80077ae:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80077b2:	490a      	ldr	r1, [pc, #40]	; (80077dc <StartStatsTask+0x84>)
 80077b4:	f000 fb6a 	bl	8007e8c <siprintf>
		pTxBuff = msg_buffer;
 80077b8:	f107 0310 	add.w	r3, r7, #16
 80077bc:	60fb      	str	r3, [r7, #12]
	    xQueueGenericSend(uartTxQueueHandle, &pTxBuff, 10, queueSEND_TO_BACK);
 80077be:	4b04      	ldr	r3, [pc, #16]	; (80077d0 <StartStatsTask+0x78>)
 80077c0:	6818      	ldr	r0, [r3, #0]
 80077c2:	f107 010c 	add.w	r1, r7, #12
 80077c6:	2300      	movs	r3, #0
 80077c8:	220a      	movs	r2, #10
 80077ca:	f7fc ffdf 	bl	800478c <xQueueGenericSend>
	  {
 80077ce:	e7c8      	b.n	8007762 <StartStatsTask+0xa>
 80077d0:	20004280 	.word	0x20004280
 80077d4:	200040d0 	.word	0x200040d0
 80077d8:	20004284 	.word	0x20004284
 80077dc:	080087d8 	.word	0x080087d8

080077e0 <StartADCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADCTask */
void StartADCTask(void const * argument)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
	uint32_t ADCValue;
	BaseType_t xResult;
	/* Infinite loop */
	for(;;)
	{
		vTaskSuspend( NULL );
 80077e8:	2000      	movs	r0, #0
 80077ea:	f7fd fd95 	bl	8005318 <vTaskSuspend>
		HAL_ADC_Start_IT(&hadc1);
 80077ee:	4806      	ldr	r0, [pc, #24]	; (8007808 <StartADCTask+0x28>)
 80077f0:	f7f8 ff68 	bl	80006c4 <HAL_ADC_Start_IT>
		xResult = xTaskNotifyWait(0,0, &ADCValue, 100);
 80077f4:	f107 0208 	add.w	r2, r7, #8
 80077f8:	2364      	movs	r3, #100	; 0x64
 80077fa:	2100      	movs	r1, #0
 80077fc:	2000      	movs	r0, #0
 80077fe:	f7fe fe01 	bl	8006404 <xTaskNotifyWait>
 8007802:	60f8      	str	r0, [r7, #12]
		vTaskSuspend( NULL );
 8007804:	e7f0      	b.n	80077e8 <StartADCTask+0x8>
 8007806:	bf00      	nop
 8007808:	20004174 	.word	0x20004174

0800780c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a04      	ldr	r2, [pc, #16]	; (800782c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d101      	bne.n	8007822 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800781e:	f7f8 feed 	bl	80005fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007822:	bf00      	nop
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	40001400 	.word	0x40001400

08007830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007830:	b480      	push	{r7}
 8007832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007834:	bf00      	nop
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
	...

08007840 <HAL_UART_TxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af02      	add	r7, sp, #8
 8007846:	6078      	str	r0, [r7, #4]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
  //if (huart == huart2)
  {
	  xTaskGenericNotifyFromISR(uartTxTaskHandle, 1, eIncrement, NULL, NULL);
 8007848:	4b06      	ldr	r3, [pc, #24]	; (8007864 <HAL_UART_TxCpltCallback+0x24>)
 800784a:	6818      	ldr	r0, [r3, #0]
 800784c:	2300      	movs	r3, #0
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	2300      	movs	r3, #0
 8007852:	2202      	movs	r2, #2
 8007854:	2101      	movs	r1, #1
 8007856:	f7fe fe2f 	bl	80064b8 <xTaskGenericNotifyFromISR>
  }
}
 800785a:	bf00      	nop
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	200042cc 	.word	0x200042cc

08007868 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800786e:	2300      	movs	r3, #0
 8007870:	607b      	str	r3, [r7, #4]
 8007872:	4b12      	ldr	r3, [pc, #72]	; (80078bc <HAL_MspInit+0x54>)
 8007874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007876:	4a11      	ldr	r2, [pc, #68]	; (80078bc <HAL_MspInit+0x54>)
 8007878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800787c:	6453      	str	r3, [r2, #68]	; 0x44
 800787e:	4b0f      	ldr	r3, [pc, #60]	; (80078bc <HAL_MspInit+0x54>)
 8007880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007886:	607b      	str	r3, [r7, #4]
 8007888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800788a:	2300      	movs	r3, #0
 800788c:	603b      	str	r3, [r7, #0]
 800788e:	4b0b      	ldr	r3, [pc, #44]	; (80078bc <HAL_MspInit+0x54>)
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	4a0a      	ldr	r2, [pc, #40]	; (80078bc <HAL_MspInit+0x54>)
 8007894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007898:	6413      	str	r3, [r2, #64]	; 0x40
 800789a:	4b08      	ldr	r3, [pc, #32]	; (80078bc <HAL_MspInit+0x54>)
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80078a6:	2200      	movs	r2, #0
 80078a8:	210f      	movs	r1, #15
 80078aa:	f06f 0001 	mvn.w	r0, #1
 80078ae:	f7f9 fc2b 	bl	8001108 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80078b2:	bf00      	nop
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	40023800 	.word	0x40023800

080078c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a25      	ldr	r2, [pc, #148]	; (8007964 <HAL_ADC_MspInit+0xa4>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d144      	bne.n	800795c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
 80078d6:	4b24      	ldr	r3, [pc, #144]	; (8007968 <HAL_ADC_MspInit+0xa8>)
 80078d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078da:	4a23      	ldr	r2, [pc, #140]	; (8007968 <HAL_ADC_MspInit+0xa8>)
 80078dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e0:	6453      	str	r3, [r2, #68]	; 0x44
 80078e2:	4b21      	ldr	r3, [pc, #132]	; (8007968 <HAL_ADC_MspInit+0xa8>)
 80078e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80078ee:	4b1f      	ldr	r3, [pc, #124]	; (800796c <HAL_ADC_MspInit+0xac>)
 80078f0:	4a1f      	ldr	r2, [pc, #124]	; (8007970 <HAL_ADC_MspInit+0xb0>)
 80078f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80078f4:	4b1d      	ldr	r3, [pc, #116]	; (800796c <HAL_ADC_MspInit+0xac>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80078fa:	4b1c      	ldr	r3, [pc, #112]	; (800796c <HAL_ADC_MspInit+0xac>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007900:	4b1a      	ldr	r3, [pc, #104]	; (800796c <HAL_ADC_MspInit+0xac>)
 8007902:	2200      	movs	r2, #0
 8007904:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007906:	4b19      	ldr	r3, [pc, #100]	; (800796c <HAL_ADC_MspInit+0xac>)
 8007908:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800790c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800790e:	4b17      	ldr	r3, [pc, #92]	; (800796c <HAL_ADC_MspInit+0xac>)
 8007910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007914:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007916:	4b15      	ldr	r3, [pc, #84]	; (800796c <HAL_ADC_MspInit+0xac>)
 8007918:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800791c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800791e:	4b13      	ldr	r3, [pc, #76]	; (800796c <HAL_ADC_MspInit+0xac>)
 8007920:	2200      	movs	r2, #0
 8007922:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007924:	4b11      	ldr	r3, [pc, #68]	; (800796c <HAL_ADC_MspInit+0xac>)
 8007926:	2200      	movs	r2, #0
 8007928:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800792a:	4b10      	ldr	r3, [pc, #64]	; (800796c <HAL_ADC_MspInit+0xac>)
 800792c:	2200      	movs	r2, #0
 800792e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007930:	480e      	ldr	r0, [pc, #56]	; (800796c <HAL_ADC_MspInit+0xac>)
 8007932:	f7f9 fc13 	bl	800115c <HAL_DMA_Init>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 800793c:	f7ff ff78 	bl	8007830 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a0a      	ldr	r2, [pc, #40]	; (800796c <HAL_ADC_MspInit+0xac>)
 8007944:	639a      	str	r2, [r3, #56]	; 0x38
 8007946:	4a09      	ldr	r2, [pc, #36]	; (800796c <HAL_ADC_MspInit+0xac>)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 800794c:	2200      	movs	r2, #0
 800794e:	2106      	movs	r1, #6
 8007950:	2012      	movs	r0, #18
 8007952:	f7f9 fbd9 	bl	8001108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007956:	2012      	movs	r0, #18
 8007958:	f7f9 fbf2 	bl	8001140 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800795c:	bf00      	nop
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	40012000 	.word	0x40012000
 8007968:	40023800 	.word	0x40023800
 800796c:	20004220 	.word	0x20004220
 8007970:	40026470 	.word	0x40026470

08007974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a0e      	ldr	r2, [pc, #56]	; (80079bc <HAL_TIM_Base_MspInit+0x48>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d115      	bne.n	80079b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
 800798a:	4b0d      	ldr	r3, [pc, #52]	; (80079c0 <HAL_TIM_Base_MspInit+0x4c>)
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	4a0c      	ldr	r2, [pc, #48]	; (80079c0 <HAL_TIM_Base_MspInit+0x4c>)
 8007990:	f043 0304 	orr.w	r3, r3, #4
 8007994:	6413      	str	r3, [r2, #64]	; 0x40
 8007996:	4b0a      	ldr	r3, [pc, #40]	; (80079c0 <HAL_TIM_Base_MspInit+0x4c>)
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	f003 0304 	and.w	r3, r3, #4
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80079a2:	2200      	movs	r2, #0
 80079a4:	2105      	movs	r1, #5
 80079a6:	201e      	movs	r0, #30
 80079a8:	f7f9 fbae 	bl	8001108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80079ac:	201e      	movs	r0, #30
 80079ae:	f7f9 fbc7 	bl	8001140 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80079b2:	bf00      	nop
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	40000800 	.word	0x40000800
 80079c0:	40023800 	.word	0x40023800

080079c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079cc:	f107 030c 	add.w	r3, r7, #12
 80079d0:	2200      	movs	r2, #0
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	605a      	str	r2, [r3, #4]
 80079d6:	609a      	str	r2, [r3, #8]
 80079d8:	60da      	str	r2, [r3, #12]
 80079da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a12      	ldr	r2, [pc, #72]	; (8007a2c <HAL_TIM_MspPostInit+0x68>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d11d      	bne.n	8007a22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079e6:	2300      	movs	r3, #0
 80079e8:	60bb      	str	r3, [r7, #8]
 80079ea:	4b11      	ldr	r3, [pc, #68]	; (8007a30 <HAL_TIM_MspPostInit+0x6c>)
 80079ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ee:	4a10      	ldr	r2, [pc, #64]	; (8007a30 <HAL_TIM_MspPostInit+0x6c>)
 80079f0:	f043 0302 	orr.w	r3, r3, #2
 80079f4:	6313      	str	r3, [r2, #48]	; 0x30
 80079f6:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <HAL_TIM_MspPostInit+0x6c>)
 80079f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	60bb      	str	r3, [r7, #8]
 8007a00:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007a02:	2340      	movs	r3, #64	; 0x40
 8007a04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a06:	2302      	movs	r3, #2
 8007a08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007a12:	2302      	movs	r3, #2
 8007a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a16:	f107 030c 	add.w	r3, r7, #12
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	4805      	ldr	r0, [pc, #20]	; (8007a34 <HAL_TIM_MspPostInit+0x70>)
 8007a1e:	f7f9 ff2f 	bl	8001880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007a22:	bf00      	nop
 8007a24:	3720      	adds	r7, #32
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	40000800 	.word	0x40000800
 8007a30:	40023800 	.word	0x40023800
 8007a34:	40020400 	.word	0x40020400

08007a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	; 0x28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a40:	f107 0314 	add.w	r3, r7, #20
 8007a44:	2200      	movs	r2, #0
 8007a46:	601a      	str	r2, [r3, #0]
 8007a48:	605a      	str	r2, [r3, #4]
 8007a4a:	609a      	str	r2, [r3, #8]
 8007a4c:	60da      	str	r2, [r3, #12]
 8007a4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a4c      	ldr	r2, [pc, #304]	; (8007b88 <HAL_UART_MspInit+0x150>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	f040 8091 	bne.w	8007b7e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	613b      	str	r3, [r7, #16]
 8007a60:	4b4a      	ldr	r3, [pc, #296]	; (8007b8c <HAL_UART_MspInit+0x154>)
 8007a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a64:	4a49      	ldr	r2, [pc, #292]	; (8007b8c <HAL_UART_MspInit+0x154>)
 8007a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8007a6c:	4b47      	ldr	r3, [pc, #284]	; (8007b8c <HAL_UART_MspInit+0x154>)
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a74:	613b      	str	r3, [r7, #16]
 8007a76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a78:	2300      	movs	r3, #0
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	4b43      	ldr	r3, [pc, #268]	; (8007b8c <HAL_UART_MspInit+0x154>)
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a80:	4a42      	ldr	r2, [pc, #264]	; (8007b8c <HAL_UART_MspInit+0x154>)
 8007a82:	f043 0301 	orr.w	r3, r3, #1
 8007a86:	6313      	str	r3, [r2, #48]	; 0x30
 8007a88:	4b40      	ldr	r3, [pc, #256]	; (8007b8c <HAL_UART_MspInit+0x154>)
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007a94:	230c      	movs	r3, #12
 8007a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a98:	2302      	movs	r3, #2
 8007a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007aa4:	2307      	movs	r3, #7
 8007aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007aa8:	f107 0314 	add.w	r3, r7, #20
 8007aac:	4619      	mov	r1, r3
 8007aae:	4838      	ldr	r0, [pc, #224]	; (8007b90 <HAL_UART_MspInit+0x158>)
 8007ab0:	f7f9 fee6 	bl	8001880 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8007ab4:	4b37      	ldr	r3, [pc, #220]	; (8007b94 <HAL_UART_MspInit+0x15c>)
 8007ab6:	4a38      	ldr	r2, [pc, #224]	; (8007b98 <HAL_UART_MspInit+0x160>)
 8007ab8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8007aba:	4b36      	ldr	r3, [pc, #216]	; (8007b94 <HAL_UART_MspInit+0x15c>)
 8007abc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ac0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007ac2:	4b34      	ldr	r3, [pc, #208]	; (8007b94 <HAL_UART_MspInit+0x15c>)
 8007ac4:	2240      	movs	r2, #64	; 0x40
 8007ac6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ac8:	4b32      	ldr	r3, [pc, #200]	; (8007b94 <HAL_UART_MspInit+0x15c>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007ace:	4b31      	ldr	r3, [pc, #196]	; (8007b94 <HAL_UART_MspInit+0x15c>)
 8007ad0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ad4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007ad6:	4b2f      	ldr	r3, [pc, #188]	; (8007b94 <HAL_UART_MspInit+0x15c>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007adc:	4b2d      	ldr	r3, [pc, #180]	; (8007b94 <HAL_UART_MspInit+0x15c>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007ae2:	4b2c      	ldr	r3, [pc, #176]	; (8007b94 <HAL_UART_MspInit+0x15c>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007ae8:	4b2a      	ldr	r3, [pc, #168]	; (8007b94 <HAL_UART_MspInit+0x15c>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007aee:	4b29      	ldr	r3, [pc, #164]	; (8007b94 <HAL_UART_MspInit+0x15c>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007af4:	4827      	ldr	r0, [pc, #156]	; (8007b94 <HAL_UART_MspInit+0x15c>)
 8007af6:	f7f9 fb31 	bl	800115c <HAL_DMA_Init>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8007b00:	f7ff fe96 	bl	8007830 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a23      	ldr	r2, [pc, #140]	; (8007b94 <HAL_UART_MspInit+0x15c>)
 8007b08:	631a      	str	r2, [r3, #48]	; 0x30
 8007b0a:	4a22      	ldr	r2, [pc, #136]	; (8007b94 <HAL_UART_MspInit+0x15c>)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007b10:	4b22      	ldr	r3, [pc, #136]	; (8007b9c <HAL_UART_MspInit+0x164>)
 8007b12:	4a23      	ldr	r2, [pc, #140]	; (8007ba0 <HAL_UART_MspInit+0x168>)
 8007b14:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007b16:	4b21      	ldr	r3, [pc, #132]	; (8007b9c <HAL_UART_MspInit+0x164>)
 8007b18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007b1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b1e:	4b1f      	ldr	r3, [pc, #124]	; (8007b9c <HAL_UART_MspInit+0x164>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b24:	4b1d      	ldr	r3, [pc, #116]	; (8007b9c <HAL_UART_MspInit+0x164>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007b2a:	4b1c      	ldr	r3, [pc, #112]	; (8007b9c <HAL_UART_MspInit+0x164>)
 8007b2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b30:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007b32:	4b1a      	ldr	r3, [pc, #104]	; (8007b9c <HAL_UART_MspInit+0x164>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007b38:	4b18      	ldr	r3, [pc, #96]	; (8007b9c <HAL_UART_MspInit+0x164>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8007b3e:	4b17      	ldr	r3, [pc, #92]	; (8007b9c <HAL_UART_MspInit+0x164>)
 8007b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b44:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007b46:	4b15      	ldr	r3, [pc, #84]	; (8007b9c <HAL_UART_MspInit+0x164>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007b4c:	4b13      	ldr	r3, [pc, #76]	; (8007b9c <HAL_UART_MspInit+0x164>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007b52:	4812      	ldr	r0, [pc, #72]	; (8007b9c <HAL_UART_MspInit+0x164>)
 8007b54:	f7f9 fb02 	bl	800115c <HAL_DMA_Init>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8007b5e:	f7ff fe67 	bl	8007830 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a0d      	ldr	r2, [pc, #52]	; (8007b9c <HAL_UART_MspInit+0x164>)
 8007b66:	635a      	str	r2, [r3, #52]	; 0x34
 8007b68:	4a0c      	ldr	r2, [pc, #48]	; (8007b9c <HAL_UART_MspInit+0x164>)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2105      	movs	r1, #5
 8007b72:	2026      	movs	r0, #38	; 0x26
 8007b74:	f7f9 fac8 	bl	8001108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007b78:	2026      	movs	r0, #38	; 0x26
 8007b7a:	f7f9 fae1 	bl	8001140 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007b7e:	bf00      	nop
 8007b80:	3728      	adds	r7, #40	; 0x28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	40004400 	.word	0x40004400
 8007b8c:	40023800 	.word	0x40023800
 8007b90:	40020000 	.word	0x40020000
 8007b94:	200041bc 	.word	0x200041bc
 8007b98:	400260a0 	.word	0x400260a0
 8007b9c:	200040d4 	.word	0x200040d4
 8007ba0:	40026088 	.word	0x40026088

08007ba4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08c      	sub	sp, #48	; 0x30
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	2037      	movs	r0, #55	; 0x37
 8007bba:	f7f9 faa5 	bl	8001108 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007bbe:	2037      	movs	r0, #55	; 0x37
 8007bc0:	f7f9 fabe 	bl	8001140 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	4b1f      	ldr	r3, [pc, #124]	; (8007c48 <HAL_InitTick+0xa4>)
 8007bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bcc:	4a1e      	ldr	r2, [pc, #120]	; (8007c48 <HAL_InitTick+0xa4>)
 8007bce:	f043 0320 	orr.w	r3, r3, #32
 8007bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8007bd4:	4b1c      	ldr	r3, [pc, #112]	; (8007c48 <HAL_InitTick+0xa4>)
 8007bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd8:	f003 0320 	and.w	r3, r3, #32
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007be0:	f107 0210 	add.w	r2, r7, #16
 8007be4:	f107 0314 	add.w	r3, r7, #20
 8007be8:	4611      	mov	r1, r2
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fa f928 	bl	8001e40 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8007bf0:	f7fa f8fe 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfc:	4a13      	ldr	r2, [pc, #76]	; (8007c4c <HAL_InitTick+0xa8>)
 8007bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007c02:	0c9b      	lsrs	r3, r3, #18
 8007c04:	3b01      	subs	r3, #1
 8007c06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8007c08:	4b11      	ldr	r3, [pc, #68]	; (8007c50 <HAL_InitTick+0xac>)
 8007c0a:	4a12      	ldr	r2, [pc, #72]	; (8007c54 <HAL_InitTick+0xb0>)
 8007c0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8007c0e:	4b10      	ldr	r3, [pc, #64]	; (8007c50 <HAL_InitTick+0xac>)
 8007c10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007c14:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8007c16:	4a0e      	ldr	r2, [pc, #56]	; (8007c50 <HAL_InitTick+0xac>)
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8007c1c:	4b0c      	ldr	r3, [pc, #48]	; (8007c50 <HAL_InitTick+0xac>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c22:	4b0b      	ldr	r3, [pc, #44]	; (8007c50 <HAL_InitTick+0xac>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8007c28:	4809      	ldr	r0, [pc, #36]	; (8007c50 <HAL_InitTick+0xac>)
 8007c2a:	f7fa fd47 	bl	80026bc <HAL_TIM_Base_Init>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d104      	bne.n	8007c3e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8007c34:	4806      	ldr	r0, [pc, #24]	; (8007c50 <HAL_InitTick+0xac>)
 8007c36:	f7fa fd6c 	bl	8002712 <HAL_TIM_Base_Start_IT>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	e000      	b.n	8007c40 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3730      	adds	r7, #48	; 0x30
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	40023800 	.word	0x40023800
 8007c4c:	431bde83 	.word	0x431bde83
 8007c50:	200042d0 	.word	0x200042d0
 8007c54:	40001400 	.word	0x40001400

08007c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007c5c:	bf00      	nop
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c66:	b480      	push	{r7}
 8007c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c6a:	e7fe      	b.n	8007c6a <HardFault_Handler+0x4>

08007c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c70:	e7fe      	b.n	8007c70 <MemManage_Handler+0x4>

08007c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c72:	b480      	push	{r7}
 8007c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c76:	e7fe      	b.n	8007c76 <BusFault_Handler+0x4>

08007c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c7c:	e7fe      	b.n	8007c7c <UsageFault_Handler+0x4>

08007c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c82:	bf00      	nop
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007c90:	4802      	ldr	r0, [pc, #8]	; (8007c9c <DMA1_Stream5_IRQHandler+0x10>)
 8007c92:	f7f9 fb8b 	bl	80013ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8007c96:	bf00      	nop
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	200040d4 	.word	0x200040d4

08007ca0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007ca4:	4802      	ldr	r0, [pc, #8]	; (8007cb0 <DMA1_Stream6_IRQHandler+0x10>)
 8007ca6:	f7f9 fb81 	bl	80013ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8007caa:	bf00      	nop
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	200041bc 	.word	0x200041bc

08007cb4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8007cb8:	4802      	ldr	r0, [pc, #8]	; (8007cc4 <ADC_IRQHandler+0x10>)
 8007cba:	f7f8 fdd3 	bl	8000864 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8007cbe:	bf00      	nop
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20004174 	.word	0x20004174

08007cc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	tim4_ov_counter++;
 8007ccc:	4b04      	ldr	r3, [pc, #16]	; (8007ce0 <TIM4_IRQHandler+0x18>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	4a03      	ldr	r2, [pc, #12]	; (8007ce0 <TIM4_IRQHandler+0x18>)
 8007cd4:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007cd6:	4803      	ldr	r0, [pc, #12]	; (8007ce4 <TIM4_IRQHandler+0x1c>)
 8007cd8:	f7fa fd74 	bl	80027c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8007cdc:	bf00      	nop
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20003e5c 	.word	0x20003e5c
 8007ce4:	20004134 	.word	0x20004134

08007ce8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007cec:	4802      	ldr	r0, [pc, #8]	; (8007cf8 <USART2_IRQHandler+0x10>)
 8007cee:	f7fb fc45 	bl	800357c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007cf2:	bf00      	nop
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	2000428c 	.word	0x2000428c

08007cfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007d00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007d04:	f7f9 ff6a 	bl	8001bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007d08:	bf00      	nop
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007d10:	4802      	ldr	r0, [pc, #8]	; (8007d1c <TIM7_IRQHandler+0x10>)
 8007d12:	f7fa fd57 	bl	80027c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007d16:	bf00      	nop
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	200042d0 	.word	0x200042d0

08007d20 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007d24:	4802      	ldr	r0, [pc, #8]	; (8007d30 <DMA2_Stream4_IRQHandler+0x10>)
 8007d26:	f7f9 fb41 	bl	80013ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8007d2a:	bf00      	nop
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20004220 	.word	0x20004220

08007d34 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007d3c:	4b11      	ldr	r3, [pc, #68]	; (8007d84 <_sbrk+0x50>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d102      	bne.n	8007d4a <_sbrk+0x16>
		heap_end = &end;
 8007d44:	4b0f      	ldr	r3, [pc, #60]	; (8007d84 <_sbrk+0x50>)
 8007d46:	4a10      	ldr	r2, [pc, #64]	; (8007d88 <_sbrk+0x54>)
 8007d48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007d4a:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <_sbrk+0x50>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007d50:	4b0c      	ldr	r3, [pc, #48]	; (8007d84 <_sbrk+0x50>)
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4413      	add	r3, r2
 8007d58:	466a      	mov	r2, sp
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d907      	bls.n	8007d6e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007d5e:	f000 f855 	bl	8007e0c <__errno>
 8007d62:	4603      	mov	r3, r0
 8007d64:	220c      	movs	r2, #12
 8007d66:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8007d68:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6c:	e006      	b.n	8007d7c <_sbrk+0x48>
	}

	heap_end += incr;
 8007d6e:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <_sbrk+0x50>)
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4413      	add	r3, r2
 8007d76:	4a03      	ldr	r2, [pc, #12]	; (8007d84 <_sbrk+0x50>)
 8007d78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	200040c0 	.word	0x200040c0
 8007d88:	20004320 	.word	0x20004320

08007d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007d90:	4b08      	ldr	r3, [pc, #32]	; (8007db4 <SystemInit+0x28>)
 8007d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d96:	4a07      	ldr	r2, [pc, #28]	; (8007db4 <SystemInit+0x28>)
 8007d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007da0:	4b04      	ldr	r3, [pc, #16]	; (8007db4 <SystemInit+0x28>)
 8007da2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007da6:	609a      	str	r2, [r3, #8]
#endif
}
 8007da8:	bf00      	nop
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	e000ed00 	.word	0xe000ed00

08007db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007df0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007dbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007dbe:	e003      	b.n	8007dc8 <LoopCopyDataInit>

08007dc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007dc0:	4b0c      	ldr	r3, [pc, #48]	; (8007df4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007dc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007dc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007dc6:	3104      	adds	r1, #4

08007dc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007dc8:	480b      	ldr	r0, [pc, #44]	; (8007df8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007dca:	4b0c      	ldr	r3, [pc, #48]	; (8007dfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007dcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007dce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007dd0:	d3f6      	bcc.n	8007dc0 <CopyDataInit>
  ldr  r2, =_sbss
 8007dd2:	4a0b      	ldr	r2, [pc, #44]	; (8007e00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007dd4:	e002      	b.n	8007ddc <LoopFillZerobss>

08007dd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007dd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007dd8:	f842 3b04 	str.w	r3, [r2], #4

08007ddc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007ddc:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007dde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007de0:	d3f9      	bcc.n	8007dd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007de2:	f7ff ffd3 	bl	8007d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007de6:	f000 f817 	bl	8007e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007dea:	f7ff f903 	bl	8006ff4 <main>
  bx  lr    
 8007dee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007df0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007df4:	08008868 	.word	0x08008868
  ldr  r0, =_sdata
 8007df8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007dfc:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8007e00:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8007e04:	20004320 	.word	0x20004320

08007e08 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007e08:	e7fe      	b.n	8007e08 <CAN1_RX0_IRQHandler>
	...

08007e0c <__errno>:
 8007e0c:	4b01      	ldr	r3, [pc, #4]	; (8007e14 <__errno+0x8>)
 8007e0e:	6818      	ldr	r0, [r3, #0]
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	20000088 	.word	0x20000088

08007e18 <__libc_init_array>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	4d0d      	ldr	r5, [pc, #52]	; (8007e50 <__libc_init_array+0x38>)
 8007e1c:	4c0d      	ldr	r4, [pc, #52]	; (8007e54 <__libc_init_array+0x3c>)
 8007e1e:	1b64      	subs	r4, r4, r5
 8007e20:	10a4      	asrs	r4, r4, #2
 8007e22:	2600      	movs	r6, #0
 8007e24:	42a6      	cmp	r6, r4
 8007e26:	d109      	bne.n	8007e3c <__libc_init_array+0x24>
 8007e28:	4d0b      	ldr	r5, [pc, #44]	; (8007e58 <__libc_init_array+0x40>)
 8007e2a:	4c0c      	ldr	r4, [pc, #48]	; (8007e5c <__libc_init_array+0x44>)
 8007e2c:	f000 fc56 	bl	80086dc <_init>
 8007e30:	1b64      	subs	r4, r4, r5
 8007e32:	10a4      	asrs	r4, r4, #2
 8007e34:	2600      	movs	r6, #0
 8007e36:	42a6      	cmp	r6, r4
 8007e38:	d105      	bne.n	8007e46 <__libc_init_array+0x2e>
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e40:	4798      	blx	r3
 8007e42:	3601      	adds	r6, #1
 8007e44:	e7ee      	b.n	8007e24 <__libc_init_array+0xc>
 8007e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e4a:	4798      	blx	r3
 8007e4c:	3601      	adds	r6, #1
 8007e4e:	e7f2      	b.n	8007e36 <__libc_init_array+0x1e>
 8007e50:	08008860 	.word	0x08008860
 8007e54:	08008860 	.word	0x08008860
 8007e58:	08008860 	.word	0x08008860
 8007e5c:	08008864 	.word	0x08008864

08007e60 <memcpy>:
 8007e60:	440a      	add	r2, r1
 8007e62:	4291      	cmp	r1, r2
 8007e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e68:	d100      	bne.n	8007e6c <memcpy+0xc>
 8007e6a:	4770      	bx	lr
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e76:	4291      	cmp	r1, r2
 8007e78:	d1f9      	bne.n	8007e6e <memcpy+0xe>
 8007e7a:	bd10      	pop	{r4, pc}

08007e7c <memset>:
 8007e7c:	4402      	add	r2, r0
 8007e7e:	4603      	mov	r3, r0
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d100      	bne.n	8007e86 <memset+0xa>
 8007e84:	4770      	bx	lr
 8007e86:	f803 1b01 	strb.w	r1, [r3], #1
 8007e8a:	e7f9      	b.n	8007e80 <memset+0x4>

08007e8c <siprintf>:
 8007e8c:	b40e      	push	{r1, r2, r3}
 8007e8e:	b500      	push	{lr}
 8007e90:	b09c      	sub	sp, #112	; 0x70
 8007e92:	ab1d      	add	r3, sp, #116	; 0x74
 8007e94:	9002      	str	r0, [sp, #8]
 8007e96:	9006      	str	r0, [sp, #24]
 8007e98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e9c:	4809      	ldr	r0, [pc, #36]	; (8007ec4 <siprintf+0x38>)
 8007e9e:	9107      	str	r1, [sp, #28]
 8007ea0:	9104      	str	r1, [sp, #16]
 8007ea2:	4909      	ldr	r1, [pc, #36]	; (8007ec8 <siprintf+0x3c>)
 8007ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ea8:	9105      	str	r1, [sp, #20]
 8007eaa:	6800      	ldr	r0, [r0, #0]
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	a902      	add	r1, sp, #8
 8007eb0:	f000 f870 	bl	8007f94 <_svfiprintf_r>
 8007eb4:	9b02      	ldr	r3, [sp, #8]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	701a      	strb	r2, [r3, #0]
 8007eba:	b01c      	add	sp, #112	; 0x70
 8007ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ec0:	b003      	add	sp, #12
 8007ec2:	4770      	bx	lr
 8007ec4:	20000088 	.word	0x20000088
 8007ec8:	ffff0208 	.word	0xffff0208

08007ecc <strcpy>:
 8007ecc:	4603      	mov	r3, r0
 8007ece:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ed2:	f803 2b01 	strb.w	r2, [r3], #1
 8007ed6:	2a00      	cmp	r2, #0
 8007ed8:	d1f9      	bne.n	8007ece <strcpy+0x2>
 8007eda:	4770      	bx	lr

08007edc <__ssputs_r>:
 8007edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee0:	688e      	ldr	r6, [r1, #8]
 8007ee2:	429e      	cmp	r6, r3
 8007ee4:	4682      	mov	sl, r0
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	4690      	mov	r8, r2
 8007eea:	461f      	mov	r7, r3
 8007eec:	d838      	bhi.n	8007f60 <__ssputs_r+0x84>
 8007eee:	898a      	ldrh	r2, [r1, #12]
 8007ef0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ef4:	d032      	beq.n	8007f5c <__ssputs_r+0x80>
 8007ef6:	6825      	ldr	r5, [r4, #0]
 8007ef8:	6909      	ldr	r1, [r1, #16]
 8007efa:	eba5 0901 	sub.w	r9, r5, r1
 8007efe:	6965      	ldr	r5, [r4, #20]
 8007f00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f08:	3301      	adds	r3, #1
 8007f0a:	444b      	add	r3, r9
 8007f0c:	106d      	asrs	r5, r5, #1
 8007f0e:	429d      	cmp	r5, r3
 8007f10:	bf38      	it	cc
 8007f12:	461d      	movcc	r5, r3
 8007f14:	0553      	lsls	r3, r2, #21
 8007f16:	d531      	bpl.n	8007f7c <__ssputs_r+0xa0>
 8007f18:	4629      	mov	r1, r5
 8007f1a:	f000 fb39 	bl	8008590 <_malloc_r>
 8007f1e:	4606      	mov	r6, r0
 8007f20:	b950      	cbnz	r0, 8007f38 <__ssputs_r+0x5c>
 8007f22:	230c      	movs	r3, #12
 8007f24:	f8ca 3000 	str.w	r3, [sl]
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f2e:	81a3      	strh	r3, [r4, #12]
 8007f30:	f04f 30ff 	mov.w	r0, #4294967295
 8007f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f38:	6921      	ldr	r1, [r4, #16]
 8007f3a:	464a      	mov	r2, r9
 8007f3c:	f7ff ff90 	bl	8007e60 <memcpy>
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f4a:	81a3      	strh	r3, [r4, #12]
 8007f4c:	6126      	str	r6, [r4, #16]
 8007f4e:	6165      	str	r5, [r4, #20]
 8007f50:	444e      	add	r6, r9
 8007f52:	eba5 0509 	sub.w	r5, r5, r9
 8007f56:	6026      	str	r6, [r4, #0]
 8007f58:	60a5      	str	r5, [r4, #8]
 8007f5a:	463e      	mov	r6, r7
 8007f5c:	42be      	cmp	r6, r7
 8007f5e:	d900      	bls.n	8007f62 <__ssputs_r+0x86>
 8007f60:	463e      	mov	r6, r7
 8007f62:	4632      	mov	r2, r6
 8007f64:	6820      	ldr	r0, [r4, #0]
 8007f66:	4641      	mov	r1, r8
 8007f68:	f000 faa8 	bl	80084bc <memmove>
 8007f6c:	68a3      	ldr	r3, [r4, #8]
 8007f6e:	6822      	ldr	r2, [r4, #0]
 8007f70:	1b9b      	subs	r3, r3, r6
 8007f72:	4432      	add	r2, r6
 8007f74:	60a3      	str	r3, [r4, #8]
 8007f76:	6022      	str	r2, [r4, #0]
 8007f78:	2000      	movs	r0, #0
 8007f7a:	e7db      	b.n	8007f34 <__ssputs_r+0x58>
 8007f7c:	462a      	mov	r2, r5
 8007f7e:	f000 fb61 	bl	8008644 <_realloc_r>
 8007f82:	4606      	mov	r6, r0
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d1e1      	bne.n	8007f4c <__ssputs_r+0x70>
 8007f88:	6921      	ldr	r1, [r4, #16]
 8007f8a:	4650      	mov	r0, sl
 8007f8c:	f000 fab0 	bl	80084f0 <_free_r>
 8007f90:	e7c7      	b.n	8007f22 <__ssputs_r+0x46>
	...

08007f94 <_svfiprintf_r>:
 8007f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f98:	4698      	mov	r8, r3
 8007f9a:	898b      	ldrh	r3, [r1, #12]
 8007f9c:	061b      	lsls	r3, r3, #24
 8007f9e:	b09d      	sub	sp, #116	; 0x74
 8007fa0:	4607      	mov	r7, r0
 8007fa2:	460d      	mov	r5, r1
 8007fa4:	4614      	mov	r4, r2
 8007fa6:	d50e      	bpl.n	8007fc6 <_svfiprintf_r+0x32>
 8007fa8:	690b      	ldr	r3, [r1, #16]
 8007faa:	b963      	cbnz	r3, 8007fc6 <_svfiprintf_r+0x32>
 8007fac:	2140      	movs	r1, #64	; 0x40
 8007fae:	f000 faef 	bl	8008590 <_malloc_r>
 8007fb2:	6028      	str	r0, [r5, #0]
 8007fb4:	6128      	str	r0, [r5, #16]
 8007fb6:	b920      	cbnz	r0, 8007fc2 <_svfiprintf_r+0x2e>
 8007fb8:	230c      	movs	r3, #12
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc0:	e0d1      	b.n	8008166 <_svfiprintf_r+0x1d2>
 8007fc2:	2340      	movs	r3, #64	; 0x40
 8007fc4:	616b      	str	r3, [r5, #20]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fca:	2320      	movs	r3, #32
 8007fcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fd4:	2330      	movs	r3, #48	; 0x30
 8007fd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008180 <_svfiprintf_r+0x1ec>
 8007fda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fde:	f04f 0901 	mov.w	r9, #1
 8007fe2:	4623      	mov	r3, r4
 8007fe4:	469a      	mov	sl, r3
 8007fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fea:	b10a      	cbz	r2, 8007ff0 <_svfiprintf_r+0x5c>
 8007fec:	2a25      	cmp	r2, #37	; 0x25
 8007fee:	d1f9      	bne.n	8007fe4 <_svfiprintf_r+0x50>
 8007ff0:	ebba 0b04 	subs.w	fp, sl, r4
 8007ff4:	d00b      	beq.n	800800e <_svfiprintf_r+0x7a>
 8007ff6:	465b      	mov	r3, fp
 8007ff8:	4622      	mov	r2, r4
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	4638      	mov	r0, r7
 8007ffe:	f7ff ff6d 	bl	8007edc <__ssputs_r>
 8008002:	3001      	adds	r0, #1
 8008004:	f000 80aa 	beq.w	800815c <_svfiprintf_r+0x1c8>
 8008008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800800a:	445a      	add	r2, fp
 800800c:	9209      	str	r2, [sp, #36]	; 0x24
 800800e:	f89a 3000 	ldrb.w	r3, [sl]
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 80a2 	beq.w	800815c <_svfiprintf_r+0x1c8>
 8008018:	2300      	movs	r3, #0
 800801a:	f04f 32ff 	mov.w	r2, #4294967295
 800801e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008022:	f10a 0a01 	add.w	sl, sl, #1
 8008026:	9304      	str	r3, [sp, #16]
 8008028:	9307      	str	r3, [sp, #28]
 800802a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800802e:	931a      	str	r3, [sp, #104]	; 0x68
 8008030:	4654      	mov	r4, sl
 8008032:	2205      	movs	r2, #5
 8008034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008038:	4851      	ldr	r0, [pc, #324]	; (8008180 <_svfiprintf_r+0x1ec>)
 800803a:	f7f8 f8f1 	bl	8000220 <memchr>
 800803e:	9a04      	ldr	r2, [sp, #16]
 8008040:	b9d8      	cbnz	r0, 800807a <_svfiprintf_r+0xe6>
 8008042:	06d0      	lsls	r0, r2, #27
 8008044:	bf44      	itt	mi
 8008046:	2320      	movmi	r3, #32
 8008048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800804c:	0711      	lsls	r1, r2, #28
 800804e:	bf44      	itt	mi
 8008050:	232b      	movmi	r3, #43	; 0x2b
 8008052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008056:	f89a 3000 	ldrb.w	r3, [sl]
 800805a:	2b2a      	cmp	r3, #42	; 0x2a
 800805c:	d015      	beq.n	800808a <_svfiprintf_r+0xf6>
 800805e:	9a07      	ldr	r2, [sp, #28]
 8008060:	4654      	mov	r4, sl
 8008062:	2000      	movs	r0, #0
 8008064:	f04f 0c0a 	mov.w	ip, #10
 8008068:	4621      	mov	r1, r4
 800806a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800806e:	3b30      	subs	r3, #48	; 0x30
 8008070:	2b09      	cmp	r3, #9
 8008072:	d94e      	bls.n	8008112 <_svfiprintf_r+0x17e>
 8008074:	b1b0      	cbz	r0, 80080a4 <_svfiprintf_r+0x110>
 8008076:	9207      	str	r2, [sp, #28]
 8008078:	e014      	b.n	80080a4 <_svfiprintf_r+0x110>
 800807a:	eba0 0308 	sub.w	r3, r0, r8
 800807e:	fa09 f303 	lsl.w	r3, r9, r3
 8008082:	4313      	orrs	r3, r2
 8008084:	9304      	str	r3, [sp, #16]
 8008086:	46a2      	mov	sl, r4
 8008088:	e7d2      	b.n	8008030 <_svfiprintf_r+0x9c>
 800808a:	9b03      	ldr	r3, [sp, #12]
 800808c:	1d19      	adds	r1, r3, #4
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	9103      	str	r1, [sp, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	bfbb      	ittet	lt
 8008096:	425b      	neglt	r3, r3
 8008098:	f042 0202 	orrlt.w	r2, r2, #2
 800809c:	9307      	strge	r3, [sp, #28]
 800809e:	9307      	strlt	r3, [sp, #28]
 80080a0:	bfb8      	it	lt
 80080a2:	9204      	strlt	r2, [sp, #16]
 80080a4:	7823      	ldrb	r3, [r4, #0]
 80080a6:	2b2e      	cmp	r3, #46	; 0x2e
 80080a8:	d10c      	bne.n	80080c4 <_svfiprintf_r+0x130>
 80080aa:	7863      	ldrb	r3, [r4, #1]
 80080ac:	2b2a      	cmp	r3, #42	; 0x2a
 80080ae:	d135      	bne.n	800811c <_svfiprintf_r+0x188>
 80080b0:	9b03      	ldr	r3, [sp, #12]
 80080b2:	1d1a      	adds	r2, r3, #4
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	9203      	str	r2, [sp, #12]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	bfb8      	it	lt
 80080bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80080c0:	3402      	adds	r4, #2
 80080c2:	9305      	str	r3, [sp, #20]
 80080c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008190 <_svfiprintf_r+0x1fc>
 80080c8:	7821      	ldrb	r1, [r4, #0]
 80080ca:	2203      	movs	r2, #3
 80080cc:	4650      	mov	r0, sl
 80080ce:	f7f8 f8a7 	bl	8000220 <memchr>
 80080d2:	b140      	cbz	r0, 80080e6 <_svfiprintf_r+0x152>
 80080d4:	2340      	movs	r3, #64	; 0x40
 80080d6:	eba0 000a 	sub.w	r0, r0, sl
 80080da:	fa03 f000 	lsl.w	r0, r3, r0
 80080de:	9b04      	ldr	r3, [sp, #16]
 80080e0:	4303      	orrs	r3, r0
 80080e2:	3401      	adds	r4, #1
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ea:	4826      	ldr	r0, [pc, #152]	; (8008184 <_svfiprintf_r+0x1f0>)
 80080ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080f0:	2206      	movs	r2, #6
 80080f2:	f7f8 f895 	bl	8000220 <memchr>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d038      	beq.n	800816c <_svfiprintf_r+0x1d8>
 80080fa:	4b23      	ldr	r3, [pc, #140]	; (8008188 <_svfiprintf_r+0x1f4>)
 80080fc:	bb1b      	cbnz	r3, 8008146 <_svfiprintf_r+0x1b2>
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	3307      	adds	r3, #7
 8008102:	f023 0307 	bic.w	r3, r3, #7
 8008106:	3308      	adds	r3, #8
 8008108:	9303      	str	r3, [sp, #12]
 800810a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810c:	4433      	add	r3, r6
 800810e:	9309      	str	r3, [sp, #36]	; 0x24
 8008110:	e767      	b.n	8007fe2 <_svfiprintf_r+0x4e>
 8008112:	fb0c 3202 	mla	r2, ip, r2, r3
 8008116:	460c      	mov	r4, r1
 8008118:	2001      	movs	r0, #1
 800811a:	e7a5      	b.n	8008068 <_svfiprintf_r+0xd4>
 800811c:	2300      	movs	r3, #0
 800811e:	3401      	adds	r4, #1
 8008120:	9305      	str	r3, [sp, #20]
 8008122:	4619      	mov	r1, r3
 8008124:	f04f 0c0a 	mov.w	ip, #10
 8008128:	4620      	mov	r0, r4
 800812a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800812e:	3a30      	subs	r2, #48	; 0x30
 8008130:	2a09      	cmp	r2, #9
 8008132:	d903      	bls.n	800813c <_svfiprintf_r+0x1a8>
 8008134:	2b00      	cmp	r3, #0
 8008136:	d0c5      	beq.n	80080c4 <_svfiprintf_r+0x130>
 8008138:	9105      	str	r1, [sp, #20]
 800813a:	e7c3      	b.n	80080c4 <_svfiprintf_r+0x130>
 800813c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008140:	4604      	mov	r4, r0
 8008142:	2301      	movs	r3, #1
 8008144:	e7f0      	b.n	8008128 <_svfiprintf_r+0x194>
 8008146:	ab03      	add	r3, sp, #12
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	462a      	mov	r2, r5
 800814c:	4b0f      	ldr	r3, [pc, #60]	; (800818c <_svfiprintf_r+0x1f8>)
 800814e:	a904      	add	r1, sp, #16
 8008150:	4638      	mov	r0, r7
 8008152:	f3af 8000 	nop.w
 8008156:	1c42      	adds	r2, r0, #1
 8008158:	4606      	mov	r6, r0
 800815a:	d1d6      	bne.n	800810a <_svfiprintf_r+0x176>
 800815c:	89ab      	ldrh	r3, [r5, #12]
 800815e:	065b      	lsls	r3, r3, #25
 8008160:	f53f af2c 	bmi.w	8007fbc <_svfiprintf_r+0x28>
 8008164:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008166:	b01d      	add	sp, #116	; 0x74
 8008168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816c:	ab03      	add	r3, sp, #12
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	462a      	mov	r2, r5
 8008172:	4b06      	ldr	r3, [pc, #24]	; (800818c <_svfiprintf_r+0x1f8>)
 8008174:	a904      	add	r1, sp, #16
 8008176:	4638      	mov	r0, r7
 8008178:	f000 f87a 	bl	8008270 <_printf_i>
 800817c:	e7eb      	b.n	8008156 <_svfiprintf_r+0x1c2>
 800817e:	bf00      	nop
 8008180:	08008824 	.word	0x08008824
 8008184:	0800882e 	.word	0x0800882e
 8008188:	00000000 	.word	0x00000000
 800818c:	08007edd 	.word	0x08007edd
 8008190:	0800882a 	.word	0x0800882a

08008194 <_printf_common>:
 8008194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008198:	4616      	mov	r6, r2
 800819a:	4699      	mov	r9, r3
 800819c:	688a      	ldr	r2, [r1, #8]
 800819e:	690b      	ldr	r3, [r1, #16]
 80081a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081a4:	4293      	cmp	r3, r2
 80081a6:	bfb8      	it	lt
 80081a8:	4613      	movlt	r3, r2
 80081aa:	6033      	str	r3, [r6, #0]
 80081ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081b0:	4607      	mov	r7, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	b10a      	cbz	r2, 80081ba <_printf_common+0x26>
 80081b6:	3301      	adds	r3, #1
 80081b8:	6033      	str	r3, [r6, #0]
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	0699      	lsls	r1, r3, #26
 80081be:	bf42      	ittt	mi
 80081c0:	6833      	ldrmi	r3, [r6, #0]
 80081c2:	3302      	addmi	r3, #2
 80081c4:	6033      	strmi	r3, [r6, #0]
 80081c6:	6825      	ldr	r5, [r4, #0]
 80081c8:	f015 0506 	ands.w	r5, r5, #6
 80081cc:	d106      	bne.n	80081dc <_printf_common+0x48>
 80081ce:	f104 0a19 	add.w	sl, r4, #25
 80081d2:	68e3      	ldr	r3, [r4, #12]
 80081d4:	6832      	ldr	r2, [r6, #0]
 80081d6:	1a9b      	subs	r3, r3, r2
 80081d8:	42ab      	cmp	r3, r5
 80081da:	dc26      	bgt.n	800822a <_printf_common+0x96>
 80081dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081e0:	1e13      	subs	r3, r2, #0
 80081e2:	6822      	ldr	r2, [r4, #0]
 80081e4:	bf18      	it	ne
 80081e6:	2301      	movne	r3, #1
 80081e8:	0692      	lsls	r2, r2, #26
 80081ea:	d42b      	bmi.n	8008244 <_printf_common+0xb0>
 80081ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081f0:	4649      	mov	r1, r9
 80081f2:	4638      	mov	r0, r7
 80081f4:	47c0      	blx	r8
 80081f6:	3001      	adds	r0, #1
 80081f8:	d01e      	beq.n	8008238 <_printf_common+0xa4>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	68e5      	ldr	r5, [r4, #12]
 80081fe:	6832      	ldr	r2, [r6, #0]
 8008200:	f003 0306 	and.w	r3, r3, #6
 8008204:	2b04      	cmp	r3, #4
 8008206:	bf08      	it	eq
 8008208:	1aad      	subeq	r5, r5, r2
 800820a:	68a3      	ldr	r3, [r4, #8]
 800820c:	6922      	ldr	r2, [r4, #16]
 800820e:	bf0c      	ite	eq
 8008210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008214:	2500      	movne	r5, #0
 8008216:	4293      	cmp	r3, r2
 8008218:	bfc4      	itt	gt
 800821a:	1a9b      	subgt	r3, r3, r2
 800821c:	18ed      	addgt	r5, r5, r3
 800821e:	2600      	movs	r6, #0
 8008220:	341a      	adds	r4, #26
 8008222:	42b5      	cmp	r5, r6
 8008224:	d11a      	bne.n	800825c <_printf_common+0xc8>
 8008226:	2000      	movs	r0, #0
 8008228:	e008      	b.n	800823c <_printf_common+0xa8>
 800822a:	2301      	movs	r3, #1
 800822c:	4652      	mov	r2, sl
 800822e:	4649      	mov	r1, r9
 8008230:	4638      	mov	r0, r7
 8008232:	47c0      	blx	r8
 8008234:	3001      	adds	r0, #1
 8008236:	d103      	bne.n	8008240 <_printf_common+0xac>
 8008238:	f04f 30ff 	mov.w	r0, #4294967295
 800823c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008240:	3501      	adds	r5, #1
 8008242:	e7c6      	b.n	80081d2 <_printf_common+0x3e>
 8008244:	18e1      	adds	r1, r4, r3
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	2030      	movs	r0, #48	; 0x30
 800824a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800824e:	4422      	add	r2, r4
 8008250:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008254:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008258:	3302      	adds	r3, #2
 800825a:	e7c7      	b.n	80081ec <_printf_common+0x58>
 800825c:	2301      	movs	r3, #1
 800825e:	4622      	mov	r2, r4
 8008260:	4649      	mov	r1, r9
 8008262:	4638      	mov	r0, r7
 8008264:	47c0      	blx	r8
 8008266:	3001      	adds	r0, #1
 8008268:	d0e6      	beq.n	8008238 <_printf_common+0xa4>
 800826a:	3601      	adds	r6, #1
 800826c:	e7d9      	b.n	8008222 <_printf_common+0x8e>
	...

08008270 <_printf_i>:
 8008270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008274:	460c      	mov	r4, r1
 8008276:	4691      	mov	r9, r2
 8008278:	7e27      	ldrb	r7, [r4, #24]
 800827a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800827c:	2f78      	cmp	r7, #120	; 0x78
 800827e:	4680      	mov	r8, r0
 8008280:	469a      	mov	sl, r3
 8008282:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008286:	d807      	bhi.n	8008298 <_printf_i+0x28>
 8008288:	2f62      	cmp	r7, #98	; 0x62
 800828a:	d80a      	bhi.n	80082a2 <_printf_i+0x32>
 800828c:	2f00      	cmp	r7, #0
 800828e:	f000 80d8 	beq.w	8008442 <_printf_i+0x1d2>
 8008292:	2f58      	cmp	r7, #88	; 0x58
 8008294:	f000 80a3 	beq.w	80083de <_printf_i+0x16e>
 8008298:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800829c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082a0:	e03a      	b.n	8008318 <_printf_i+0xa8>
 80082a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082a6:	2b15      	cmp	r3, #21
 80082a8:	d8f6      	bhi.n	8008298 <_printf_i+0x28>
 80082aa:	a001      	add	r0, pc, #4	; (adr r0, 80082b0 <_printf_i+0x40>)
 80082ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80082b0:	08008309 	.word	0x08008309
 80082b4:	0800831d 	.word	0x0800831d
 80082b8:	08008299 	.word	0x08008299
 80082bc:	08008299 	.word	0x08008299
 80082c0:	08008299 	.word	0x08008299
 80082c4:	08008299 	.word	0x08008299
 80082c8:	0800831d 	.word	0x0800831d
 80082cc:	08008299 	.word	0x08008299
 80082d0:	08008299 	.word	0x08008299
 80082d4:	08008299 	.word	0x08008299
 80082d8:	08008299 	.word	0x08008299
 80082dc:	08008429 	.word	0x08008429
 80082e0:	0800834d 	.word	0x0800834d
 80082e4:	0800840b 	.word	0x0800840b
 80082e8:	08008299 	.word	0x08008299
 80082ec:	08008299 	.word	0x08008299
 80082f0:	0800844b 	.word	0x0800844b
 80082f4:	08008299 	.word	0x08008299
 80082f8:	0800834d 	.word	0x0800834d
 80082fc:	08008299 	.word	0x08008299
 8008300:	08008299 	.word	0x08008299
 8008304:	08008413 	.word	0x08008413
 8008308:	680b      	ldr	r3, [r1, #0]
 800830a:	1d1a      	adds	r2, r3, #4
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	600a      	str	r2, [r1, #0]
 8008310:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008318:	2301      	movs	r3, #1
 800831a:	e0a3      	b.n	8008464 <_printf_i+0x1f4>
 800831c:	6825      	ldr	r5, [r4, #0]
 800831e:	6808      	ldr	r0, [r1, #0]
 8008320:	062e      	lsls	r6, r5, #24
 8008322:	f100 0304 	add.w	r3, r0, #4
 8008326:	d50a      	bpl.n	800833e <_printf_i+0xce>
 8008328:	6805      	ldr	r5, [r0, #0]
 800832a:	600b      	str	r3, [r1, #0]
 800832c:	2d00      	cmp	r5, #0
 800832e:	da03      	bge.n	8008338 <_printf_i+0xc8>
 8008330:	232d      	movs	r3, #45	; 0x2d
 8008332:	426d      	negs	r5, r5
 8008334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008338:	485e      	ldr	r0, [pc, #376]	; (80084b4 <_printf_i+0x244>)
 800833a:	230a      	movs	r3, #10
 800833c:	e019      	b.n	8008372 <_printf_i+0x102>
 800833e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008342:	6805      	ldr	r5, [r0, #0]
 8008344:	600b      	str	r3, [r1, #0]
 8008346:	bf18      	it	ne
 8008348:	b22d      	sxthne	r5, r5
 800834a:	e7ef      	b.n	800832c <_printf_i+0xbc>
 800834c:	680b      	ldr	r3, [r1, #0]
 800834e:	6825      	ldr	r5, [r4, #0]
 8008350:	1d18      	adds	r0, r3, #4
 8008352:	6008      	str	r0, [r1, #0]
 8008354:	0628      	lsls	r0, r5, #24
 8008356:	d501      	bpl.n	800835c <_printf_i+0xec>
 8008358:	681d      	ldr	r5, [r3, #0]
 800835a:	e002      	b.n	8008362 <_printf_i+0xf2>
 800835c:	0669      	lsls	r1, r5, #25
 800835e:	d5fb      	bpl.n	8008358 <_printf_i+0xe8>
 8008360:	881d      	ldrh	r5, [r3, #0]
 8008362:	4854      	ldr	r0, [pc, #336]	; (80084b4 <_printf_i+0x244>)
 8008364:	2f6f      	cmp	r7, #111	; 0x6f
 8008366:	bf0c      	ite	eq
 8008368:	2308      	moveq	r3, #8
 800836a:	230a      	movne	r3, #10
 800836c:	2100      	movs	r1, #0
 800836e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008372:	6866      	ldr	r6, [r4, #4]
 8008374:	60a6      	str	r6, [r4, #8]
 8008376:	2e00      	cmp	r6, #0
 8008378:	bfa2      	ittt	ge
 800837a:	6821      	ldrge	r1, [r4, #0]
 800837c:	f021 0104 	bicge.w	r1, r1, #4
 8008380:	6021      	strge	r1, [r4, #0]
 8008382:	b90d      	cbnz	r5, 8008388 <_printf_i+0x118>
 8008384:	2e00      	cmp	r6, #0
 8008386:	d04d      	beq.n	8008424 <_printf_i+0x1b4>
 8008388:	4616      	mov	r6, r2
 800838a:	fbb5 f1f3 	udiv	r1, r5, r3
 800838e:	fb03 5711 	mls	r7, r3, r1, r5
 8008392:	5dc7      	ldrb	r7, [r0, r7]
 8008394:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008398:	462f      	mov	r7, r5
 800839a:	42bb      	cmp	r3, r7
 800839c:	460d      	mov	r5, r1
 800839e:	d9f4      	bls.n	800838a <_printf_i+0x11a>
 80083a0:	2b08      	cmp	r3, #8
 80083a2:	d10b      	bne.n	80083bc <_printf_i+0x14c>
 80083a4:	6823      	ldr	r3, [r4, #0]
 80083a6:	07df      	lsls	r7, r3, #31
 80083a8:	d508      	bpl.n	80083bc <_printf_i+0x14c>
 80083aa:	6923      	ldr	r3, [r4, #16]
 80083ac:	6861      	ldr	r1, [r4, #4]
 80083ae:	4299      	cmp	r1, r3
 80083b0:	bfde      	ittt	le
 80083b2:	2330      	movle	r3, #48	; 0x30
 80083b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083bc:	1b92      	subs	r2, r2, r6
 80083be:	6122      	str	r2, [r4, #16]
 80083c0:	f8cd a000 	str.w	sl, [sp]
 80083c4:	464b      	mov	r3, r9
 80083c6:	aa03      	add	r2, sp, #12
 80083c8:	4621      	mov	r1, r4
 80083ca:	4640      	mov	r0, r8
 80083cc:	f7ff fee2 	bl	8008194 <_printf_common>
 80083d0:	3001      	adds	r0, #1
 80083d2:	d14c      	bne.n	800846e <_printf_i+0x1fe>
 80083d4:	f04f 30ff 	mov.w	r0, #4294967295
 80083d8:	b004      	add	sp, #16
 80083da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083de:	4835      	ldr	r0, [pc, #212]	; (80084b4 <_printf_i+0x244>)
 80083e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	680e      	ldr	r6, [r1, #0]
 80083e8:	061f      	lsls	r7, r3, #24
 80083ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80083ee:	600e      	str	r6, [r1, #0]
 80083f0:	d514      	bpl.n	800841c <_printf_i+0x1ac>
 80083f2:	07d9      	lsls	r1, r3, #31
 80083f4:	bf44      	itt	mi
 80083f6:	f043 0320 	orrmi.w	r3, r3, #32
 80083fa:	6023      	strmi	r3, [r4, #0]
 80083fc:	b91d      	cbnz	r5, 8008406 <_printf_i+0x196>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	f023 0320 	bic.w	r3, r3, #32
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	2310      	movs	r3, #16
 8008408:	e7b0      	b.n	800836c <_printf_i+0xfc>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	f043 0320 	orr.w	r3, r3, #32
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	2378      	movs	r3, #120	; 0x78
 8008414:	4828      	ldr	r0, [pc, #160]	; (80084b8 <_printf_i+0x248>)
 8008416:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800841a:	e7e3      	b.n	80083e4 <_printf_i+0x174>
 800841c:	065e      	lsls	r6, r3, #25
 800841e:	bf48      	it	mi
 8008420:	b2ad      	uxthmi	r5, r5
 8008422:	e7e6      	b.n	80083f2 <_printf_i+0x182>
 8008424:	4616      	mov	r6, r2
 8008426:	e7bb      	b.n	80083a0 <_printf_i+0x130>
 8008428:	680b      	ldr	r3, [r1, #0]
 800842a:	6826      	ldr	r6, [r4, #0]
 800842c:	6960      	ldr	r0, [r4, #20]
 800842e:	1d1d      	adds	r5, r3, #4
 8008430:	600d      	str	r5, [r1, #0]
 8008432:	0635      	lsls	r5, r6, #24
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	d501      	bpl.n	800843c <_printf_i+0x1cc>
 8008438:	6018      	str	r0, [r3, #0]
 800843a:	e002      	b.n	8008442 <_printf_i+0x1d2>
 800843c:	0671      	lsls	r1, r6, #25
 800843e:	d5fb      	bpl.n	8008438 <_printf_i+0x1c8>
 8008440:	8018      	strh	r0, [r3, #0]
 8008442:	2300      	movs	r3, #0
 8008444:	6123      	str	r3, [r4, #16]
 8008446:	4616      	mov	r6, r2
 8008448:	e7ba      	b.n	80083c0 <_printf_i+0x150>
 800844a:	680b      	ldr	r3, [r1, #0]
 800844c:	1d1a      	adds	r2, r3, #4
 800844e:	600a      	str	r2, [r1, #0]
 8008450:	681e      	ldr	r6, [r3, #0]
 8008452:	6862      	ldr	r2, [r4, #4]
 8008454:	2100      	movs	r1, #0
 8008456:	4630      	mov	r0, r6
 8008458:	f7f7 fee2 	bl	8000220 <memchr>
 800845c:	b108      	cbz	r0, 8008462 <_printf_i+0x1f2>
 800845e:	1b80      	subs	r0, r0, r6
 8008460:	6060      	str	r0, [r4, #4]
 8008462:	6863      	ldr	r3, [r4, #4]
 8008464:	6123      	str	r3, [r4, #16]
 8008466:	2300      	movs	r3, #0
 8008468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800846c:	e7a8      	b.n	80083c0 <_printf_i+0x150>
 800846e:	6923      	ldr	r3, [r4, #16]
 8008470:	4632      	mov	r2, r6
 8008472:	4649      	mov	r1, r9
 8008474:	4640      	mov	r0, r8
 8008476:	47d0      	blx	sl
 8008478:	3001      	adds	r0, #1
 800847a:	d0ab      	beq.n	80083d4 <_printf_i+0x164>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	079b      	lsls	r3, r3, #30
 8008480:	d413      	bmi.n	80084aa <_printf_i+0x23a>
 8008482:	68e0      	ldr	r0, [r4, #12]
 8008484:	9b03      	ldr	r3, [sp, #12]
 8008486:	4298      	cmp	r0, r3
 8008488:	bfb8      	it	lt
 800848a:	4618      	movlt	r0, r3
 800848c:	e7a4      	b.n	80083d8 <_printf_i+0x168>
 800848e:	2301      	movs	r3, #1
 8008490:	4632      	mov	r2, r6
 8008492:	4649      	mov	r1, r9
 8008494:	4640      	mov	r0, r8
 8008496:	47d0      	blx	sl
 8008498:	3001      	adds	r0, #1
 800849a:	d09b      	beq.n	80083d4 <_printf_i+0x164>
 800849c:	3501      	adds	r5, #1
 800849e:	68e3      	ldr	r3, [r4, #12]
 80084a0:	9903      	ldr	r1, [sp, #12]
 80084a2:	1a5b      	subs	r3, r3, r1
 80084a4:	42ab      	cmp	r3, r5
 80084a6:	dcf2      	bgt.n	800848e <_printf_i+0x21e>
 80084a8:	e7eb      	b.n	8008482 <_printf_i+0x212>
 80084aa:	2500      	movs	r5, #0
 80084ac:	f104 0619 	add.w	r6, r4, #25
 80084b0:	e7f5      	b.n	800849e <_printf_i+0x22e>
 80084b2:	bf00      	nop
 80084b4:	08008835 	.word	0x08008835
 80084b8:	08008846 	.word	0x08008846

080084bc <memmove>:
 80084bc:	4288      	cmp	r0, r1
 80084be:	b510      	push	{r4, lr}
 80084c0:	eb01 0402 	add.w	r4, r1, r2
 80084c4:	d902      	bls.n	80084cc <memmove+0x10>
 80084c6:	4284      	cmp	r4, r0
 80084c8:	4623      	mov	r3, r4
 80084ca:	d807      	bhi.n	80084dc <memmove+0x20>
 80084cc:	1e43      	subs	r3, r0, #1
 80084ce:	42a1      	cmp	r1, r4
 80084d0:	d008      	beq.n	80084e4 <memmove+0x28>
 80084d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084da:	e7f8      	b.n	80084ce <memmove+0x12>
 80084dc:	4402      	add	r2, r0
 80084de:	4601      	mov	r1, r0
 80084e0:	428a      	cmp	r2, r1
 80084e2:	d100      	bne.n	80084e6 <memmove+0x2a>
 80084e4:	bd10      	pop	{r4, pc}
 80084e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084ee:	e7f7      	b.n	80084e0 <memmove+0x24>

080084f0 <_free_r>:
 80084f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084f2:	2900      	cmp	r1, #0
 80084f4:	d048      	beq.n	8008588 <_free_r+0x98>
 80084f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084fa:	9001      	str	r0, [sp, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008502:	bfb8      	it	lt
 8008504:	18e4      	addlt	r4, r4, r3
 8008506:	f000 f8d3 	bl	80086b0 <__malloc_lock>
 800850a:	4a20      	ldr	r2, [pc, #128]	; (800858c <_free_r+0x9c>)
 800850c:	9801      	ldr	r0, [sp, #4]
 800850e:	6813      	ldr	r3, [r2, #0]
 8008510:	4615      	mov	r5, r2
 8008512:	b933      	cbnz	r3, 8008522 <_free_r+0x32>
 8008514:	6063      	str	r3, [r4, #4]
 8008516:	6014      	str	r4, [r2, #0]
 8008518:	b003      	add	sp, #12
 800851a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800851e:	f000 b8cd 	b.w	80086bc <__malloc_unlock>
 8008522:	42a3      	cmp	r3, r4
 8008524:	d90b      	bls.n	800853e <_free_r+0x4e>
 8008526:	6821      	ldr	r1, [r4, #0]
 8008528:	1862      	adds	r2, r4, r1
 800852a:	4293      	cmp	r3, r2
 800852c:	bf04      	itt	eq
 800852e:	681a      	ldreq	r2, [r3, #0]
 8008530:	685b      	ldreq	r3, [r3, #4]
 8008532:	6063      	str	r3, [r4, #4]
 8008534:	bf04      	itt	eq
 8008536:	1852      	addeq	r2, r2, r1
 8008538:	6022      	streq	r2, [r4, #0]
 800853a:	602c      	str	r4, [r5, #0]
 800853c:	e7ec      	b.n	8008518 <_free_r+0x28>
 800853e:	461a      	mov	r2, r3
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	b10b      	cbz	r3, 8008548 <_free_r+0x58>
 8008544:	42a3      	cmp	r3, r4
 8008546:	d9fa      	bls.n	800853e <_free_r+0x4e>
 8008548:	6811      	ldr	r1, [r2, #0]
 800854a:	1855      	adds	r5, r2, r1
 800854c:	42a5      	cmp	r5, r4
 800854e:	d10b      	bne.n	8008568 <_free_r+0x78>
 8008550:	6824      	ldr	r4, [r4, #0]
 8008552:	4421      	add	r1, r4
 8008554:	1854      	adds	r4, r2, r1
 8008556:	42a3      	cmp	r3, r4
 8008558:	6011      	str	r1, [r2, #0]
 800855a:	d1dd      	bne.n	8008518 <_free_r+0x28>
 800855c:	681c      	ldr	r4, [r3, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	6053      	str	r3, [r2, #4]
 8008562:	4421      	add	r1, r4
 8008564:	6011      	str	r1, [r2, #0]
 8008566:	e7d7      	b.n	8008518 <_free_r+0x28>
 8008568:	d902      	bls.n	8008570 <_free_r+0x80>
 800856a:	230c      	movs	r3, #12
 800856c:	6003      	str	r3, [r0, #0]
 800856e:	e7d3      	b.n	8008518 <_free_r+0x28>
 8008570:	6825      	ldr	r5, [r4, #0]
 8008572:	1961      	adds	r1, r4, r5
 8008574:	428b      	cmp	r3, r1
 8008576:	bf04      	itt	eq
 8008578:	6819      	ldreq	r1, [r3, #0]
 800857a:	685b      	ldreq	r3, [r3, #4]
 800857c:	6063      	str	r3, [r4, #4]
 800857e:	bf04      	itt	eq
 8008580:	1949      	addeq	r1, r1, r5
 8008582:	6021      	streq	r1, [r4, #0]
 8008584:	6054      	str	r4, [r2, #4]
 8008586:	e7c7      	b.n	8008518 <_free_r+0x28>
 8008588:	b003      	add	sp, #12
 800858a:	bd30      	pop	{r4, r5, pc}
 800858c:	200040c4 	.word	0x200040c4

08008590 <_malloc_r>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	1ccd      	adds	r5, r1, #3
 8008594:	f025 0503 	bic.w	r5, r5, #3
 8008598:	3508      	adds	r5, #8
 800859a:	2d0c      	cmp	r5, #12
 800859c:	bf38      	it	cc
 800859e:	250c      	movcc	r5, #12
 80085a0:	2d00      	cmp	r5, #0
 80085a2:	4606      	mov	r6, r0
 80085a4:	db01      	blt.n	80085aa <_malloc_r+0x1a>
 80085a6:	42a9      	cmp	r1, r5
 80085a8:	d903      	bls.n	80085b2 <_malloc_r+0x22>
 80085aa:	230c      	movs	r3, #12
 80085ac:	6033      	str	r3, [r6, #0]
 80085ae:	2000      	movs	r0, #0
 80085b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b2:	f000 f87d 	bl	80086b0 <__malloc_lock>
 80085b6:	4921      	ldr	r1, [pc, #132]	; (800863c <_malloc_r+0xac>)
 80085b8:	680a      	ldr	r2, [r1, #0]
 80085ba:	4614      	mov	r4, r2
 80085bc:	b99c      	cbnz	r4, 80085e6 <_malloc_r+0x56>
 80085be:	4f20      	ldr	r7, [pc, #128]	; (8008640 <_malloc_r+0xb0>)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	b923      	cbnz	r3, 80085ce <_malloc_r+0x3e>
 80085c4:	4621      	mov	r1, r4
 80085c6:	4630      	mov	r0, r6
 80085c8:	f000 f862 	bl	8008690 <_sbrk_r>
 80085cc:	6038      	str	r0, [r7, #0]
 80085ce:	4629      	mov	r1, r5
 80085d0:	4630      	mov	r0, r6
 80085d2:	f000 f85d 	bl	8008690 <_sbrk_r>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	d123      	bne.n	8008622 <_malloc_r+0x92>
 80085da:	230c      	movs	r3, #12
 80085dc:	6033      	str	r3, [r6, #0]
 80085de:	4630      	mov	r0, r6
 80085e0:	f000 f86c 	bl	80086bc <__malloc_unlock>
 80085e4:	e7e3      	b.n	80085ae <_malloc_r+0x1e>
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	1b5b      	subs	r3, r3, r5
 80085ea:	d417      	bmi.n	800861c <_malloc_r+0x8c>
 80085ec:	2b0b      	cmp	r3, #11
 80085ee:	d903      	bls.n	80085f8 <_malloc_r+0x68>
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	441c      	add	r4, r3
 80085f4:	6025      	str	r5, [r4, #0]
 80085f6:	e004      	b.n	8008602 <_malloc_r+0x72>
 80085f8:	6863      	ldr	r3, [r4, #4]
 80085fa:	42a2      	cmp	r2, r4
 80085fc:	bf0c      	ite	eq
 80085fe:	600b      	streq	r3, [r1, #0]
 8008600:	6053      	strne	r3, [r2, #4]
 8008602:	4630      	mov	r0, r6
 8008604:	f000 f85a 	bl	80086bc <__malloc_unlock>
 8008608:	f104 000b 	add.w	r0, r4, #11
 800860c:	1d23      	adds	r3, r4, #4
 800860e:	f020 0007 	bic.w	r0, r0, #7
 8008612:	1ac2      	subs	r2, r0, r3
 8008614:	d0cc      	beq.n	80085b0 <_malloc_r+0x20>
 8008616:	1a1b      	subs	r3, r3, r0
 8008618:	50a3      	str	r3, [r4, r2]
 800861a:	e7c9      	b.n	80085b0 <_malloc_r+0x20>
 800861c:	4622      	mov	r2, r4
 800861e:	6864      	ldr	r4, [r4, #4]
 8008620:	e7cc      	b.n	80085bc <_malloc_r+0x2c>
 8008622:	1cc4      	adds	r4, r0, #3
 8008624:	f024 0403 	bic.w	r4, r4, #3
 8008628:	42a0      	cmp	r0, r4
 800862a:	d0e3      	beq.n	80085f4 <_malloc_r+0x64>
 800862c:	1a21      	subs	r1, r4, r0
 800862e:	4630      	mov	r0, r6
 8008630:	f000 f82e 	bl	8008690 <_sbrk_r>
 8008634:	3001      	adds	r0, #1
 8008636:	d1dd      	bne.n	80085f4 <_malloc_r+0x64>
 8008638:	e7cf      	b.n	80085da <_malloc_r+0x4a>
 800863a:	bf00      	nop
 800863c:	200040c4 	.word	0x200040c4
 8008640:	200040c8 	.word	0x200040c8

08008644 <_realloc_r>:
 8008644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008646:	4607      	mov	r7, r0
 8008648:	4614      	mov	r4, r2
 800864a:	460e      	mov	r6, r1
 800864c:	b921      	cbnz	r1, 8008658 <_realloc_r+0x14>
 800864e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008652:	4611      	mov	r1, r2
 8008654:	f7ff bf9c 	b.w	8008590 <_malloc_r>
 8008658:	b922      	cbnz	r2, 8008664 <_realloc_r+0x20>
 800865a:	f7ff ff49 	bl	80084f0 <_free_r>
 800865e:	4625      	mov	r5, r4
 8008660:	4628      	mov	r0, r5
 8008662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008664:	f000 f830 	bl	80086c8 <_malloc_usable_size_r>
 8008668:	42a0      	cmp	r0, r4
 800866a:	d20f      	bcs.n	800868c <_realloc_r+0x48>
 800866c:	4621      	mov	r1, r4
 800866e:	4638      	mov	r0, r7
 8008670:	f7ff ff8e 	bl	8008590 <_malloc_r>
 8008674:	4605      	mov	r5, r0
 8008676:	2800      	cmp	r0, #0
 8008678:	d0f2      	beq.n	8008660 <_realloc_r+0x1c>
 800867a:	4631      	mov	r1, r6
 800867c:	4622      	mov	r2, r4
 800867e:	f7ff fbef 	bl	8007e60 <memcpy>
 8008682:	4631      	mov	r1, r6
 8008684:	4638      	mov	r0, r7
 8008686:	f7ff ff33 	bl	80084f0 <_free_r>
 800868a:	e7e9      	b.n	8008660 <_realloc_r+0x1c>
 800868c:	4635      	mov	r5, r6
 800868e:	e7e7      	b.n	8008660 <_realloc_r+0x1c>

08008690 <_sbrk_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4d06      	ldr	r5, [pc, #24]	; (80086ac <_sbrk_r+0x1c>)
 8008694:	2300      	movs	r3, #0
 8008696:	4604      	mov	r4, r0
 8008698:	4608      	mov	r0, r1
 800869a:	602b      	str	r3, [r5, #0]
 800869c:	f7ff fb4a 	bl	8007d34 <_sbrk>
 80086a0:	1c43      	adds	r3, r0, #1
 80086a2:	d102      	bne.n	80086aa <_sbrk_r+0x1a>
 80086a4:	682b      	ldr	r3, [r5, #0]
 80086a6:	b103      	cbz	r3, 80086aa <_sbrk_r+0x1a>
 80086a8:	6023      	str	r3, [r4, #0]
 80086aa:	bd38      	pop	{r3, r4, r5, pc}
 80086ac:	20004310 	.word	0x20004310

080086b0 <__malloc_lock>:
 80086b0:	4801      	ldr	r0, [pc, #4]	; (80086b8 <__malloc_lock+0x8>)
 80086b2:	f000 b811 	b.w	80086d8 <__retarget_lock_acquire_recursive>
 80086b6:	bf00      	nop
 80086b8:	20004318 	.word	0x20004318

080086bc <__malloc_unlock>:
 80086bc:	4801      	ldr	r0, [pc, #4]	; (80086c4 <__malloc_unlock+0x8>)
 80086be:	f000 b80c 	b.w	80086da <__retarget_lock_release_recursive>
 80086c2:	bf00      	nop
 80086c4:	20004318 	.word	0x20004318

080086c8 <_malloc_usable_size_r>:
 80086c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086cc:	1f18      	subs	r0, r3, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	bfbc      	itt	lt
 80086d2:	580b      	ldrlt	r3, [r1, r0]
 80086d4:	18c0      	addlt	r0, r0, r3
 80086d6:	4770      	bx	lr

080086d8 <__retarget_lock_acquire_recursive>:
 80086d8:	4770      	bx	lr

080086da <__retarget_lock_release_recursive>:
 80086da:	4770      	bx	lr

080086dc <_init>:
 80086dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086de:	bf00      	nop
 80086e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e2:	bc08      	pop	{r3}
 80086e4:	469e      	mov	lr, r3
 80086e6:	4770      	bx	lr

080086e8 <_fini>:
 80086e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ea:	bf00      	nop
 80086ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ee:	bc08      	pop	{r3}
 80086f0:	469e      	mov	lr, r3
 80086f2:	4770      	bx	lr
